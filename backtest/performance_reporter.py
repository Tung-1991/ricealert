# -*- coding: utf-8 -*-
import os
import json
import pandas as pd
from typing import Dict, Any

# --- Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PAPER_DATA_DIR = os.path.join(BASE_DIR, "paper_data")
STATE_FILE = os.path.join(PAPER_DATA_DIR, "paper_trade_state.json")

def load_trade_history() -> list:
    """T·∫£i l·ªãch s·ª≠ giao d·ªãch t·ª´ file state.json."""
    if not os.path.exists(STATE_FILE):
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file state '{STATE_FILE}'.")
        return []
    try:
        with open(STATE_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            return data.get("trade_history", [])
    except json.JSONDecodeError:
        print(f"‚ùå L·ªói: File state '{STATE_FILE}' b·ªã h·ªèng.")
        return []

def analyze_tactic_performance(trade_history: list) -> pd.DataFrame | None:
    """Ph√¢n t√≠ch hi·ªáu su·∫•t c·ªßa t·ª´ng Tactic t·ª´ l·ªãch s·ª≠ giao d·ªãch."""
    if not trade_history:
        print("‚ÑπÔ∏è L·ªãch s·ª≠ giao d·ªãch tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ ph√¢n t√≠ch.")
        return None

    df = pd.DataFrame(trade_history)

    # Ch·ªâ ph√¢n t√≠ch c√°c l·ªánh ƒë√£ c√≥ PnL
    df = df[df['pnl_usd'].notna()]
    if df.empty:
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh ƒë√£ ƒë√≥ng n√†o c√≥ PnL ƒë·ªÉ ph√¢n t√≠ch.")
        return None

    # Ph√¢n t√≠ch theo Tactic m·ªü l·ªánh ban ƒë·∫ßu
    results = []
    for tactic, group in df.groupby('opened_by_tactic'):
        total_trades = len(group)
        wins = group[group['pnl_usd'] > 0]
        losses = group[group['pnl_usd'] <= 0]
        
        num_wins = len(wins)
        num_losses = len(losses)
        
        win_rate = (num_wins / total_trades) * 100 if total_trades > 0 else 0
        total_pnl = group['pnl_usd'].sum()
        
        avg_win_pnl = wins['pnl_usd'].mean() if num_wins > 0 else 0
        avg_loss_pnl = losses['pnl_usd'].mean() if num_losses > 0 else 0
        
        # Payoff Ratio = (L·ª£i nhu·∫≠n trung b√¨nh) / (Thua l·ªó trung b√¨nh)
        payoff_ratio = abs(avg_win_pnl / avg_loss_pnl) if avg_loss_pnl != 0 else float('inf')

        results.append({
            "Tactic": tactic,
            "Total Trades": total_trades,
            "Win Rate (%)": win_rate,
            "Total PnL ($)": total_pnl,
            "Avg Win ($)": avg_win_pnl,
            "Avg Loss ($)": avg_loss_pnl,
            "Payoff Ratio": payoff_ratio
        })

    if not results:
        return None
        
    # S·∫Øp x·∫øp theo Total PnL ƒë·ªÉ bi·∫øt Tactic n√†o hi·ªáu qu·∫£ nh·∫•t
    performance_df = pd.DataFrame(results).sort_values(by="Total PnL ($)", ascending=False)
    return performance_df

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y ph√¢n t√≠ch v√† hi·ªÉn th·ªã k·∫øt qu·∫£."""
    print("="*15, "üìä B·∫¢NG PH√ÇN T√çCH HI·ªÜU SU·∫§T TACTIC üìä", "="*15)
    
    trade_history = load_trade_history()
    performance_df = analyze_tactic_performance(trade_history)

    if performance_df is not None:
        # ƒê·ªãnh d·∫°ng output cho ƒë·∫πp
        pd.set_option('display.float_format', '{:,.2f}'.format)
        print(performance_df.to_string(index=False))
    
    print("="*65)

if __name__ == "__main__":
    main()
