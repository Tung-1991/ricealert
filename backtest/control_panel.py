# backtest/control_panel.py
import os
import sys
import json
from datetime import datetime, timedelta
import pytz
import requests
import uuid

# --- C√ÅC H·∫∞NG S·ªê V√Ä C·∫§U H√åNH ---
# Th√™m sys.path ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th·ªÉ import t·ª´ th∆∞ m·ª•c g·ªëc
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR) # Ch·ªâ ƒëi l√™n 1 c·∫•p
sys.path.append(PROJECT_ROOT)

# C·∫≠p nh·∫≠t ƒë∆∞·ªùng d·∫´n file state
STATE_FILE = os.path.join(BASE_DIR, "paper_data", "paper_trade_state.json")
ENV_FILE = os.path.join(PROJECT_ROOT, ".env")
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

# ### <<< C·∫¨P NH·∫¨T >>> ###
# T√™n c√°c chi·∫øn thu·∫≠t v√† V√πng ƒë∆∞·ª£c l·∫•y t·ª´ file paper_trade.py v8
TACTICS = [
    "Breakout_Hunter", "Dip_Hunter", "AI_Aggressor",
    "Balanced_Trader", "Cautious_Observer"
]
ZONES = ["LEADING", "COINCIDENT", "LAGGING", "NOISE"]
INTERVALS = ["1h", "4h", "1d"]

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---

def get_current_price(symbol):
    """L·∫•y gi√° th·ªã tr∆∞·ªùng hi·ªán t·∫°i cho m·ªôt symbol t·ª´ API Binance Spot."""
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        return float(data['price'])
    except Exception as e:
        print(f"\n‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y gi√° cho {symbol}: {e}")
        return None

def load_state():
    """T·∫£i tr·∫°ng th√°i hi·ªán t·∫°i t·ª´ file JSON."""
    if not os.path.exists(STATE_FILE):
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file tr·∫°ng th√°i t·∫°i: {STATE_FILE}")
        return None
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            if not content:
                print("‚ö†Ô∏è File tr·∫°ng th√°i tr·ªëng, tr·∫£ v·ªÅ tr·∫°ng th√°i m·∫∑c ƒë·ªãnh.")
                return {"cash": 0, "active_trades": [], "trade_history": []}
            return json.loads(content)
    except json.JSONDecodeError:
        print(f"‚ùå L·ªói: File tr·∫°ng th√°i {STATE_FILE} b·ªã l·ªói JSON.")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi ƒë·ªçc file: {e}")
        return None

def save_state(state):
    """L∆∞u tr·∫°ng th√°i m·ªõi v√†o file JSON."""
    try:
        # T·∫°o m·ªôt b·∫£n sao ƒë·ªÉ kh√¥ng thay ƒë·ªïi state g·ªëc khi lo·∫°i b·ªè key t·∫°m
        state_to_save = state.copy()
        state_to_save.pop('temp_newly_opened_trades', None)
        state_to_save.pop('temp_newly_closed_trades', None)
        
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state_to_save, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ ƒê√£ l∆∞u l·∫°i tr·∫°ng th√°i th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file tr·∫°ng th√°i: {e}")

# ### <<< C·∫¢I TI·∫æN >>> ###
# H√†m ƒë·ªçc file .env linh ho·∫°t h∆°n
def parse_env_variable(key_name):
    """ƒê·ªçc m·ªôt bi·∫øn t·ª´ file .env v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng danh s√°ch."""
    try:
        with open(ENV_FILE, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if key.strip() == key_name:
                        return [item.strip() for item in value.strip().split(',')]
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env t·∫°i {ENV_FILE}")
    return []

def select_from_list(options, prompt):
    """Hi·ªÉn th·ªã m·ªôt danh s√°ch l·ª±a ch·ªçn v√† tr·∫£ v·ªÅ l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng."""
    for i, option in enumerate(options):
        print(f"  {i+1}. {option}")
    while True:
        try:
            choice = int(input(prompt))
            if 1 <= choice <= len(options):
                return options[choice - 1]
            else:
                print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt con s·ªë.")

# --- C√ÅC H√ÄM CH·ª®C NƒÇNG ---

# ### <<< THAY ƒê·ªîI L·ªöN >>> ###
# C·∫≠p nh·∫≠t ho√†n to√†n ph·∫ßn hi·ªÉn th·ªã ƒë·ªÉ gi·ªëng v·ªõi b√°o c√°o c·ªßa paper_trade v8
def view_open_trades():
    """Hi·ªÉn th·ªã chi ti·∫øt t·∫•t c·∫£ c√°c l·ªánh ƒëang m·ªü, bao g·ªìm PnL real-time."""
    print("\n--- DANH S√ÅCH L·ªÜNH ƒêANG M·ªû (Real-time) ---")
    state = load_state()
    if not state or not state.get("active_trades"):
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü.")
        return None

    active_trades = state.get("active_trades", [])
    symbols_needed = list(set(trade['symbol'] for trade in active_trades))
    prices = {sym: get_current_price(sym) for sym in symbols_needed}

    total_invested = sum(t.get('total_invested_usd', 0.0) for t in active_trades)
    total_unrealized_pnl = sum(
        (((prices.get(t['symbol'], t['entry_price']) - t['entry_price']) / t['entry_price']) * t['total_invested_usd'])
        if prices.get(t['symbol']) else 0
        for t in active_trades
    )
    
    cash = state.get('cash', 0.0)
    total_equity = cash + total_invested + total_unrealized_pnl
    pnl_icon_total = "üü¢" if total_unrealized_pnl >= 0 else "üî¥"

    print(f"üíµ Ti·ªÅn m·∫∑t: ${cash:,.2f} | üíº V·ªën trong l·ªánh: ${total_invested:,.2f}")
    print(f"üìä T·ªïng t√†i s·∫£n ∆∞·ªõc t√≠nh: ${total_equity:,.2f} | PnL ƒëang m·ªü: {pnl_icon_total} ${total_unrealized_pnl:,.2f}\n")

    for i, trade in enumerate(active_trades):
        symbol = trade.get('symbol', 'N/A')
        current_price = prices.get(symbol)
        
        if current_price is None:
            print(f"{i+1}. ‚ö†Ô∏è {symbol} - Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i. B·ªè qua hi·ªÉn th·ªã PnL.")
            continue
            
        # T√≠nh to√°n PnL
        entry_price = trade.get('entry_price', 0)
        invested_usd = trade.get('total_invested_usd', 0)
        pnl_percent = ((current_price - entry_price) / entry_price) * 100
        pnl_usd = (pnl_percent / 100) * invested_usd
        pnl_icon = "üü¢" if pnl_usd >= 0 else "üî¥"
        
        # T√≠nh to√°n th·ªùi gian gi·ªØ l·ªánh
        entry_time_iso = trade.get('entry_time', datetime.now(VIETNAM_TZ).isoformat())
        holding_duration = datetime.now(VIETNAM_TZ) - datetime.fromisoformat(entry_time_iso)
        holding_hours = holding_duration.total_seconds() / 3600
        
        # Chu·∫©n b·ªã c√°c chu·ªói th√¥ng tin ph·ª•
        dca_info = f" (DCA:{len(trade.get('dca_entries',[]))})" if trade.get('dca_entries') else ""
        tsl_info = f" TSL:{trade['sl']:.4f}" if "Trailing_SL_Active" in trade.get('tactic_used', []) else ""
        tp1_info = " TP1‚úÖ" if trade.get('tp1_hit', False) else ""

        # Chu·∫©n b·ªã th√¥ng tin V√πng v√† ƒêi·ªÉm s·ªë
        entry_score = trade.get('entry_score', 0.0)
        last_score = trade.get('last_score', entry_score)
        score_display = f"{entry_score:,.1f}‚Üí{last_score:,.1f}"
        if last_score < entry_score: score_display += "üìâ"
        elif last_score > entry_score: score_display += "üìà"
        
        entry_zone = trade.get('entry_zone', 'N/A')
        last_zone = trade.get('last_zone', entry_zone)
        zone_display = entry_zone
        if last_zone != entry_zone:
            zone_display = f"{entry_zone}‚Üí{last_zone}"

        # D√≤ng 1: T·ªïng quan (gi·ªëng b√°o c√°o)
        tactic_info = f"({trade.get('opened_by_tactic')} | {score_display} | {zone_display})"
        line1 = (f"{i+1}. {pnl_icon} **{trade['symbol']}-{trade['interval']}** {tactic_info} "
                 f"PnL: **${pnl_usd:,.2f} ({pnl_percent:+.2f}%)** | Gi·ªØ:{holding_hours:.1f}h{dca_info}{tp1_info}")
        
        # D√≤ng 2: Chi ti·∫øt gi√° (gi·ªëng b√°o c√°o)
        current_value = invested_usd + pnl_usd

        # D√≤ng 2: Chi ti·∫øt gi√° (gi·ªëng b√°o c√°o)
        line2 = (f"    V·ªën:${invested_usd:,.2f} -> ${current_value:,.2f} | Entry:{entry_price:.4f} Cur:{current_price:.4f} "
                 f"TP:{trade.get('tp', 0):.4f} SL:{trade.get('sl', 0):.4f}{tsl_info}")

        
        # In ra m√†n h√¨nh (lo·∫°i b·ªè markdown)
        print(line1.replace('**', ''))
        print(line2)

    print("-" * 80)
    return active_trades

def close_manual_trades():
    print("\n--- Ch·ª©c nƒÉng: ƒê√≥ng l·ªánh th·ªß c√¥ng ---")
    state = load_state()
    if not state: return
    
    active_trades = view_open_trades()
    if not active_trades: return

    try:
        choice = input("\nüëâ Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa c√°c l·ªánh c·∫ßn ƒë√≥ng (v√≠ d·ª•: 1,3). Nh·∫•n Enter ƒë·ªÉ h·ªßy: ")
        if not choice.strip():
            print("H·ªßy thao t√°c.")
            return

        indices_to_close = []
        parts = choice.split(',')
        for part in parts:
            if part.strip().isdigit():
                index = int(part.strip()) - 1
                if 0 <= index < len(active_trades):
                    indices_to_close.append(index)
                else:
                    print(f"‚ö†Ô∏è C·∫£nh b√°o: S·ªë '{part.strip()}' kh√¥ng h·ª£p l·ªá.")
        
        if not indices_to_close:
            print("‚ùå Kh√¥ng c√≥ l·ª±a ch·ªçn h·ª£p l·ªá. Thao t√°c b·ªã h·ªßy.")
            return
            
        indices_to_close.sort(reverse=True) # X√≥a t·ª´ cu·ªëi ƒë·ªÉ kh√¥ng l√†m thay ƒë·ªïi ch·ªâ s·ªë
        
        for index in indices_to_close:
            trade = state['active_trades'][index]
            symbol = trade.get('symbol')
            print(f"\nƒêang x·ª≠ l√Ω ƒë√≥ng l·ªánh #{index + 1}: {symbol}...")
            
            current_price = get_current_price(symbol)
            if current_price is None:
                print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng l·ªánh cho {symbol} v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°. B·ªè qua.")
                continue

            # T√≠nh to√°n PnL
            entry_price = trade.get('entry_price', 0)
            invested_usd = trade.get('total_invested_usd', 0)
            pnl_percent = ((current_price - entry_price) / entry_price) * 100
            pnl_usd = (pnl_percent / 100) * invested_usd

            # C·∫≠p nh·∫≠t th√¥ng tin cho l·ªánh ƒë√£ ƒë√≥ng
            trade['status'] = 'Closed (Manual)'
            trade['exit_price'] = current_price
            trade['exit_time'] = datetime.now(VIETNAM_TZ).isoformat()
            trade['pnl_usd'] = pnl_usd + trade.get('realized_pnl_usd', 0.0) # C·ªông d·ªìn PnL ƒë√£ ch·ªët
            trade['pnl_percent'] = pnl_percent

            # C·∫≠p nh·∫≠t state
            state['cash'] = state.get('cash', 0) + invested_usd + pnl_usd
            closed_trade = state['active_trades'].pop(index)
            state.setdefault('trade_history', []).append(closed_trade)
            
            print(f"‚úÖ ƒê√£ ƒë√≥ng l·ªánh {symbol}. PnL phi√™n cu·ªëi: ${pnl_usd:,.2f}. PnL t·ªïng: ${closed_trade['pnl_usd']:,.2f}")
            
        save_state(state)

    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

def close_all_trades():
    print("\n--- Ch·ª©c nƒÉng: ƒê√≥ng T·∫§T C·∫¢ l·ªánh ---")
    state = load_state()
    if not state or not state.get("active_trades"):
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ƒë·ªÉ ƒë√≥ng.")
        return

    print("‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω ƒë√≥ng t·∫•t c·∫£ c√°c v·ªã th·∫ø ƒëang m·ªü ngay l·∫≠p t·ª©c.")
    confirm = input("üëâ B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/n): ").lower()
    if confirm != 'y':
        print("H·ªßy thao t√°c.")
        return

    trades_to_close = list(state['active_trades'])
    closed_count = 0
    state['active_trades'] = [] # X√≥a h·∫øt danh s√°ch l·ªánh ƒëang m·ªü

    for trade in trades_to_close:
        symbol = trade.get('symbol')
        print(f"\nƒêang x·ª≠ l√Ω ƒë√≥ng l·ªánh: {symbol}...")
        
        current_price = get_current_price(symbol)
        if current_price is None:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng l·ªánh cho {symbol} v√¨ kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°. Ho√†n l·∫°i l·ªánh v√†o danh s√°ch active.")
            state['active_trades'].append(trade) # Tr·∫£ l·∫°i n·∫øu kh√¥ng ƒë√≥ng ƒë∆∞·ª£c
            continue

        entry_price = trade.get('entry_price', 0)
        invested_usd = trade.get('total_invested_usd', 0)
        pnl_percent = ((current_price - entry_price) / entry_price) * 100
        pnl_usd = (pnl_percent / 100) * invested_usd
        
        trade['status'] = 'Closed (All Manual)'
        trade['exit_price'] = current_price
        trade['exit_time'] = datetime.now(VIETNAM_TZ).isoformat()
        trade['pnl_usd'] = pnl_usd + trade.get('realized_pnl_usd', 0.0)
        trade['pnl_percent'] = pnl_percent
        
        state['cash'] = state.get('cash', 0) + invested_usd + pnl_usd
        state.setdefault('trade_history', []).append(trade)
        
        print(f"‚úÖ ƒê√£ ƒë√≥ng l·ªánh {symbol}. PnL phi√™n cu·ªëi: ${pnl_usd:,.2f}. PnL t·ªïng: ${trade['pnl_usd']:,.2f}")
        closed_count += 1

    if closed_count > 0:
        save_state(state)
    else:
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c ƒë√≥ng.")

def extend_stale_check():
    print("\n--- Ch·ª©c nƒÉng: Gia h·∫°n l·ªánh ---")
    state = load_state()
    if not state: return
    
    active_trades = view_open_trades()
    if not active_trades: return

    try:
        choice = input("\nüëâ Ch·ªçn s·ªë th·ª© t·ª± c·ªßa l·ªánh c·∫ßn gia h·∫°n (nh·∫•n Enter ƒë·ªÉ h·ªßy): ")
        if not choice.strip() or not choice.strip().isdigit():
            print("H·ªßy thao t√°c.")
            return
            
        index = int(choice.strip()) - 1
        if not (0 <= index < len(active_trades)):
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
            return
            
        hours = float(input("üëâ Nh·∫≠p s·ªë gi·ªù mu·ªën gia h·∫°n (v√≠ d·ª•: 48): "))
        if hours <= 0:
            print("‚ùå S·ªë gi·ªù ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng.")
            return
            
        override_until = datetime.now(VIETNAM_TZ) + timedelta(hours=hours)
        # Truy c·∫≠p tr·ª±c ti·∫øp v√†o state ƒë·ªÉ c·∫≠p nh·∫≠t
        trade_to_update = state['active_trades'][index]
        trade_to_update['stale_override_until'] = override_until.isoformat()
        
        print(f"\n‚úÖ L·ªánh {trade_to_update['symbol']} ƒë√£ ƒë∆∞·ª£c gia h·∫°n.")
        print(f"   H·ªá th·ªëng s·∫Ω b·ªè qua ki·ªÉm tra 'stale' cho l·ªánh n√†y cho ƒë·∫øn: {override_until.strftime('%Y-%m-%d %H:%M:%S')}")
        save_state(state)
        
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt con s·ªë h·ª£p l·ªá cho s·ªë gi·ªù.")
    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

# ### <<< THAY ƒê·ªîI L·ªöN >>> ###
# C·∫≠p nh·∫≠t h√†m m·ªü l·ªánh ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi c·∫•u tr√∫c c·ªßa v8
def open_manual_trade():
    print("\n--- Ch·ª©c nƒÉng: M·ªü l·ªánh m·ªõi th·ªß c√¥ng ---")
    state = load_state()
    if not state: return

    try:
        symbols = parse_env_variable("SYMBOLS_TO_SCAN")
        if not symbols:
            print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc c·∫•u h√¨nh SYMBOLS_TO_SCAN t·ª´ .env.")
            return

        print("\n--- B∆∞·ªõc 1: Ch·ªçn th√¥ng tin c∆° b·∫£n ---")
        symbol = select_from_list(symbols, "üëâ Ch·ªçn Symbol: ")
        interval = select_from_list(INTERVALS, "üëâ Ch·ªçn Interval: ")
        tactic = select_from_list(TACTICS, "üëâ Ch·ªçn Tactic: ")
        zone = select_from_list(ZONES, "üëâ Ch·ªçn V√πng (Zone) v√†o l·ªánh: ")
        
        print("\n--- B∆∞·ªõc 2: Nh·∫≠p chi ti·∫øt l·ªánh ---")
        entry_price = float(input(f"üëâ Gi√° v√†o l·ªánh (Entry) cho {symbol}: "))
        tp = float(input("üëâ Gi√° ch·ªët l·ªùi (Take Profit): "))
        sl = float(input("üëâ Gi√° c·∫Øt l·ªó (Stop Loss): "))
        invested_usd = float(input("üëâ S·ªë v·ªën ƒë·∫ßu t∆∞ (USD): "))

        if not all(x > 0 for x in [entry_price, tp, sl, invested_usd]):
            print("‚ùå C√°c gi√° tr·ªã ph·∫£i l√† s·ªë d∆∞∆°ng.")
            return
        if invested_usd > state.get('cash', 0):
            print(f"‚ùå V·ªën ƒë·∫ßu t∆∞ (${invested_usd:,.2f}) l·ªõn h∆°n ti·ªÅn m·∫∑t hi·ªán c√≥ (${state.get('cash', 0):,.2f}).")
            return
            
        # T·∫°o ƒë·ªëi t∆∞·ª£ng trade v·ªõi c·∫•u tr√∫c m·ªõi c·ªßa v8
        new_trade = {
            "trade_id": str(uuid.uuid4()),
            "symbol": symbol,
            "interval": interval,
            "status": "ACTIVE",
            "opened_by_tactic": tactic,
            "trade_type": "LONG",
            "entry_price": entry_price,
            "quantity": invested_usd / entry_price,
            "tp": tp,
            "sl": sl,
            "initial_sl": sl,
            "initial_entry": {"price": entry_price, "invested_usd": invested_usd},
            "total_invested_usd": invested_usd,
            "entry_time": datetime.now(VIETNAM_TZ).isoformat(),
            "entry_score": 9.99, # ƒêi·ªÉm cao ƒë·ªÉ kh√¥ng b·ªã h·ªá th·ªëng t·ª± ƒë·ªông ƒë√≥ng s·ªõm
            "entry_zone": zone,
            "last_zone": zone,
            "binance_market_order_id": None, # Kh√¥ng c√≥ cho paper trade
            "dca_entries": [],
            "profit_taken": False,
            "realized_pnl_usd": 0.0,
            "last_score": 9.99,
            "peak_pnl_percent": 0.0,
            "tp1_hit": False,
            "is_in_warning_zone": False,
            "partial_closed_by_score": False,
            "tactic_used": [tactic, "Manual_Entry"] # Th√™m tactic_used
        }

        state['cash'] -= invested_usd
        state.setdefault('active_trades', []).append(new_trade)
        
        print(f"\n‚úÖ ƒê√É T·∫†O L·ªÜNH M·ªöI CHO {symbol} V·ªöI V·ªêN ${invested_usd:,.2f}")
        save_state(state)

    except ValueError:
        print("‚ùå Gi√° tr·ªã nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.")
    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

def main_menu():
    while True:
        print("\n" + "="*12 + " üìä B·∫¢NG ƒêI·ªÄU KHI·ªÇN (Paper-v8) üìä " + "="*12)
        print("1. Xem t·∫•t c·∫£ l·ªánh ƒëang m·ªü")
        print("2. ƒê√≥ng m·ªôt ho·∫∑c nhi·ªÅu l·ªánh th·ªß c√¥ng")
        print("3. ƒê√≥ng T·∫§T C·∫¢ l·ªánh ƒëang m·ªü")
        print("4. Gia h·∫°n cho l·ªánh (b·ªè qua ki·ªÉm tra 'stale')")
        print("5. M·ªü l·ªánh m·ªõi th·ªß c√¥ng")
        print("0. Tho√°t")
        print("="*58)
        
        choice = input("üëâ Vui l√≤ng ch·ªçn m·ªôt ch·ª©c nƒÉng: ")
        
        if choice == '1': view_open_trades()
        elif choice == '2': close_manual_trades()
        elif choice == '3': close_all_trades()
        elif choice == '4': extend_stale_check()
        elif choice == '5': open_manual_trade()
        elif choice == '0':
            print("üëã T·∫°m bi·ªát!")
            break
        else:
            print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.")

if __name__ == "__main__":
    main_menu()
