# /root/ricealert/backtest/paper_trade.py
# -*- coding: utf-8 -*-
"""
paper_trade.py - Qu·∫£n l√Ω Danh m·ª•c M√¥ ph·ªèng Th√¥ng minh (Paper Trading)
Version: 2.9 (Concise Report & Winrate Added)
Date: 2025-07-06

Description:
H·ªá th·ªëng qu·∫£n l√Ω danh m·ª•c v·ªõi b·ªô n√£o th√≠ch ·ª©ng v√† kh·∫£ nƒÉng nh·∫≠n di·ªán th·ªã tr∆∞·ªùng s√¢u h∆°n.
- B·ªô n√£o ch·∫•m ƒëi·ªÉm (select_best_tactic) gi·ªù ƒë√¢y s·ª≠ d·ª•ng ADX, ATR, F&G, AI Confidence
  V√Ä C√ÅC M·∫™U H√åNH N·∫æN (Doji, Engulfing, Hammer, Shooting Star) c·ªßa BTC ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh l·ªëi ƒë√°nh.
- M·ªói l·ªëi ƒë√°nh c√≥ c·∫•u h√¨nh r·ªßi ro ri√™ng (SL_PCT, RR). T·ª∑ l·ªá RR s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh
  tƒÉng l√™n n·∫øu ƒëi·ªÉm giao d·ªãch (final_score) c·ªßa Trade Advisor cao.
- T√≠ch h·ª£p 2 c∆° ch·∫ø b√°o c√°o:
  1. B√°o c√°o t·ªïng quan ƒë·ªãnh k·ª≥ (8h, 20h).
  2. C·∫£nh b√°o bi·∫øn ƒë·ªông PnL m·ªói 4 gi·ªù n·∫øu c√≥ thay ƒë·ªïi > 0.5%.
- T·ª± ƒë·ªông EXPORT l·ªãch s·ª≠ giao d·ªãch ra file CSV m·ªói phi√™n.
"""
import os
import sys
import json
import uuid
import time
import requests
import pytz
import pandas as pd
import numpy as np

from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple
from dotenv import load_dotenv

# --- T·∫£i v√† Thi·∫øt l·∫≠p ---
load_dotenv()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)
sys.path.append(PROJECT_ROOT) # ƒê·ªÉ import c√°c module t·ª´ PROJECT_ROOT
PAPER_DATA_DIR = os.path.join(BASE_DIR, "paper_data")
os.makedirs(PAPER_DATA_DIR, exist_ok=True)

# --- Import c√°c th√†nh ph·∫ßn c·ªët l√µi ---
from indicator import get_price_data, calculate_indicators
from trade_advisor import get_advisor_decision, FULL_CONFIG as ADVISOR_BASE_CONFIG

# ==============================================================================
# ====================== üìö TH∆Ø VI·ªÜN L·ªêI ƒê√ÅNH (TACTICS LAB) üìö ===================
# ==============================================================================
TACTICS_LAB = {
    "Balanced_Trader": { "NOTES": "M·∫∑c ƒë·ªãnh, c√¢n b·∫±ng 3 y·∫øu t·ªë", "WEIGHTS": {'tech': 0.4, 'context': 0.2, 'ai': 0.4}, "ENTRY_SCORE": 6.5, "SL_PCT": 0.03, "RR": 2.0, "TRADE_PCT": 0.1, "ENABLE_DIP": True, "DIP_RANGE": [3.0, 4.8], "DIP_PCT": 0.05 },
    "AI_Aggressor": { "NOTES": "Khi trend m·∫°nh, tin v√†o AI", "WEIGHTS": {'tech': 0.1, 'context': 0.1, 'ai': 0.8}, "ENTRY_SCORE": 7.0, "SL_PCT": 0.05, "RR": 1.8, "TRADE_PCT": 0.15, "ENABLE_DIP": False },
    "Dip_Hunter": { "NOTES": "Khi s·ª£ h√£i, chuy√™n b·∫Øt ƒë√°y", "WEIGHTS": {'tech': 0.5, 'context': 0.3, 'ai': 0.2}, "ENTRY_SCORE": 7.0, "SL_PCT": 0.035,"RR": 2.5, "TRADE_PCT": 0.07, "ENABLE_DIP": True, "DIP_RANGE": [2.5, 4.5], "DIP_PCT": 0.07 },
    "Cautious_Observer": { "NOTES": "Khi sideways, b·∫£o to√†n v·ªën", "WEIGHTS": {'tech': 0.5, 'context': 0.5, 'ai': 0.0}, "ENTRY_SCORE": 7.5, "SL_PCT": 0.025,"RR": 2.0, "TRADE_PCT": 0.08, "ENABLE_DIP": False },
    "Market_Mirror": { "NOTES": "M√¥ ph·ªèng Alerter, l√†m baseline", "WEIGHTS": {'tech': 0.4, 'context': 0.2, 'ai': 0.4}, "ENTRY_SCORE": 6.0, "SL_PCT": 0.03, "RR": 1.8, "TRADE_PCT": 0.1, "ENABLE_DIP": True, "DIP_RANGE": [3.0, 4.8], "DIP_PCT": 0.05 },
    # Th√™m c√°c l·ªëi ƒë√°nh m·ªõi t·∫°i ƒë√¢y n·∫øu c·∫ßn (Range_Trader, Momentum_Chaser, v.v.)
}

# --- C√†i ƒë·∫∑t chung & B√°o c√°o ---
INITIAL_CAPITAL = 10000.0 # V·ªën ban ƒë·∫ßu c·ªßa danh m·ª•c
SYMBOLS_TO_SCAN = ["ETHUSDT", "AVAXUSDT", "INJUSDT", "LINKUSDT", "SUIUSDT", "FETUSDT", "TAOUSDT"]
INTERVALS_TO_SCAN = ["1h", "4h"] # C√°c interval ƒë·ªÉ qu√©t l·ªánh m·ªõi
ALL_TIME_FRAMES = ["1h", "4h", "1d"] # T·∫•t c·∫£ c√°c interval ƒë·ªÉ t√≠nh ch·ªâ b√°o v√† snapshot th·ªã tr∆∞·ªùng
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')
PSYCHOLOGY_PNL_THRESHOLD_PERCENT = -5.0 # Ng∆∞·ª°ng "s·ª£ h√£i" chung cho to√†n danh m·ª•c

# --- C√†i ƒë·∫∑t cho B√°o c√°o Bi·∫øn ƒë·ªông ---
VOLATILITY_REPORT_COOLDOWN_HOURS = 4
VOLATILITY_REPORT_PNL_THRESHOLD = 0.5 # %

# --- C√†i ƒë·∫∑t cho TP/SL Scaling d·ª±a tr√™n Score ---
TP_SL_SCALING_RULES = {
    "high_score_rr_multiplier": 1.2,    # N·∫øu score >= high_score_threshold, RR = base_RR * 1.2
    "critical_score_rr_multiplier": 1.5, # N·∫øu score >= critical_score_threshold, RR = base_RR * 1.5
    "high_score_threshold": 7.0,         # Ng∆∞·ª°ng score ƒë·ªÉ √°p d·ª•ng high_score_rr_multiplier
    "critical_score_threshold": 8.5      # Ng∆∞·ª°ng score ƒë·ªÉ √°p d·ª•ng critical_score_rr_multiplier
}

# --- ƒê∆∞·ªùng d·∫´n file & Webhook ---
LOG_FILE = os.path.join(PAPER_DATA_DIR, "paper_trade_log.txt")
STATE_FILE = os.path.join(PAPER_DATA_DIR, "paper_trade_state.json")
TIMESTAMP_FILE = os.path.join(PAPER_DATA_DIR, "paper_trade_timestamps.json")
TRADE_HISTORY_CSV_FILE = os.path.join(PAPER_DATA_DIR, "trade_history.csv") # File xu·∫•t l·ªãch s·ª≠ giao d·ªãch

DISCORD_WEBHOOK_URL = os.getenv("DISCORD_PAPER_WEBHOOK")

# ==============================================================================
# QUAN TR·ªåNG: KHAI B√ÅO BI·∫æN TO√ÄN C·ª§C C·∫¶N THI·∫æT
# all_indicators c·∫ßn ƒë∆∞·ª£c truy c·∫≠p v√† c·∫≠p nh·∫≠t b·ªüi nhi·ªÅu h√†m
# ==============================================================================
all_indicators: Dict[str, Any] = {} 

# ==============================================================================
# ================= üõ†Ô∏è C√ÅC H√ÄM TI·ªÜN √çCH & QU·∫¢N L√ù üõ†Ô∏è ======================
# ==============================================================================
def log_message(message: str):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = f"[{timestamp}] {message}"
    print(log_entry)
    with open(LOG_FILE, "a", encoding="utf-8") as f: f.write(log_entry + "\n")
def load_json_file(path: str, default: Dict = {}) -> Dict:
    try:
        with open(path, "r", encoding="utf-8") as f: return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError): return default
def save_json_file(path: str, data: Dict):
    with open(path, "w", encoding="utf-8") as f: json.dump(data, f, indent=4, ensure_ascii=False)
def send_discord_report(content: str):
    if not DISCORD_WEBHOOK_URL: return
    log_message("üöÄ ƒêang g·ª≠i b√°o c√°o text ƒë·∫øn Discord...")
    for i in range(0, len(content), 1950):
        try:
            requests.post(DISCORD_WEBHOOK_URL, json={"content": content[i:i+1950]}, timeout=10).raise_for_status()
            time.sleep(2) # TƒÉng sleep ƒë·ªÉ tr√°nh rate limit
        except requests.exceptions.RequestException as e:
            log_message(f"‚ùå L·ªói khi g·ª≠i b√°o c√°o Discord: {e}")
            break

def export_trade_history_to_csv(trade_history: List[Dict]):
    """Ghi l·ªãch s·ª≠ giao d·ªãch v√†o file CSV."""
    if not trade_history:
        log_message("Kh√¥ng c√≥ l·ªãch s·ª≠ giao d·ªãch ƒë·ªÉ xu·∫•t CSV.")
        return

    df_history = pd.DataFrame(trade_history)
    # S·∫Øp x·∫øp c√°c c·ªôt theo th·ª© t·ª± d·ªÖ ƒë·ªçc
    columns_order = [
        "trade_id", "symbol", "interval", "status", "opened_by_tactic", "trade_type",
        "entry_price", "exit_price", "tp", "sl", "invested_usd", 
        "pnl_usd", "pnl_percent", "entry_time", "exit_time", "entry_score"
    ]
    # Ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt c√≥ trong d·ªØ li·ªáu
    df_history = df_history[[col for col in columns_order if col in df_history.columns]]

    # Ki·ªÉm tra n·∫øu file t·ªìn t·∫°i ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ ghi header hay kh√¥ng
    file_exists = os.path.exists(TRADE_HISTORY_CSV_FILE)
    mode = 'a' if file_exists else 'w'
    header = not file_exists

    try:
        df_history.to_csv(TRADE_HISTORY_CSV_FILE, mode=mode, header=header, index=False, encoding="utf-8")
        log_message(f"‚úÖ ƒê√£ xu·∫•t l·ªãch s·ª≠ giao d·ªãch v√†o {TRADE_HISTORY_CSV_FILE}")
    except Exception as e:
        log_message(f"‚ùå L·ªói khi xu·∫•t l·ªãch s·ª≠ giao d·ªãch ra CSV: {e}")

# ==============================================================================
# ============ üß† B·ªò N√ÉO TH√çCH ·ª®NG: CH·ªåN L·ªêI ƒê√ÅNH üß† =============
# ==============================================================================
def select_best_tactic(market_snapshot: Dict) -> str:
    """
    Ch·∫•m ƒëi·ªÉm v√† ch·ªçn ra l·ªëi ƒë√°nh t·ªët nh·∫•t d·ª±a tr√™n ·∫£nh ch·ª•p th·ªã tr∆∞·ªùng.
    ƒê√¢y l√† b·ªô n√£o c·ªßa h·ªá th·ªëng, thay th·∫ø cho logic if/else ƒë∆°n gi·∫£n.
    """
    tactic_scores = {tactic: 0 for tactic in TACTICS_LAB}

    # --- Tr√≠ch xu·∫•t d·ªØ li·ªáu th·ªã tr∆∞·ªùng t·ª´ Snapshot ---
    fg_index = market_snapshot.get("fear_greed", 50)
    btc_d1_trend = market_snapshot.get("btc_d1_trend", "sideway")
    btc_d1_adx = market_snapshot.get("btc_d1_adx", 20.0)
    btc_d1_atr_pct = market_snapshot.get("btc_d1_atr_percent", 1.5)
    btc_h4_ai_score = market_snapshot.get("btc_h4_ai_score", 5.0)
    btc_d1_doji_type = market_snapshot.get("btc_d1_doji_type", "none")
    btc_d1_candle_pattern = market_snapshot.get("btc_d1_candle_pattern", "none")

    log_message(f"Snapshot Th·ªã tr∆∞·ªùng: F&G={fg_index}, BTC Trend={btc_d1_trend}, ADX={btc_d1_adx:.2f}, ATR%={btc_d1_atr_pct:.2f}, AI Score (BTC)={btc_h4_ai_score:.2f}, Doji={btc_d1_doji_type}, Pattern={btc_d1_candle_pattern}")

    # --- C√°c lu·∫≠t ch·∫•m ƒëi·ªÉm (Rules Engine) ---

    # 1. D·ª±a v√†o S·ª©c m·∫°nh Trend (ADX) v√† H∆∞·ªõng Trend
    if btc_d1_adx > 28 and btc_d1_trend == "uptrend":
        tactic_scores["AI_Aggressor"] += 3
        tactic_scores["Balanced_Trader"] += 1
        tactic_scores["Cautious_Observer"] -= 2
    elif btc_d1_adx > 28 and btc_d1_trend == "downtrend":
        tactic_scores["Dip_Hunter"] += 2 # M·∫°nh d·∫°n b·∫Øt ƒë√°y khi trend gi·∫£m r√µ r·ªát
        tactic_scores["Cautious_Observer"] -= 1 # Tr√°nh qu√° th·∫≠n tr·ªçng khi c√≥ c∆° h·ªôi
        tactic_scores["AI_Aggressor"] -= 2 # Tr√°nh theo AI v√†o trend gi·∫£m
    elif btc_d1_adx < 20: # Sideway, trend y·∫øu
        tactic_scores["Cautious_Observer"] += 3
        tactic_scores["Balanced_Trader"] += 1
        tactic_scores["AI_Aggressor"] -= 2
        tactic_scores["Dip_Hunter"] += 1 # Sideway d·ªÖ c√≥ false break/r√∫t ch√¢n ƒë·ªÉ b·∫Øt dip

    # 2. D·ª±a v√†o T√¢m l√Ω Th·ªã tr∆∞·ªùng (Fear & Greed Index)
    if fg_index > 75: # Tham lam t·ªôt ƒë·ªô
        tactic_scores["AI_Aggressor"] += 2
        tactic_scores["Market_Mirror"] += 1 # N·∫øu th·ªã tr∆∞·ªùng qu√° h∆∞ng ph·∫•n, h√£y theo s√°t
        tactic_scores["Dip_Hunter"] -= 1 # Kh√¥ng b·∫Øt ƒë√°y khi m·ªçi ng∆∞·ªùi ƒëang FOMO
    elif fg_index < 25: # S·ª£ h√£i t·ªôt ƒë·ªô
        tactic_scores["Dip_Hunter"] += 3
        tactic_scores["Cautious_Observer"] += 1
        tactic_scores["AI_Aggressor"] -= 1 # Kh√¥ng theo AI n·∫øu n√≥ c√≥ v·∫ª t√≠ch c·ª±c gi·ªØa l√∫c s·ª£ h√£i

    # 3. D·ª±a v√†o ƒê·ªô bi·∫øn ƒë·ªông (ATR)
    if btc_d1_atr_pct > 4.0: # Bi·∫øn ƒë·ªông r·∫•t m·∫°nh
        tactic_scores["Dip_Hunter"] += 2 # Nhi·ªÅu c∆° h·ªôi cho Dip Hunter
        tactic_scores["AI_Aggressor"] += 1 # N·∫øu AI ƒë√∫ng, l·ª£i nhu·∫≠n l·ªõn
        tactic_scores["Cautious_Observer"] -= 2 # Kh√¥ng ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông
    elif btc_d1_atr_pct < 1.5: # Th·ªã tr∆∞·ªùng ·∫£m ƒë·∫°m
        tactic_scores["Cautious_Observer"] += 2
        tactic_scores["AI_Aggressor"] -= 1

    # 4. D·ª±a v√†o S·ª± t·ª± tin c·ªßa AI (Insight t·ª´ backtest) - Y·∫æU T·ªê QUAN TR·ªåNG
    if btc_h4_ai_score > 7.5:
        tactic_scores["AI_Aggressor"] += 4 # Th∆∞·ªüng l·ªõn khi AI r·∫•t t·ª± tin
        tactic_scores["Balanced_Trader"] += 1
    elif btc_h4_ai_score < 4.0:
        tactic_scores["AI_Aggressor"] -= 2
        tactic_scores["Cautious_Observer"] += 1
        tactic_scores["Dip_Hunter"] += 0.5 # N·∫øu AI kh√¥ng t·ª± tin, th·ªã tr∆∞·ªùng c√≥ th·ªÉ ƒë·∫£o chi·ªÅu b·∫•t ng·ªù

    # 5. D·ª±a v√†o M·∫´u h√¨nh N·∫øn (BTC 1D)
    if btc_d1_doji_type == "dragonfly" and btc_d1_trend == "downtrend":
        tactic_scores["Dip_Hunter"] += 2.5 # D·∫•u hi·ªáu ƒë·∫£o chi·ªÅu ƒë√°y m·∫°nh m·∫Ω
        tactic_scores["Balanced_Trader"] += 1
    elif btc_d1_doji_type == "gravestone" and btc_d1_trend == "uptrend":
        tactic_scores["Cautious_Observer"] += 2 # D·∫•u hi·ªáu ƒë·∫£o chi·ªÅu ƒë·ªânh m·∫°nh m·∫Ω
        tactic_scores["AI_Aggressor"] -= 1
    elif btc_d1_candle_pattern == "bullish_engulfing" and btc_d1_trend == "downtrend":
        tactic_scores["Dip_Hunter"] += 2
        tactic_scores["Balanced_Trader"] += 1
    elif btc_d1_candle_pattern == "bearish_engulfing" and btc_d1_trend == "uptrend":
        tactic_scores["Cautious_Observer"] += 1.5
        tactic_scores["AI_Aggressor"] -= 1
    elif btc_d1_doji_type == "common" or btc_d1_doji_type == "long_legged": # Th·ªã tr∆∞·ªùng l∆∞·ª°ng l·ª±
        tactic_scores["Cautious_Observer"] += 1
        tactic_scores["Balanced_Trader"] += 0.5


    # Lu√¥n cho Balanced_Trader m·ªôt ƒëi·ªÉm n·ªÅn ƒë·ªÉ l√†m l·ª±a ch·ªçn an to√†n khi kh√¥ng c√≥ l·ª±a ch·ªçn r√µ r√†ng
    tactic_scores["Balanced_Trader"] += 1

    log_message(f"Ch·∫•m ƒëi·ªÉm l·ªëi ƒë√°nh: {tactic_scores}")

    # Ch·ªçn l·ªëi ƒë√°nh c√≥ ƒëi·ªÉm cao nh·∫•t
    best_tactic = max(tactic_scores, key=tactic_scores.get)
    log_message(f"üèÜ L·ªëi ƒë√°nh chi·∫øn th·∫Øng: [{best_tactic}] v·ªõi s·ªë ƒëi·ªÉm {tactic_scores[best_tactic]}")

    return best_tactic

def apply_portfolio_psychology(tactic_config: Dict, portfolio_state: Dict) -> Dict:
    """ƒêi·ªÅu ch·ªânh th√¥ng s·ªë c·ªßa l·ªëi ƒë√°nh d·ª±a tr√™n PnL t·ªïng."""
    # all_indicators l√† global
    total_equity = calculate_total_equity(portfolio_state) 

    # Tr√°nh chia cho 0 n·∫øu INITIAL_CAPITAL l√† 0
    pnl_percent = (total_equity - INITIAL_CAPITAL) / INITIAL_CAPITAL * 100 if INITIAL_CAPITAL > 0 else 0

    effective_config = tactic_config.copy()

    if pnl_percent < PSYCHOLOGY_PNL_THRESHOLD_PERCENT:
        effective_config["TRADE_PCT"] /= 2  # Gi·∫£m r·ªßi ro ƒëi m·ªôt n·ª≠a
        effective_config["ENTRY_SCORE"] += 0.5 # K√©n ch·ªçn h∆°n
        log_message(f"üò® T√¢m l√Ω S·ª£ h√£i k√≠ch ho·∫°t! (PnL: {pnl_percent:.2f}%) -> Gi·∫£m r·ªßi ro, tƒÉng ng∆∞·ª°ng ƒëi·ªÉm.")

    return effective_config

def calculate_total_equity(state: Dict) -> float:
    """T√≠nh t·ªïng v·ªën (ti·ªÅn m·∫∑t + gi√° tr·ªã c√°c l·ªánh ƒëang m·ªü).
    S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c all_indicators ƒë·ªÉ l·∫•y gi√° live."""
    current_cash = state.get('cash', INITIAL_CAPITAL) # L·∫•y ti·ªÅn m·∫∑t kh·∫£ d·ª•ng
    total_open_trade_value = 0.0

    for trade in state.get('active_trades', []):
        # S·ª≠ d·ª•ng .get() v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh ƒë·ªÉ tr√°nh KeyError cho c√°c l·ªánh c≈©
        invested_amount = trade.get('invested_usd', trade.get('amount_usd', 0.0)) # Fallback cho c√°c tr·∫°ng th√°i c≈©
        
        current_data = all_indicators.get(trade["symbol"], {}).get(trade["interval"])
        if current_data and current_data.get('price', 0) != 0:
            current_price = current_data['price']
            # Gi√° tr·ªã hi·ªán t·∫°i c·ªßa l·ªánh = S·ªë ti·ªÅn ƒë·∫ßu t∆∞ ban ƒë·∫ßu * (Gi√° hi·ªán t·∫°i / Gi√° v√†o l·ªánh)
            # ƒê·∫£m b·∫£o entry_price kh√¥ng ph·∫£i 0 ƒë·ªÉ tr√°nh chia cho 0
            if trade.get('entry_price', 0) != 0:
                trade_current_value = invested_amount * (current_price / trade['entry_price'])
            else:
                trade_current_value = invested_amount # N·∫øu entry_price l√† 0, coi gi√° tr·ªã b·∫±ng s·ªë ti·ªÅn ƒë·∫ßu t∆∞
        else:
            # N·∫øu kh√¥ng c√≥ gi√° live cho symbol/interval n√†y, coi gi√° tr·ªã hi·ªán t·∫°i b·∫±ng s·ªë ti·ªÅn ƒë√£ ƒë·∫ßu t∆∞
            total_open_trade_value += invested_amount
            continue # Chuy·ªÉn sang l·ªánh ti·∫øp theo n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu live

        total_open_trade_value += trade_current_value
            
    return current_cash + total_open_trade_value

def calculate_winrate(trade_history: List[Dict]) -> Tuple[float, int, int]:
    """T√≠nh to√°n t·ª∑ l·ªá th·∫Øng (winrate) v√† s·ªë l·ªánh th·∫Øng/thua."""
    total_closed_trades = len(trade_history)
    winning_trades = 0
    
    if total_closed_trades == 0:
        return 0.0, 0, 0 # Winrate, s·ªë l·ªánh th·∫Øng, s·ªë l·ªánh thua

    for trade in trade_history:
        # ƒê·∫£m b·∫£o ch·ªâ t√≠nh c√°c l·ªánh ƒë√£ ƒë√≥ng v·ªõi PnL ƒë√£ th·ª±c hi·ªán
        if trade.get('status') in ["TP_HIT", "SL_HIT"] and trade.get('pnl_usd', 0) > 0:
            winning_trades += 1
            
    losing_trades = total_closed_trades - winning_trades
    winrate = (winning_trades / total_closed_trades) * 100
    return round(winrate, 2), winning_trades, losing_trades


def run_paper_trade_session():
    # S·ª≠ d·ª•ng bi·∫øn to√†n c·ª•c all_indicators
    global all_indicators 

    # 1. T·∫£i tr·∫°ng th√°i danh m·ª•c & L·∫•y d·ªØ li·ªáu m·ªõi
    portfolio_state = load_json_file(STATE_FILE)
    if not portfolio_state:
        # KH·ªûI T·∫†O V·ªêN BAN ƒê·∫¶U L√Ä TI·ªÄN M·∫∂T
        portfolio_state = {"cash": INITIAL_CAPITAL, "active_trades": [], "trade_history": []} 
        # Kh·ªüi t·∫°o capital_at_last_volatility_report v·ªõi INITIAL_CAPITAL
        timestamps = load_json_file(TIMESTAMP_FILE, {})
        timestamps["capital_at_last_volatility_report"] = INITIAL_CAPITAL
        save_json_file(TIMESTAMP_FILE, timestamps)
    else:
        # NORMALIZE portfolio_state: ƒê·∫£m b·∫£o 'cash' v√† 'invested_usd' t·ªìn t·∫°i v√† ƒë√∫ng ƒë·ªãnh d·∫°ng
        # T√≠nh to√°n l·∫°i cash d·ª±a tr√™n l·ªãch s·ª≠ ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c nh·∫•t
        if 'cash' not in portfolio_state:
            portfolio_state['cash'] = INITIAL_CAPITAL
            log_message("‚ö†Ô∏è ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i portfolio_state c≈© ƒë·ªÉ bao g·ªìm tr∆∞·ªùng 'cash'.")
        
        # Chu·∫©n h√≥a active_trades v√† trade_history:
        # ƒê·∫£m b·∫£o 'invested_usd' t·ªìn t·∫°i v√† lo·∫°i b·ªè 'amount_usd'
        for trade_list_key in ['active_trades', 'trade_history']:
            for trade in portfolio_state.get(trade_list_key, []):
                if 'invested_usd' not in trade:
                    trade['invested_usd'] = trade.pop('amount_usd', 0.0) # Chuy·ªÉn ƒë·ªïi ho·∫∑c g√°n m·∫∑c ƒë·ªãnh
                    log_message(f"‚ö†Ô∏è ƒê√£ c·∫≠p nh·∫≠t l·ªánh c≈© {trade.get('trade_id', '')} trong '{trade_list_key}' ƒë·ªÉ s·ª≠ d·ª•ng 'invested_usd'.")
                # ƒê·∫£m b·∫£o invested_usd l√† float
                trade['invested_usd'] = float(trade['invested_usd']) 
                # ƒê·∫£m b·∫£o entry_price l√† float, tr√°nh l·ªói chia cho 0 sau n√†y
                trade['entry_price'] = float(trade.get('entry_price', 0.0))

        # Sau khi chu·∫©n h√≥a, t√≠nh l·∫°i cash ƒë·ªÉ ph·∫£n √°nh ƒë√∫ng s·ªë ti·ªÅn m·∫∑t hi·ªán c√≥
        # (INITIAL_CAPITAL + t·ªïng PnL ƒë√£ ƒë√≥ng - t·ªïng ti·ªÅn ƒëang ƒë·∫ßu t∆∞ v√†o l·ªánh m·ªü)
        realized_pnl_sum = sum(t.get('pnl_usd', 0) for t in portfolio_state.get('trade_history', []) if t.get('status') in ["TP_HIT", "SL_HIT"])
        invested_in_active_trades = sum(t.get('invested_usd', 0) for t in portfolio_state.get('active_trades', []))
        portfolio_state['cash'] = INITIAL_CAPITAL + realized_pnl_sum - invested_in_active_trades
        log_message(f"‚úÖ ƒê√£ t√≠nh to√°n l·∫°i ti·ªÅn m·∫∑t kh·∫£ d·ª•ng: ${portfolio_state['cash']:,.2f}")


    # ƒê·∫∂T L·∫†I all_indicators CHO M·ªñI PHI√äN CH·∫†Y
    all_indicators.clear() # ƒê·∫£m b·∫£o all_indicators tr·ªëng tr∆∞·ªõc khi populate l·∫°i

    all_symbols_to_fetch = SYMBOLS_TO_SCAN + ["BTCUSDT"]
    
    for symbol in all_symbols_to_fetch:
        all_indicators[symbol] = {}
        for interval in ALL_TIME_FRAMES:
            try:
                df = get_price_data(symbol, interval, limit=200)
                calculated_data = calculate_indicators(df, symbol, interval)
                all_indicators[symbol][interval] = calculated_data
                if calculated_data.get("reason"):
                    log_message(f"‚ö†Ô∏è {calculated_data['reason']} cho {symbol}-{interval}. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh.")
            except Exception as e:
                log_message(f"‚ùå L·ªói khi t√≠nh ch·ªâ b√°o cho {symbol}-{interval}: {e}")
                all_indicators[symbol][interval] = {"price": 0, "closed_candle_price": 0, "rsi_14": 50.0, "trend": "sideway", "adx": 20.0, "atr_percent": 1.5, "doji_type": "none", "candle_pattern": "none"}

    log_message("\nƒêang l√†m gi√†u d·ªØ li·ªáu ch·ªâ b√°o v·ªõi RSI ƒëa khung th·ªùi gian...")
    for sym_enrich in all_symbols_to_fetch:
        rsi_h1 = all_indicators.get(sym_enrich, {}).get("1h", {}).get("rsi_14", 50)
        rsi_h4 = all_indicators.get(sym_enrich, {}).get("4h", {}).get("rsi_14", 50)
        rsi_d1 = all_indicators.get(sym_enrich, {}).get("1d", {}).get("rsi_14", 50)
        for itv_enrich in ALL_TIME_FRAMES:
            if all_indicators.get(sym_enrich, {}).get(itv_enrich):
                all_indicators[sym_enrich][itv_enrich]['rsi_1h'] = rsi_h1
                all_indicators[sym_enrich][itv_enrich]['rsi_4h'] = rsi_h4
                all_indicators[sym_enrich][itv_enrich]['rsi_1d'] = rsi_d1
    log_message("‚úÖ Ho√†n th√†nh l√†m gi√†u d·ªØ li·ªáu ch·ªâ b√°o.")


    # 2. ƒê√≥ng c√°c l·ªánh c≈©
    trades_to_remove = []
    closed_this_session = False
    for trade in portfolio_state["active_trades"]:
        current_data = all_indicators.get(trade["symbol"], {}).get(trade["interval"])
        if not current_data or current_data.get('price', 0) == 0:
            log_message(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu hi·ªán t·∫°i (live price) cho l·ªánh {trade['symbol']}-{trade['interval']}. B·ªè qua ki·ªÉm tra ƒë√≥ng l·ªánh.")
            continue

        current_price = current_data['price'] # S·ª≠ d·ª•ng live price ƒë·ªÉ ki·ªÉm tra SL/TP
        status, exit_price = (None, None)

        if current_price <= trade["sl"]: status, exit_price = "SL_HIT", trade["sl"]
        elif current_price >= trade["tp"]: status, exit_price = "TP_HIT", trade["tp"]

        if status:
            pnl_percent = (exit_price - trade["entry_price"]) / trade["entry_price"]
            pnl_usd = trade["invested_usd"] * pnl_percent # T√≠nh PnL d·ª±a tr√™n invested_usd
            portfolio_state["cash"] += (trade["invested_usd"] + pnl_usd) # Ho√†n tr·∫£ ti·ªÅn ƒë·∫ßu t∆∞ + PnL v√†o cash
            trade.update({"status": status, "exit_price": exit_price, "exit_time": datetime.now(VIETNAM_TZ).isoformat(), "pnl_percent": pnl_percent * 100, "pnl_usd": pnl_usd})
            portfolio_state["trade_history"].append(trade)
            trades_to_remove.append(trade)
            closed_this_session = True
            log_message(f"{'‚úÖ' if pnl_usd >= 0 else '‚ùå'} L·ªánh ƒê√≥ng: {trade['symbol']} ({trade['opened_by_tactic']}) | {status} | PnL: ${pnl_usd:,.2f}")

    if trades_to_remove:
        portfolio_state["active_trades"] = [t for t in portfolio_state["active_trades"] if t not in trades_to_remove]
        portfolio_state["trade_history"] = sorted(portfolio_state["trade_history"], key=lambda x: x.get('exit_time', ''), reverse=True)[:1000]


    # 3. T∆∞ duy v√† H√†nh ƒë·ªông v·ªõi B·ªô n√£o m·ªõi
    # 3.1. T·∫°o ·∫£nh ch·ª•p th·ªã tr∆∞·ªùng (Market Snapshot)
    market_context_path = os.path.join(PROJECT_ROOT, "ricenews/lognew/market_context.json")
    market_context = load_json_file(market_context_path)

    btc_d1_indicators = all_indicators.get("BTCUSDT", {}).get("1d", {})
    btc_h4_indicators = all_indicators.get("BTCUSDT", {}).get("4h", {})
    
    btc_h4_advisor_input = btc_h4_indicators.copy()
    btc_h4_advisor_input['price'] = btc_h4_indicators.get('closed_candle_price', btc_h4_indicators.get('price', 0))

    btc_h4_advisor_decision = {}
    if btc_h4_advisor_input.get('price', 0) != 0 and not btc_h4_indicators.get('reason'):
        btc_h4_advisor_decision = get_advisor_decision("BTCUSDT", "4h", btc_h4_advisor_input, ADVISOR_BASE_CONFIG)

    market_snapshot = {
        "fear_greed": market_context.get("fear_greed", 50),
        "btc_d1_trend": btc_d1_indicators.get("trend", "sideway"),
        "btc_d1_adx": btc_d1_indicators.get("adx", 20.0),
        "btc_d1_atr_percent": btc_d1_indicators.get("atr_percent", 1.5),
        "btc_h4_ai_score": btc_h4_advisor_decision.get("final_score", 5.0),
        "btc_d1_doji_type": btc_d1_indicators.get("doji_type", "none"),
        "btc_d1_candle_pattern": btc_d1_indicators.get("candle_pattern", "none"),
    }

    # 3.2. Ch·ªçn l·ªëi ƒë√°nh t·ªët nh·∫•t
    selected_tactic_name = select_best_tactic(market_snapshot)
    base_tactic_config = TACTICS_LAB[selected_tactic_name]

    # 3.3. √Åp d·ª•ng t√¢m l√Ω l√™n l·ªëi ƒë√°nh ƒë√£ ch·ªçn
    # all_indicators l√† global n√™n kh√¥ng c·∫ßn truy·ªÅn v√†o apply_portfolio_psychology
    effective_tactic = apply_portfolio_psychology(base_tactic_config, portfolio_state)

    # 4. Qu√©t l·ªánh m·ªõi v·ªõi l·ªëi ƒë√°nh ƒë√£ ch·ªçn
    opened_this_session = False
    for symbol in SYMBOLS_TO_SCAN:
        # B·ªè qua n·∫øu ƒë√£ c√≥ l·ªánh m·ªü v·ªõi symbol n√†y
        if any(t['symbol'] == symbol for t in portfolio_state['active_trades']): continue

        for interval in INTERVALS_TO_SCAN: # Ch·ªâ qu√©t c√°c interval ƒë√£ c·∫•u h√¨nh ƒë·ªÉ m·ªü l·ªánh
            current_symbol_indicators = all_indicators.get(symbol, {}).get(interval)

            if not current_symbol_indicators or current_symbol_indicators.get('reason'):
                log_message(f"‚ö†Ô∏è B·ªè qua {symbol}-{interval}. D·ªØ li·ªáu ch·ªâ b√°o kh√¥ng ƒë·ªß ho·∫∑c kh√¥ng h·ª£p l·ªá: {current_symbol_indicators.get('reason', 'Kh√¥ng r√µ l√Ω do')}.")
                continue

            indicators_for_advisor = current_symbol_indicators.copy()
            indicators_for_advisor['price'] = current_symbol_indicators.get('closed_candle_price', current_symbol_indicators.get('price', 0))
            if indicators_for_advisor['price'] == 0: # Gi√° n·∫øn ƒë√≥ng kh√¥ng h·ª£p l·ªá
                log_message(f"‚ö†Ô∏è B·ªè qua {symbol}-{interval}. Gi√° n·∫øn ƒë√≥ng ƒë·ªÉ t√≠nh advisor score l√† 0.")
                continue
            
            decision = get_advisor_decision(
                symbol, interval, indicators_for_advisor, ADVISOR_BASE_CONFIG,
                weights_override=effective_tactic["WEIGHTS"]
            )
            final_score = decision.get("final_score", 0.0)

            trade_type, amount_percent = None, 0.0
            if final_score >= effective_tactic["ENTRY_SCORE"]:
                trade_type = "TREND_FOLLOW"
                amount_percent = effective_tactic["TRADE_PCT"]
            elif effective_tactic.get("ENABLE_DIP", False):
                score_min, score_max = effective_tactic["DIP_RANGE"]
                if score_min <= final_score < score_max:
                    if (indicators_for_advisor.get('rsi_divergence') == 'bullish' or
                        indicators_for_advisor.get('doji_type') == 'dragonfly' or
                        indicators_for_advisor.get('candle_pattern') == 'hammer' or
                        indicators_for_advisor.get('candle_pattern') == 'bullish_engulfing'):
                        trade_type = "DIP_BUY"
                        amount_percent = effective_tactic["DIP_PCT"]

            if trade_type:
                entry_price = current_symbol_indicators['price']
                invested_usd = portfolio_state['cash'] * amount_percent # S·ªê TI·ªÄN ƒê·∫¶U T∆Ø
                
                if invested_usd > portfolio_state['cash'] or invested_usd < 10: # ƒê·∫£m b·∫£o kh√¥ng qu√° v·ªën v√† ƒë·ªß l·ªõn
                    log_message(f"‚ö†Ô∏è S·ªë ti·ªÅn giao d·ªãch qu√° nh·ªè ho·∫∑c v∆∞·ª£t v·ªën (${invested_usd:,.2f}). B·ªè qua l·ªánh cho {symbol}.")
                    continue
                if entry_price == 0: # ƒê·∫£m b·∫£o gi√° entry kh√¥ng ph·∫£i 0
                    log_message(f"‚ö†Ô∏è Gi√° v√†o l·ªánh cho {symbol} l√† 0. B·ªè qua l·ªánh.")
                    continue

                # === LOGIC T√çNH TP/SL D·ª∞A TR√äN FINAL_SCORE & TACTIC'S BASE RR ===
                base_rr = effective_tactic["RR"]
                calculated_rr = base_rr

                if final_score >= TP_SL_SCALING_RULES["critical_score_threshold"]:
                    calculated_rr = base_rr * TP_SL_SCALING_RULES["critical_score_rr_multiplier"]
                    log_message(f"üìà Critical Score RR k√≠ch ho·∫°t! ({final_score:.2f} >= {TP_SL_SCALING_RULES['critical_score_threshold']}) -> RR tƒÉng l√™n {calculated_rr:.2f}")
                elif final_score >= TP_SL_SCALING_RULES["high_score_threshold"]:
                    calculated_rr = base_rr * TP_SL_SCALING_RULES["high_score_rr_multiplier"]
                    log_message(f"üìä High Score RR k√≠ch ho·∫°t! ({final_score:.2f} >= {TP_SL_SCALING_RULES['high_score_threshold']}) -> RR tƒÉng l√™n {calculated_rr:.2f}")

                sl_price = entry_price * (1 - effective_tactic["SL_PCT"])
                tp_price = entry_price * (1 + effective_tactic["SL_PCT"] * calculated_rr)

                tp_price = round(tp_price, 8)
                sl_price = round(sl_price, 8)

                if tp_price <= entry_price or sl_price >= entry_price:
                    log_message(f"‚ö†Ô∏è TP ({tp_price}) ho·∫∑c SL ({sl_price}) kh√¥ng h·ª£p l·ªá so v·ªõi Entry ({entry_price}). B·ªè qua l·ªánh cho {symbol}.")
                    continue
                # ======================================================

                new_trade = {
                    "trade_id": str(uuid.uuid4()), "symbol": symbol, "interval": interval,
                    "status": "ACTIVE", "opened_by_tactic": selected_tactic_name,
                    "trade_type": trade_type, "entry_price": entry_price,
                    "tp": tp_price, "sl": sl_price, "invested_usd": invested_usd, 
                    "entry_time": datetime.now(VIETNAM_TZ).isoformat(), "entry_score": final_score
                }
                portfolio_state["cash"] -= invested_usd # TR·ª™ TI·ªÄN M·∫∂T KHI M·ªû L·ªÜNH
                portfolio_state["active_trades"].append(new_trade)
                opened_this_session = True

                log_icon = "üî•" if trade_type == "TREND_FOLLOW" else "üí°"
                log_message(f"{log_icon} L·ªánh M·ªõi ({selected_tactic_name}/{trade_type}): {symbol} | Score: {final_score:.2f} | Entry: {entry_price:.4f} | TP: {tp_price:.4f} | SL: {sl_price:.4f} | Invested: ${invested_usd:,.2f}")
                break # Ch·ªâ m·ªü 1 l·ªánh m·ªõi m·ªói phi√™n qu√©t
        if opened_this_session: break # Ch·ªâ m·ªü 1 l·ªánh m·ªõi m·ªói phi√™n qu√©t

    # 5. L∆∞u tr·∫°ng th√°i, ghi log v·ªën v√† xu·∫•t l·ªãch s·ª≠ giao d·ªãch
    # T√çNH TO√ÅN TOTAL_EQUITY CHO LOG V√Ä BI·ªÇU ƒê·ªí
    current_total_equity = calculate_total_equity(portfolio_state)
    log_message(f"üí∞ Ti·ªÅn M·∫∑t Kh·∫£ D·ª•ng: ${portfolio_state['cash']:,.2f} | T·ªïng T√†i S·∫£n: ${current_total_equity:,.2f} | L·ªánh M·ªü: {len(portfolio_state['active_trades'])}")
    
    save_json_file(STATE_FILE, portfolio_state)
    export_trade_history_to_csv(portfolio_state['trade_history']) # Xu·∫•t l·ªãch s·ª≠ giao d·ªãch

    # 6. Logic g·ª≠i b√°o c√°o (C·∫£ 2 lo·∫°i)
    # 6.1 B√°o c√°o t·ªïng quan h√†ng ng√†y (8h, 20h)
    if should_send_daily_summary():
        report_content = build_daily_summary_report(portfolio_state) 
        send_discord_report(report_content)

        timestamps = load_json_file(TIMESTAMP_FILE, {})
        timestamps["last_daily_report_time_slot"] = datetime.now(VIETNAM_TZ).strftime("%Y-%m-%d-%H")
        save_json_file(TIMESTAMP_FILE, timestamps)

    # 6.2 C·∫£nh b√°o bi·∫øn ƒë·ªông (M·ªói 4h n·∫øu PnL thay ƒë·ªïi > 0.5%)
    should_send, pnl_change_pct = should_send_volatility_report(portfolio_state)
    if should_send:
        report_content = build_volatility_report(portfolio_state, pnl_change_pct) 
        send_discord_report(report_content)
        timestamps = load_json_file(TIMESTAMP_FILE, {})
        timestamps["last_volatility_report_sent"] = datetime.now().timestamp()
        # C·∫≠p nh·∫≠t capital_at_last_volatility_report b·∫±ng total_equity
        timestamps["capital_at_last_volatility_report"] = current_total_equity 
        save_json_file(TIMESTAMP_FILE, timestamps)

# ==============================================================================
# ======================== B√ÅO C√ÅO & ƒêI·ªÄU KI·ªÜN G·ª¨I =========================
# ==============================================================================

def should_send_daily_summary() -> bool:
    """Ki·ªÉm tra xem c√≥ n√™n g·ª≠i b√°o c√°o t√≥m t·∫Øt h√†ng ng√†y kh√¥ng."""
    now_vn = datetime.now(VIETNAM_TZ)
    timestamps = load_json_file(TIMESTAMP_FILE, {"last_daily_report_time_slot": ""}) # L∆∞u d·∫°ng "YYYY-MM-DD-HH"

    current_time_slot = now_vn.strftime("%Y-%m-%d-%H")
    last_sent_time_slot = timestamps.get("last_daily_report_time_slot", "")

    # Ch·ªâ g·ª≠i n·∫øu hi·ªán t·∫°i l√† 8h ho·∫∑c 20h v√† ch∆∞a g·ª≠i cho m·ªëc th·ªùi gian n√†y h√¥m nay
    if now_vn.hour == 8 and current_time_slot != last_sent_time_slot:
        return True
    elif now_vn.hour == 20 and current_time_slot != last_sent_time_slot:
        return True
    return False

def build_daily_summary_report(state: Dict) -> str: 
    """X√¢y d·ª±ng b√°o c√°o t√≥m t·∫Øt h√†ng ng√†y cho danh m·ª•c."""
    now_vn = datetime.now(VIETNAM_TZ)
    if not state: return "Ch∆∞a c√≥ d·ªØ li·ªáu danh m·ª•c ƒë·ªÉ b√°o c√°o."

    # T√çNH TOTAL_EQUITY V√Ä PNL T·ª™ ƒê√ì
    current_total_equity = calculate_total_equity(state)
    pnl_usd = current_total_equity - INITIAL_CAPITAL
    pnl_percent = (pnl_usd / INITIAL_CAPITAL) * 100 if INITIAL_CAPITAL > 0 else 0
    pnl_icon = "üìà" if pnl_usd >= 0 else "üìâ"

    # T√≠nh Winrate
    winrate_pct, wins, losses = calculate_winrate(state.get('trade_history', []))
    winrate_str = f"Winrate: `{winrate_pct:.2f}%` ({wins}W/{losses}L)"

    report_lines = [f"üìä **B√°o C√°o T·ªïng Quan - {now_vn.strftime('%H:%M %d-%m-%Y')}** üìä\n"]
    report_lines.append(f"--- **`T·ªïng Quan`** ---")
    # ƒê·ªäNH D·∫†NG PNL M·ªöI
    report_lines.append(f"{pnl_icon} **Total Money:** `${current_total_equity:,.2f}` (`{pnl_percent:+.2f}%`) | **PnL:** `${pnl_usd:,.2f}`")
    report_lines.append(f"Base Capital: `${INITIAL_CAPITAL:,.2f}` | {winrate_str}") # Th√™m Winrate
    report_lines.append(f"üí∞ **Ti·ªÅn M·∫∑t Kh·∫£ D·ª•ng:** `${state.get('cash', INITIAL_CAPITAL):,.2f}`")


    active_trades = state.get('active_trades', [])
    report_lines.append(f"  **L·ªánh ƒëang m·ªü ({len(active_trades)}):**")
    if active_trades:
        for trade in active_trades:
            entry_time = datetime.fromisoformat(trade['entry_time']).astimezone(VIETNAM_TZ)
            held_hours = (datetime.now(VIETNAM_TZ) - entry_time).total_seconds() / 3600

            current_price_info = all_indicators.get(trade['symbol'], {}).get(trade['interval'])
            current_live_price = current_price_info.get('price') if current_price_info else None

            current_pnl_str = "N/A"
            invested_amount = trade.get('invested_usd', 0.0) # ƒê·∫£m b·∫£o d√πng invested_usd
            if current_live_price and trade['entry_price'] > 0:
                current_pnl_pct = (current_live_price - trade['entry_price']) / trade['entry_price'] * 100
                current_pnl_usd = invested_amount * (current_live_price - trade['entry_price']) / trade['entry_price']
                current_pnl_str = f"PnL: `${current_pnl_usd:,.2f}` (`{current_pnl_pct:+.2f}%`)"

            report_lines.append(f"  - `{trade['symbol']}` ({trade['trade_type']}) | Tactic: `{trade['opened_by_tactic']}` | Gi·ªØ: `{held_hours:.1f}h` | Invested: `${invested_amount:,.2f}` | {current_pnl_str}")
    else:
        report_lines.append("  -> `Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü.`")
    
    # B·ªî SUNG: Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng symbols trong ph·∫ßn b√°o c√°o t√≠n hi·ªáu
    report_lines.append(f"\n--- **`T√≠n Hi·ªáu Th·ªã Tr∆∞·ªùng (Top {5} Symbols)`** ---")
    
    symbols_for_signal_report = list(set(trade['symbol'] for trade in active_trades)) # ∆Øu ti√™n c√°c symbol ƒëang c√≥ l·ªánh m·ªü
    
    # Th√™m c√°c symbol kh√°c t·ª´ SYMBOLS_TO_SCAN cho ƒë·∫øn khi ƒë·ªß 5 ho·∫∑c h·∫øt danh s√°ch
    for sym in SYMBOLS_TO_SCAN:
        if sym not in symbols_for_signal_report and len(symbols_for_signal_report) < 5:
            symbols_for_signal_report.append(sym)
        if len(symbols_for_signal_report) >= 5:
            break # ƒê·ªß 5 symbols

    if not symbols_for_signal_report:
        report_lines.append("`Kh√¥ng c√≥ t√≠n hi·ªáu ƒë·ªÉ b√°o c√°o.`")
    else:
        for symbol in symbols_for_signal_report:
            symbol_data = all_indicators.get(symbol, {})
            if not symbol_data: continue

            report_lines.append(f"\n**--- {symbol.upper()} ---**")

            for interval in ALL_TIME_FRAMES: # Hi·ªÉn th·ªã t·∫•t c·∫£ intervals cho c√°c symbol ƒë∆∞·ª£c ch·ªçn
                ind = symbol_data.get(interval, {})
                if not ind: continue

                price = ind.get('price', 0)
                signal_details = check_signal(ind)
                level = signal_details.get("level", "HOLD")
                tag = signal_details.get("tag", "")
                score = ind.get("advisor_score")

                level_icons = {"CRITICAL": "üö®", "WARNING": "‚ö†Ô∏è", "ALERT": "üì£", "WATCHLIST": "üëÄ", "HOLD": "‚è∏Ô∏è"}
                icon = level_icons.get(level, "‚ÑπÔ∏è")

                id_str = f"**{now_vn.strftime('%Y-%m-%d %H:%M:%S')}  {symbol.upper()}  {interval}**"
                price_str = f"{price:.4f}"
                signal_str = f"**{level}**" + (f" ({tag})" if tag else "")
                score_str = f"**{score:.1f}**" if score is not None else "N/A"

                line = f"{icon} {id_str}\n G-Signal: {signal_str} | Gi√°: *{price_str}* | Score: {score_str}"
                report_lines.append(line)

    return "\n".join(report_lines)

def should_send_volatility_report(current_state: Dict) -> Tuple[bool, float]:
    """Ki·ªÉm tra xem c√≥ n√™n g·ª≠i c·∫£nh b√°o bi·∫øn ƒë·ªông kh√¥ng."""
    timestamps = load_json_file(TIMESTAMP_FILE, {})
    last_report_ts = timestamps.get("last_volatility_report_sent", 0)

    # Cooldown 4 ti·∫øng
    if (datetime.now().timestamp() - last_report_ts) < VOLATILITY_REPORT_COOLDOWN_HOURS * 3600:
        return False, 0

    last_check_capital = timestamps.get("capital_at_last_volatility_report", INITIAL_CAPITAL)
    # L·∫•y total_equity hi·ªán t·∫°i ƒë·ªÉ so s√°nh
    current_total_equity = calculate_total_equity(current_state) # all_indicators l√† global

    # N·∫øu l·∫ßn ƒë·∫ßu ch·∫°y ho·∫∑c v·ªën kh√¥ng ƒë·ªß ƒë·ªÉ t√≠nh %
    if last_check_capital == 0 or INITIAL_CAPITAL == 0: # INITIAL_CAPITAL > 0 lu√¥n
        # ƒê·∫∑t l·∫°i gi√° tr·ªã ban ƒë·∫ßu n·∫øu ch∆∞a c√≥ ƒë·ªÉ b·∫Øt ƒë·∫ßu theo d√µi
        timestamps["capital_at_last_volatility_report"] = current_total_equity # Ghi total_equity
        save_json_file(TIMESTAMP_FILE, timestamps)
        return False, 0

    pnl_change_percent = ((current_total_equity - last_check_capital) / last_check_capital) * 100

    # G·ª≠i n·∫øu c√≥ bi·∫øn ƒë·ªông v·ªën ƒë√°ng k·ªÉ
    if abs(pnl_change_percent) >= VOLATILITY_REPORT_PNL_THRESHOLD:
        return True, pnl_change_percent

    return False, 0

def build_volatility_report(state: Dict, pnl_change: float) -> str: 
    """X√¢y d·ª±ng b√°o c√°o c·∫£nh b√°o bi·∫øn ƒë·ªông."""
    current_total_equity = calculate_total_equity(state)
    pnl_icon = "üìà" if pnl_change >= 0 else "üìâ"

    report_lines = [f"‚ö° **C·∫≠p nh·∫≠t Bi·∫øn ƒë·ªông Danh m·ª•c ({VOLATILITY_REPORT_COOLDOWN_HOURS}H)** ‚ö°\n"]
    report_lines.append(f"{pnl_icon} **PnL thay ƒë·ªïi:** `{pnl_change:+.2f}%` | **T·ªïng T√†i S·∫£n hi·ªán t·∫°i:** `${current_total_equity:,.2f}`")

    # 5 l·ªánh ƒë√≥ng g·∫ßn nh·∫•t (s·∫Øp x·∫øp theo th·ªùi gian ƒë√≥ng l·ªánh m·ªõi nh·∫•t)
    trade_history = sorted(state.get('trade_history', []), key=lambda x: x.get('exit_time', ''), reverse=True)
    if trade_history:
        report_lines.append(f"\n**5 L·ªánh ƒë√≥ng g·∫ßn nh·∫•t:**")
        for trade in trade_history[:5]:
            icon = '‚úÖ' if trade['pnl_usd'] >= 0 else '‚ùå'
            invested_amount = trade.get('invested_usd', 0.0) # ƒê·∫£m b·∫£o d√πng invested_usd
            report_lines.append(f"{icon} `{trade['symbol']}` ({trade['trade_type']}) | Invested: `${invested_amount:,.2f}` | PnL: `${trade['pnl_usd']:,.2f}` (`{trade['pnl_percent']:.2f}%`)")
    else:
        report_lines.append(f"\n`Kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c ƒë√≥ng g·∫ßn ƒë√¢y.`")


    # 5 l·ªánh m·ªü g·∫ßn nh·∫•t (s·∫Øp x·∫øp theo th·ªùi gian m·ªü l·ªánh m·ªõi nh·∫•t)
    active_trades = sorted(state.get('active_trades', []), key=lambda x: x.get('entry_time', ''), reverse=True)
    if active_trades:
        report_lines.append(f"\n**5 L·ªánh m·ªü g·∫ßn nh·∫•t:**")
        for trade in active_trades[:5]:
            icon = "üî•" if trade['trade_type'] == "TREND_FOLLOW" else "üí°"
            
            # ∆Ø·ªõc t√≠nh PnL hi·ªán t·∫°i cho l·ªánh ƒëang m·ªü
            current_price_info = all_indicators.get(trade['symbol'], {}).get(trade['interval'])
            current_live_price = current_price_info.get('price') if current_price_info else None
            
            current_pnl_str = "N/A"
            invested_amount = trade.get('invested_usd', 0.0) # ƒê·∫£m b·∫£o d√πng invested_usd
            if current_live_price and trade['entry_price'] > 0:
                current_pnl_pct = (current_live_price - trade['entry_price']) / trade['entry_price'] * 100
                current_pnl_usd = invested_amount * (current_live_price - trade['entry_price']) / trade['entry_price']
                current_pnl_str = f"PnL: `${current_pnl_usd:,.2f}` (`{current_pnl_pct:+.2f}%`)"
            
            report_lines.append(f"{icon} `{trade['symbol']}` ({trade['opened_by_tactic']}/{trade['trade_type']}) | Invested: `${invested_amount:,.2f}` | {current_pnl_str}")
    else:
        report_lines.append(f"\n`Kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c m·ªü g·∫ßn ƒë√¢y.`")

    return "\n".join(report_lines)

if __name__ == "__main__":
    log_message("====== üöÄ QU·∫¢N L√ù DANH M·ª§C (PAPER TRADE) B·∫ÆT ƒê·∫¶U PHI√äN L√ÄM VI·ªÜC üöÄ ======")
    # all_indicators ƒë√£ ƒë∆∞·ª£c khai b√°o ·ªü ph·∫°m vi module (global)
    run_paper_trade_session()
    log_message("====== ‚úÖ QU·∫¢N L√ù DANH M·ª§C (PAPER TRADE) K·∫æT TH√öC PHI√äN L√ÄM VI·ªÜC ‚úÖ ======")
