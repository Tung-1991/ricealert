# /root/ricealert/backtest/paper_trade.py
# -*- coding: utf-8 -*-
"""
paper_trade.py - Qu·∫£n l√Ω Danh m·ª•c M√¥ ph·ªèng Th√¥ng minh (Paper Trading)
Version: 2.3 (The Adaptive Mind with Enhanced Market Insight & Reporting)
Date: 2025-07-09

Description:
H·ªá th·ªëng qu·∫£n l√Ω danh m·ª•c v·ªõi b·ªô n√£o th√≠ch ·ª©ng v√† kh·∫£ nƒÉng nh·∫≠n di·ªán th·ªã tr∆∞·ªùng s√¢u h∆°n.
- B·ªô n√£o ch·∫•m ƒëi·ªÉm (select_best_tactic) gi·ªù ƒë√¢y s·ª≠ d·ª•ng ADX, ATR, F&G, AI Confidence
  V√Ä C√ÅC M·∫™U H√åNH N·∫æN (Doji, Engulfing, Hammer, Shooting Star) c·ªßa BTC ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh l·ªëi ƒë√°nh.
- M·ªói l·ªëi ƒë√°nh c√≥ c·∫•u h√¨nh r·ªßi ro ri√™ng (SL_PCT, RR). T·ª∑ l·ªá RR s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh
  tƒÉng l√™n n·∫øu ƒëi·ªÉm giao d·ªãch (final_score) c·ªßa Trade Advisor cao.
- T√≠ch h·ª£p 2 c∆° ch·∫ø b√°o c√°o:
  1. B√°o c√°o t·ªïng quan ƒë·ªãnh k·ª≥ (8h, 20h) K√àM BI·ªÇU ƒê·ªí EQUITY CURVE.
  2. C·∫£nh b√°o bi·∫øn ƒë·ªông PnL m·ªói 4 gi·ªù n·∫øu c√≥ thay ƒë·ªïi > 0.5%.
- T·ª± ƒë·ªông EXPORT l·ªãch s·ª≠ giao d·ªãch ra file CSV m·ªói phi√™n.
"""
import os
import sys
import json
import uuid
import time
import requests
import pytz
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt # Import matplotlib ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì
import ta # Import th∆∞ vi·ªán ta cho c√°c ch·ªâ b√°o k·ªπ thu·∫≠t

from datetime import datetime, timedelta
from typing import Dict, List, Any, Tuple
from dotenv import load_dotenv

# --- T·∫£i v√† Thi·∫øt l·∫≠p ---
load_dotenv()
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)
sys.path.append(PROJECT_ROOT) # ƒê·ªÉ import c√°c module t·ª´ PROJECT_ROOT
PAPER_DATA_DIR = os.path.join(BASE_DIR, "paper_data")
os.makedirs(PAPER_DATA_DIR, exist_ok=True)

# --- Import c√°c th√†nh ph·∫ßn c·ªët l√µi ---
from indicator import get_price_data, calculate_indicators
from trade_advisor import get_advisor_decision, FULL_CONFIG as ADVISOR_BASE_CONFIG

# ==============================================================================
# ====================== üìö TH∆Ø VI·ªÜN L·ªêI ƒê√ÅNH (TACTICS LAB) üìö ===================
# ==============================================================================
TACTICS_LAB = {
    "Balanced_Trader": { "NOTES": "M·∫∑c ƒë·ªãnh, c√¢n b·∫±ng 3 y·∫øu t·ªë", "WEIGHTS": {'tech': 0.4, 'context': 0.2, 'ai': 0.4}, "ENTRY_SCORE": 6.5, "SL_PCT": 0.03, "RR": 2.0, "TRADE_PCT": 0.1, "ENABLE_DIP": True, "DIP_RANGE": [3.0, 4.8], "DIP_PCT": 0.05 },
    "AI_Aggressor": { "NOTES": "Khi trend m·∫°nh, tin v√†o AI", "WEIGHTS": {'tech': 0.1, 'context': 0.1, 'ai': 0.8}, "ENTRY_SCORE": 7.0, "SL_PCT": 0.05, "RR": 1.8, "TRADE_PCT": 0.15, "ENABLE_DIP": False },
    "Dip_Hunter": { "NOTES": "Khi s·ª£ h√£i, chuy√™n b·∫Øt ƒë√°y", "WEIGHTS": {'tech': 0.5, 'context': 0.3, 'ai': 0.2}, "ENTRY_SCORE": 7.0, "SL_PCT": 0.035,"RR": 2.5, "TRADE_PCT": 0.07, "ENABLE_DIP": True, "DIP_RANGE": [2.5, 4.5], "DIP_PCT": 0.07 },
    "Cautious_Observer": { "NOTES": "Khi sideways, b·∫£o to√†n v·ªën", "WEIGHTS": {'tech': 0.5, 'context': 0.5, 'ai': 0.0}, "ENTRY_SCORE": 7.5, "SL_PCT": 0.025,"RR": 2.0, "TRADE_PCT": 0.08, "ENABLE_DIP": False },
    "Market_Mirror": { "NOTES": "M√¥ ph·ªèng Alerter, l√†m baseline", "WEIGHTS": {'tech': 0.4, 'context': 0.2, 'ai': 0.4}, "ENTRY_SCORE": 6.0, "SL_PCT": 0.03, "RR": 1.8, "TRADE_PCT": 0.1, "ENABLE_DIP": True, "DIP_RANGE": [3.0, 4.8], "DIP_PCT": 0.05 },
    # Th√™m c√°c l·ªëi ƒë√°nh m·ªõi t·∫°i ƒë√¢y n·∫øu c·∫ßn (Range_Trader, Momentum_Chaser, v.v.)
}

# --- C√†i ƒë·∫∑t chung & B√°o c√°o ---
INITIAL_CAPITAL = 10000.0
SYMBOLS_TO_SCAN = ["ETHUSDT", "AVAXUSDT", "INJUSDT", "LINKUSDT", "SUIUSDT", "FETUSDT", "TAOUSDT"]
INTERVALS_TO_SCAN = ["1h", "4h"]
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')
PSYCHOLOGY_PNL_THRESHOLD_PERCENT = -5.0 # Ng∆∞·ª°ng "s·ª£ h√£i" chung cho to√†n danh m·ª•c

# --- C√†i ƒë·∫∑t cho B√°o c√°o Bi·∫øn ƒë·ªông ---
VOLATILITY_REPORT_COOLDOWN_HOURS = 4
VOLATILITY_REPORT_PNL_THRESHOLD = 0.5 # %

# --- C√†i ƒë·∫∑t cho TP/SL Scaling d·ª±a tr√™n Score ---
TP_SL_SCALING_RULES = {
    "high_score_rr_multiplier": 1.2,    # N·∫øu score >= high_score_threshold, RR = base_RR * 1.2
    "critical_score_rr_multiplier": 1.5, # N·∫øu score >= critical_score_threshold, RR = base_RR * 1.5
    "high_score_threshold": 7.0,         # Ng∆∞·ª°ng score ƒë·ªÉ √°p d·ª•ng high_score_rr_multiplier
    "critical_score_threshold": 8.5      # Ng∆∞·ª°ng score ƒë·ªÉ √°p d·ª•ng critical_score_rr_multiplier
}

# --- ƒê∆∞·ªùng d·∫´n file & Webhook ---
LOG_FILE = os.path.join(PAPER_DATA_DIR, "paper_trade_log.txt")
STATE_FILE = os.path.join(PAPER_DATA_DIR, "paper_trade_state.json")
TIMESTAMP_FILE = os.path.join(PAPER_DATA_DIR, "paper_trade_timestamps.json")
TRADE_HISTORY_CSV_FILE = os.path.join(PAPER_DATA_DIR, "trade_history.csv") # File xu·∫•t l·ªãch s·ª≠ giao d·ªãch
EQUITY_CURVE_CSV_FILE = os.path.join(PAPER_DATA_DIR, "equity_curve.csv")    # File d·ªØ li·ªáu ƒë∆∞·ªùng v·ªën
EQUITY_CURVE_IMAGE_FILE = os.path.join(PAPER_DATA_DIR, "equity_curve.png") # File ·∫£nh bi·ªÉu ƒë·ªì ƒë∆∞·ªùng v·ªën

DISCORD_WEBHOOK_URL = os.getenv("DISCORD_PAPER_WEBHOOK")

# ==============================================================================
# ================= üõ†Ô∏è C√ÅC H√ÄM TI·ªÜN √çCH & QU·∫¢N L√ù üõ†Ô∏è ======================
# ==============================================================================
def log_message(message: str):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = f"[{timestamp}] {message}"
    print(log_entry)
    with open(LOG_FILE, "a", encoding="utf-8") as f: f.write(log_entry + "\n")
def load_json_file(path: str, default: Dict = {}) -> Dict:
    try:
        with open(path, "r", encoding="utf-8") as f: return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError): return default
def save_json_file(path: str, data: Dict):
    with open(path, "w", encoding="utf-8") as f: json.dump(data, f, indent=4, ensure_ascii=False)
def send_discord_report(content: str):
    if not DISCORD_WEBHOOK_URL: return
    log_message("üöÄ ƒêang g·ª≠i b√°o c√°o text ƒë·∫øn Discord...")
    for i in range(0, len(content), 1950):
        try:
            requests.post(DISCORD_WEBHOOK_URL, json={"content": content[i:i+1950]}, timeout=10).raise_for_status()
            time.sleep(2) # TƒÉng sleep ƒë·ªÉ tr√°nh rate limit
        except requests.exceptions.RequestException as e:
            log_message(f"‚ùå L·ªói khi g·ª≠i b√°o c√°o Discord: {e}")
            break

def send_discord_image(image_path: str, caption: str = "üìä Bi·ªÉu ƒë·ªì"):
    """G·ª≠i ·∫£nh l√™n Discord qua webhook."""
    if not DISCORD_WEBHOOK_URL: return
    if not os.path.exists(image_path):
        log_message(f"‚ùå Kh√¥ng t√¨m th·∫•y file ·∫£nh ƒë·ªÉ g·ª≠i: {image_path}")
        return

    log_message(f"üì∏ ƒêang g·ª≠i ·∫£nh {os.path.basename(image_path)} ƒë·∫øn Discord...")
    try:
        with open(image_path, "rb") as f:
            files = {"file": (os.path.basename(image_path), f)}
            payload = {"content": caption}
            response = requests.post(DISCORD_WEBHOOK_URL, data=payload, files=files, timeout=15)
            response.raise_for_status()
            log_message(f"‚úÖ ƒê√£ g·ª≠i ·∫£nh {os.path.basename(image_path)}.")
    except requests.exceptions.RequestException as e:
        log_message(f"‚ùå L·ªói khi g·ª≠i ·∫£nh l√™n Discord: {e}")
    except Exception as e:
        log_message(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i ·∫£nh: {e}")

def export_trade_history_to_csv(trade_history: List[Dict]):
    """Ghi l·ªãch s·ª≠ giao d·ªãch v√†o file CSV."""
    if not trade_history:
        log_message("Kh√¥ng c√≥ l·ªãch s·ª≠ giao d·ªãch ƒë·ªÉ xu·∫•t CSV.")
        return

    df_history = pd.DataFrame(trade_history)
    # S·∫Øp x·∫øp c√°c c·ªôt theo th·ª© t·ª± d·ªÖ ƒë·ªçc
    columns_order = [
        "trade_id", "symbol", "interval", "status", "opened_by_tactic", "trade_type",
        "entry_price", "exit_price", "tp", "sl", "amount_usd",
        "pnl_usd", "pnl_percent", "entry_time", "exit_time", "entry_score"
    ]
    # Ch·ªâ gi·ªØ l·∫°i c√°c c·ªôt c√≥ trong d·ªØ li·ªáu
    df_history = df_history[[col for col in columns_order if col in df_history.columns]]

    # Ki·ªÉm tra n·∫øu file t·ªìn t·∫°i ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ ghi header hay kh√¥ng
    file_exists = os.path.exists(TRADE_HISTORY_CSV_FILE)
    mode = 'a' if file_exists else 'w'
    header = not file_exists

    try:
        df_history.to_csv(TRADE_HISTORY_CSV_FILE, mode=mode, header=header, index=False, encoding="utf-8")
        log_message(f"‚úÖ ƒê√£ xu·∫•t l·ªãch s·ª≠ giao d·ªãch v√†o {TRADE_HISTORY_CSV_FILE}")
    except Exception as e:
        log_message(f"‚ùå L·ªói khi xu·∫•t l·ªãch s·ª≠ giao d·ªãch ra CSV: {e}")

def log_equity_point(capital: float):
    """Ghi m·ªôt ƒëi·ªÉm v·ªën v√†o file equity_curve.csv."""
    now_str = datetime.now(VIETNAM_TZ).strftime("%Y-%m-%d %H:%M:%S")

    file_exists = os.path.exists(EQUITY_CURVE_CSV_FILE)
    mode = 'a' if file_exists else 'w'
    header = not file_exists # Ghi header ch·ªâ l·∫ßn ƒë·∫ßu

    try:
        with open(EQUITY_CURVE_CSV_FILE, mode, encoding="utf-8") as f:
            if header:
                f.write("timestamp,capital\n")
            f.write(f"{now_str},{capital:.2f}\n")
        log_message(f"‚úÖ ƒê√£ ghi ƒëi·ªÉm v·ªën: {capital:,.2f}")
    except Exception as e:
        log_message(f"‚ùå L·ªói khi ghi ƒëi·ªÉm v·ªën v√†o CSV: {e}")

def plot_equity_curve(image_path: str = EQUITY_CURVE_IMAGE_FILE):
    """V·∫Ω bi·ªÉu ƒë·ªì Equity Curve v√† l∆∞u th√†nh ·∫£nh."""
    try:
        df_equity = pd.read_csv(EQUITY_CURVE_CSV_FILE, names=["timestamp", "capital"], header=0) # header=0 v√¨ ch√∫ng ta ghi header ·ªü log_equity_point
        df_equity["timestamp"] = pd.to_datetime(df_equity["timestamp"])

        plt.figure(figsize=(12, 6)) # K√≠ch th∆∞·ªõc l·ªõn h∆°n cho bi·ªÉu ƒë·ªì r√µ r√†ng
        plt.plot(df_equity["timestamp"], df_equity["capital"], linewidth=2, color='skyblue')
        plt.title("üìà ƒê∆∞·ªùng V·ªën Danh M·ª•c (Equity Curve)", fontsize=16)
        plt.xlabel("Th·ªùi gian", fontsize=12)
        plt.ylabel("V·ªën ($)", fontsize=12)
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.xticks(rotation=45, ha='right') # Xoay nh√£n tr·ª•c x ƒë·ªÉ d·ªÖ ƒë·ªçc
        plt.tick_params(axis='x', labelsize=10)
        plt.tick_params(axis='y', labelsize=10)
        plt.tight_layout() # ƒê·∫£m b·∫£o m·ªçi th·ª© v·ª´a v·∫∑n trong figure
        plt.savefig(image_path, dpi=100) # L∆∞u ·∫£nh v·ªõi DPI cao h∆°n ƒë·ªÉ r√µ n√©t
        plt.close() # ƒê√≥ng figure ƒë·ªÉ gi·∫£i ph√≥ng b·ªô nh·ªõ
        log_message(f"‚úÖ ƒê√£ v·∫Ω v√† l∆∞u bi·ªÉu ƒë·ªì v·ªën t·∫°i {image_path}")
    except FileNotFoundError:
        log_message(f"‚ö†Ô∏è File d·ªØ li·ªáu v·ªën kh√¥ng t√¨m th·∫•y: {EQUITY_CURVE_CSV_FILE}. Kh√¥ng th·ªÉ v·∫Ω bi·ªÉu ƒë·ªì.")
    except Exception as e:
        log_message(f"‚ùå L·ªói khi v·∫Ω bi·ªÉu ƒë·ªì Equity Curve: {e}")

# ==============================================================================
# ============ üß† B·ªò N√ÉO TH√çCH ·ª®NG: CH·ªåN L·ªêI ƒê√ÅNH üß† =============
# ==============================================================================
def select_best_tactic(market_snapshot: Dict) -> str:
    """
    Ch·∫•m ƒëi·ªÉm v√† ch·ªçn ra l·ªëi ƒë√°nh t·ªët nh·∫•t d·ª±a tr√™n ·∫£nh ch·ª•p th·ªã tr∆∞·ªùng.
    ƒê√¢y l√† b·ªô n√£o c·ªßa h·ªá th·ªëng, thay th·∫ø cho logic if/else ƒë∆°n gi·∫£n.
    """
    tactic_scores = {tactic: 0 for tactic in TACTICS_LAB}

    # --- Tr√≠ch xu·∫•t d·ªØ li·ªáu th·ªã tr∆∞·ªùng t·ª´ Snapshot ---
    fg_index = market_snapshot.get("fear_greed", 50)
    btc_d1_trend = market_snapshot.get("btc_d1_trend", "sideway")
    btc_d1_adx = market_snapshot.get("btc_d1_adx", 20.0)
    btc_d1_atr_pct = market_snapshot.get("btc_d1_atr_percent", 1.5)
    btc_h4_ai_score = market_snapshot.get("btc_h4_ai_score", 5.0)
    btc_d1_doji_type = market_snapshot.get("btc_d1_doji_type", "none")
    btc_d1_candle_pattern = market_snapshot.get("btc_d1_candle_pattern", "none")

    log_message(f"Snapshot Th·ªã tr∆∞·ªùng: F&G={fg_index}, BTC Trend={btc_d1_trend}, ADX={btc_d1_adx:.2f}, ATR%={btc_d1_atr_pct:.2f}, AI Score (BTC)={btc_h4_ai_score:.2f}, Doji={btc_d1_doji_type}, Pattern={btc_d1_candle_pattern}")

    # --- C√°c lu·∫≠t ch·∫•m ƒëi·ªÉm (Rules Engine) ---

    # 1. D·ª±a v√†o S·ª©c m·∫°nh Trend (ADX) v√† H∆∞·ªõng Trend
    if btc_d1_adx > 28 and btc_d1_trend == "uptrend":
        tactic_scores["AI_Aggressor"] += 3
        tactic_scores["Balanced_Trader"] += 1
        tactic_scores["Cautious_Observer"] -= 2
    elif btc_d1_adx > 28 and btc_d1_trend == "downtrend":
        tactic_scores["Dip_Hunter"] += 2 # M·∫°nh d·∫°n b·∫Øt ƒë√°y khi trend gi·∫£m r√µ r·ªát
        tactic_scores["Cautious_Observer"] -= 1 # Tr√°nh qu√° th·∫≠n tr·ªçng khi c√≥ c∆° h·ªôi
        tactic_scores["AI_Aggressor"] -= 2 # Tr√°nh theo AI v√†o trend gi·∫£m
    elif btc_d1_adx < 20: # Sideway, trend y·∫øu
        tactic_scores["Cautious_Observer"] += 3
        tactic_scores["Balanced_Trader"] += 1
        tactic_scores["AI_Aggressor"] -= 2
        tactic_scores["Dip_Hunter"] += 1 # Sideway d·ªÖ c√≥ false break/r√∫t ch√¢n ƒë·ªÉ b·∫Øt dip

    # 2. D·ª±a v√†o T√¢m l√Ω Th·ªã tr∆∞·ªùng (Fear & Greed Index)
    if fg_index > 75: # Tham lam t·ªôt ƒë·ªô
        tactic_scores["AI_Aggressor"] += 2
        tactic_scores["Market_Mirror"] += 1 # N·∫øu th·ªã tr∆∞·ªùng qu√° h∆∞ng ph·∫•n, h√£y theo s√°t
        tactic_scores["Dip_Hunter"] -= 1 # Kh√¥ng b·∫Øt ƒë√°y khi m·ªçi ng∆∞·ªùi ƒëang FOMO
    elif fg_index < 25: # S·ª£ h√£i t·ªôt ƒë·ªô
        tactic_scores["Dip_Hunter"] += 3
        tactic_scores["Cautious_Observer"] += 1
        tactic_scores["AI_Aggressor"] -= 1 # Kh√¥ng theo AI n·∫øu n√≥ c√≥ v·∫ª t√≠ch c·ª±c gi·ªØa l√∫c s·ª£ h√£i

    # 3. D·ª±a v√†o ƒê·ªô bi·∫øn ƒë·ªông (ATR)
    if btc_d1_atr_pct > 4.0: # Bi·∫øn ƒë·ªông r·∫•t m·∫°nh
        tactic_scores["Dip_Hunter"] += 2 # Nhi·ªÅu c∆° h·ªôi cho Dip Hunter
        tactic_scores["AI_Aggressor"] += 1 # N·∫øu AI ƒë√∫ng, l·ª£i nhu·∫≠n l·ªõn
        tactic_scores["Cautious_Observer"] -= 2 # Kh√¥ng ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng bi·∫øn ƒë·ªông
    elif btc_d1_atr_pct < 1.5: # Th·ªã tr∆∞·ªùng ·∫£m ƒë·∫°m
        tactic_scores["Cautious_Observer"] += 2
        tactic_scores["AI_Aggressor"] -= 1

    # 4. D·ª±a v√†o S·ª± t·ª± tin c·ªßa AI (Insight t·ª´ backtest) - Y·∫æU T·ªê QUAN TR·ªåNG
    if btc_h4_ai_score > 7.5:
        tactic_scores["AI_Aggressor"] += 4 # Th∆∞·ªüng l·ªõn khi AI r·∫•t t·ª± tin
        tactic_scores["Balanced_Trader"] += 1
    elif btc_h4_ai_score < 4.0:
        tactic_scores["AI_Aggressor"] -= 2
        tactic_scores["Cautious_Observer"] += 1
        tactic_scores["Dip_Hunter"] += 0.5 # N·∫øu AI kh√¥ng t·ª± tin, th·ªã tr∆∞·ªùng c√≥ th·ªÉ ƒë·∫£o chi·ªÅu b·∫•t ng·ªù

    # 5. D·ª±a v√†o M·∫´u h√¨nh N·∫øn (BTC 1D)
    if btc_d1_doji_type == "dragonfly" and btc_d1_trend == "downtrend":
        tactic_scores["Dip_Hunter"] += 2.5 # D·∫•u hi·ªáu ƒë·∫£o chi·ªÅu ƒë√°y m·∫°nh m·∫Ω
        tactic_scores["Balanced_Trader"] += 1
    elif btc_d1_doji_type == "gravestone" and btc_d1_trend == "uptrend":
        tactic_scores["Cautious_Observer"] += 2 # D·∫•u hi·ªáu ƒë·∫£o chi·ªÅu ƒë·ªânh m·∫°nh m·∫Ω
        tactic_scores["AI_Aggressor"] -= 1
    elif btc_d1_candle_pattern == "bullish_engulfing" and btc_d1_trend == "downtrend":
        tactic_scores["Dip_Hunter"] += 2
        tactic_scores["Balanced_Trader"] += 1
    elif btc_d1_candle_pattern == "bearish_engulfing" and btc_d1_trend == "uptrend":
        tactic_scores["Cautious_Observer"] += 1.5
        tactic_scores["AI_Aggressor"] -= 1
    elif btc_d1_doji_type == "common" or btc_d1_doji_type == "long_legged": # Th·ªã tr∆∞·ªùng l∆∞·ª°ng l·ª±
        tactic_scores["Cautious_Observer"] += 1
        tactic_scores["Balanced_Trader"] += 0.5


    # Lu√¥n cho Balanced_Trader m·ªôt ƒëi·ªÉm n·ªÅn ƒë·ªÉ l√†m l·ª±a ch·ªçn an to√†n khi kh√¥ng c√≥ l·ª±a ch·ªçn r√µ r√†ng
    tactic_scores["Balanced_Trader"] += 1

    log_message(f"Ch·∫•m ƒëi·ªÉm l·ªëi ƒë√°nh: {tactic_scores}")

    # Ch·ªçn l·ªëi ƒë√°nh c√≥ ƒëi·ªÉm cao nh·∫•t
    best_tactic = max(tactic_scores, key=tactic_scores.get)
    log_message(f"üèÜ L·ªëi ƒë√°nh chi·∫øn th·∫Øng: [{best_tactic}] v·ªõi s·ªë ƒëi·ªÉm {tactic_scores[best_tactic]}")

    return best_tactic

def apply_portfolio_psychology(tactic_config: Dict, portfolio_state: Dict) -> Dict:
    """ƒêi·ªÅu ch·ªânh th√¥ng s·ªë c·ªßa l·ªëi ƒë√°nh d·ª±a tr√™n PnL t·ªïng."""
    # Tr√°nh chia cho 0 n·∫øu INITIAL_CAPITAL l√† 0
    pnl_percent = (portfolio_state['capital'] - INITIAL_CAPITAL) / INITIAL_CAPITAL * 100 if INITIAL_CAPITAL > 0 else 0

    effective_config = tactic_config.copy()

    if pnl_percent < PSYCHOLOGY_PNL_THRESHOLD_PERCENT:
        effective_config["TRADE_PCT"] /= 2  # Gi·∫£m r·ªßi ro ƒëi m·ªôt n·ª≠a
        effective_config["ENTRY_SCORE"] += 0.5 # K√©n ch·ªçn h∆°n
        log_message(f"üò® T√¢m l√Ω S·ª£ h√£i k√≠ch ho·∫°t! (PnL: {pnl_percent:.2f}%) -> Gi·∫£m r·ªßi ro, tƒÉng ng∆∞·ª°ng ƒëi·ªÉm.")

    return effective_config

def run_paper_trade_session():
    # 1. T·∫£i tr·∫°ng th√°i danh m·ª•c & L·∫•y d·ªØ li·ªáu m·ªõi
    portfolio_state = load_json_file(STATE_FILE)
    if not portfolio_state:
        portfolio_state = {"capital": INITIAL_CAPITAL, "active_trades": [], "trade_history": []}
        # ƒê·∫£m b·∫£o last_capital cho volatility report ƒë∆∞·ª£c kh·ªüi t·∫°o
        timestamps = load_json_file(TIMESTAMP_FILE, {})
        timestamps["capital_at_last_volatility_report"] = INITIAL_CAPITAL
        save_json_file(TIMESTAMP_FILE, timestamps)


    all_indicators = {}
    # Lu√¥n l·∫•y d·ªØ li·ªáu BTC tr√™n 1D v√† 4H cho Market Snapshot
    all_symbols_to_fetch = SYMBOLS_TO_SCAN + ["BTCUSDT"]
    # Lu√¥n l·∫•y 1h, 4h cho altcoins v√† 1d, 4h cho BTC
    all_intervals_to_fetch = list(set(INTERVALS_TO_SCAN + ["1h", "4h", "1d"]))

    for symbol in all_symbols_to_fetch:
        all_indicators[symbol] = {}
        for interval in all_intervals_to_fetch:
            try:
                df = get_price_data(symbol, interval, limit=200)
                # calculate_indicators ƒë√£ t·ª± x·ª≠ l√Ω tr∆∞·ªùng h·ª£p thi·∫øu d·ªØ li·ªáu v√† tr·∫£ v·ªÅ dict m·∫∑c ƒë·ªãnh
                calculated_data = calculate_indicators(df, symbol, interval)
                all_indicators[symbol][interval] = calculated_data
                if calculated_data.get("reason"): # N·∫øu c√≥ c·∫£nh b√°o thi·∫øu d·ªØ li·ªáu t·ª´ indicator
                    log_message(f"‚ö†Ô∏è {calculated_data['reason']} cho {symbol}-{interval}. S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh.")
            except Exception as e:
                log_message(f"‚ùå L·ªói khi t√≠nh ch·ªâ b√°o cho {symbol}-{interval}: {e}")
                # ƒê·∫£m b·∫£o v·∫´n c√≥ entry tr·ªëng ƒë·ªÉ tr√°nh l·ªói KeyError sau n√†y
                all_indicators[symbol][interval] = {"price": 0, "closed_candle_price": 0}


    # 2. ƒê√≥ng c√°c l·ªánh c≈©
    trades_to_remove = []
    closed_this_session = False
    for trade in portfolio_state["active_trades"]:
        # Ki·ªÉm tra d·ªØ li·ªáu hi·ªán t·∫°i c·ªßa symbol/interval c·ªßa l·ªánh
        current_data = all_indicators.get(trade["symbol"], {}).get(trade["interval"])
        if not current_data or current_data.get('price', 0) == 0:
            log_message(f"‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu hi·ªán t·∫°i (live price) cho l·ªánh {trade['symbol']}-{trade['interval']}. B·ªè qua ki·ªÉm tra ƒë√≥ng l·ªánh.")
            continue

        current_price = current_data['price'] # S·ª≠ d·ª•ng live price ƒë·ªÉ ki·ªÉm tra SL/TP
        status, exit_price = (None, None)

        # Ki·ªÉm tra SL/TP
        if current_price <= trade["sl"]: status, exit_price = "SL_HIT", trade["sl"]
        elif current_price >= trade["tp"]: status, exit_price = "TP_HIT", trade["tp"]

        if status:
            pnl_percent = (exit_price - trade["entry_price"]) / trade["entry_price"]
            pnl_usd = trade["amount_usd"] * pnl_percent
            portfolio_state["capital"] += pnl_usd
            trade.update({"status": status, "exit_price": exit_price, "exit_time": datetime.now(VIETNAM_TZ).isoformat(), "pnl_percent": pnl_percent * 100, "pnl_usd": pnl_usd})
            portfolio_state["trade_history"].append(trade)
            trades_to_remove.append(trade)
            closed_this_session = True
            log_message(f"{'‚úÖ' if pnl_usd >= 0 else '‚ùå'} L·ªánh ƒê√≥ng: {trade['symbol']} ({trade['opened_by_tactic']}) | {status} | PnL: ${pnl_usd:,.2f}")

    if trades_to_remove:
        portfolio_state["active_trades"] = [t for t in portfolio_state["active_trades"] if t not in trades_to_remove]
        # Gi·ªõi h·∫°n l·ªãch s·ª≠ giao d·ªãch ƒë·ªÉ kh√¥ng l√†m file qu√° l·ªõn (v√≠ d·ª•: 1000 l·ªánh g·∫ßn nh·∫•t)
        portfolio_state["trade_history"] = sorted(portfolio_state["trade_history"], key=lambda x: x.get('exit_time', ''), reverse=True)[:1000]


    # 3. T∆∞ duy v√† H√†nh ƒë·ªông v·ªõi B·ªô n√£o m·ªõi
    # 3.1. T·∫°o ·∫£nh ch·ª•p th·ªã tr∆∞·ªùng (Market Snapshot)
    market_context_path = os.path.join(PROJECT_ROOT, "ricenews/lognew/market_context.json")
    market_context = load_json_file(market_context_path)

    # L·∫•y ch·ªâ b√°o BTC tr√™n 1D v√† 4H cho market snapshot
    btc_d1_indicators = all_indicators.get("BTCUSDT", {}).get("1d", {})
    btc_h4_indicators = all_indicators.get("BTCUSDT", {}).get("4h", {})

    # ƒê·ªÉ l·∫•y AI score c·ªßa BTC, c·∫ßn ch·∫°y Trade Advisor tr√™n BTC H4
    # ƒê·∫£m b·∫£o c√°c ch·ªâ b√°o c·∫ßn thi·∫øt cho advisor c√≥ gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
    btc_h4_advisor_input = btc_h4_indicators.copy()
    btc_h4_advisor_input['price'] = btc_h4_indicators.get('closed_candle_price', btc_h4_indicators.get('price', 0))

    # B·ªï sung RSI ƒëa khung th·ªùi gian cho BTC v√†o btc_h4_advisor_input
    for tf in ["1h", "4h", "1d"]:
        df_rsi = get_price_data("BTCUSDT", tf)
        if not df_rsi.empty and len(df_rsi) >= 20:
            btc_h4_advisor_input[f"rsi_{tf}"] = round(ta.momentum.rsi(df_rsi["close"], window=14).iloc[-2], 2)
        else:
            btc_h4_advisor_input[f"rsi_{tf}"] = 50.0

    btc_h4_advisor_decision = {}
    if btc_h4_advisor_input.get('price', 0) != 0 and not btc_h4_indicators.get('reason'):
        btc_h4_advisor_decision = get_advisor_decision("BTCUSDT", "4h", btc_h4_advisor_input, ADVISOR_BASE_CONFIG)

    market_snapshot = {
        "fear_greed": market_context.get("fear_greed", 50),
        "btc_d1_trend": btc_d1_indicators.get("trend", "sideway"),
        "btc_d1_adx": btc_d1_indicators.get("adx", 20.0),
        "btc_d1_atr_percent": btc_d1_indicators.get("atr_percent", 1.5),
        "btc_h4_ai_score": btc_h4_advisor_decision.get("final_score", 5.0),
        "btc_d1_doji_type": btc_d1_indicators.get("doji_type", "none"),
        "btc_d1_candle_pattern": btc_d1_indicators.get("candle_pattern", "none"),
    }

    # 3.2. Ch·ªçn l·ªëi ƒë√°nh t·ªët nh·∫•t
    selected_tactic_name = select_best_tactic(market_snapshot)
    base_tactic_config = TACTICS_LAB[selected_tactic_name]

    # 3.3. √Åp d·ª•ng t√¢m l√Ω l√™n l·ªëi ƒë√°nh ƒë√£ ch·ªçn
    effective_tactic = apply_portfolio_psychology(base_tactic_config, portfolio_state)

    # 4. Qu√©t l·ªánh m·ªõi v·ªõi l·ªëi ƒë√°nh ƒë√£ ch·ªçn
    opened_this_session = False
    for symbol in SYMBOLS_TO_SCAN:
        # B·ªè qua n·∫øu ƒë√£ c√≥ l·ªánh m·ªü v·ªõi symbol n√†y
        if any(t['symbol'] == symbol for t in portfolio_state['active_trades']): continue

        for interval in INTERVALS_TO_SCAN:
            # L·∫•y ch·ªâ b√°o c·ªßa n·∫øn ƒê√É ƒê√ìNG cho quy·∫øt ƒë·ªãnh c·ªßa Trade Advisor
            # v√† gi√° live cho entry
            current_symbol_indicators = all_indicators.get(symbol, {}).get(interval)

            # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ho·∫∑c d·ªØ li·ªáu kh√¥ng ƒë·ªß ƒë·ªÉ Trade Advisor x·ª≠ l√Ω
            if not current_symbol_indicators or current_symbol_indicators.get('reason'):
                log_message(f"‚ö†Ô∏è B·ªè qua {symbol}-{interval}. D·ªØ li·ªáu ch·ªâ b√°o kh√¥ng ƒë·ªß ho·∫∑c kh√¥ng h·ª£p l·ªá: {current_symbol_indicators.get('reason', 'Kh√¥ng r√µ l√Ω do')}.")
                continue

            # Trade Advisor c·∫ßn c√°c ch·ªâ b√°o c·ªßa n·∫øn ƒê√É ƒê√ìNG (closed_candle_price)
            # Ta s·∫Ω t·∫°o m·ªôt b·∫£n sao v√† ƒëi·ªÅu ch·ªânh ƒë·ªÉ ph√π h·ª£p v·ªõi Trade Advisor
            indicators_for_advisor = current_symbol_indicators.copy()
            indicators_for_advisor['price'] = current_symbol_indicators.get('closed_candle_price', current_symbol_indicators.get('price', 0))
            if indicators_for_advisor['price'] == 0: # Gi√° n·∫øn ƒë√≥ng kh√¥ng h·ª£p l·ªá
                log_message(f"‚ö†Ô∏è B·ªè qua {symbol}-{interval}. Gi√° n·∫øn ƒë√≥ng ƒë·ªÉ t√≠nh advisor score l√† 0.")
                continue


            # B·ªï sung RSI ƒëa khung th·ªùi gian cho altcoin (rsi_1h, rsi_4h, rsi_1d)
            for tf_alt in ["1h", "4h", "1d"]:
                df_rsi_alt = get_price_data(symbol, tf_alt)
                if not df_rsi_alt.empty and len(df_rsi_alt) >= 20:
                    indicators_for_advisor[f"rsi_{tf_alt}"] = round(ta.momentum.rsi(df_rsi_alt["close"], window=14).iloc[-2], 2)
                else:
                    indicators_for_advisor[f"rsi_{tf_alt}"] = 50.0

            decision = get_advisor_decision(
                symbol, interval, indicators_for_advisor, ADVISOR_BASE_CONFIG,
                weights_override=effective_tactic["WEIGHTS"]
            )
            final_score = decision.get("final_score", 0.0)

            trade_type, amount_percent = None, 0.0
            if final_score >= effective_tactic["ENTRY_SCORE"]:
                trade_type = "TREND_FOLLOW"
                amount_percent = effective_tactic["TRADE_PCT"]
            elif effective_tactic.get("ENABLE_DIP", False):
                score_min, score_max = effective_tactic["DIP_RANGE"]
                if score_min <= final_score < score_max:
                    # T·∫≠n d·ª•ng doji_type v√† candle_pattern ƒë√£ c√≥ t·ª´ indicator.py (t·ª´ n·∫øn ƒë√£ ƒë√≥ng)
                    if (indicators_for_advisor.get('rsi_divergence') == 'bullish' or
                        indicators_for_advisor.get('doji_type') == 'dragonfly' or
                        indicators_for_advisor.get('candle_pattern') == 'hammer' or
                        indicators_for_advisor.get('candle_pattern') == 'bullish_engulfing'):
                        trade_type = "DIP_BUY"
                        amount_percent = effective_tactic["DIP_PCT"]

            if trade_type:
                # Gi√° v√†o l·ªánh ph·∫£i l√† gi√° live hi·ªán t·∫°i
                entry_price = current_symbol_indicators['price']
                amount_usd = portfolio_state['capital'] * amount_percent
                if amount_usd > portfolio_state['capital'] or amount_usd < 10: # ƒê·∫£m b·∫£o kh√¥ng qu√° v·ªën v√† ƒë·ªß l·ªõn
                    log_message(f"‚ö†Ô∏è S·ªë ti·ªÅn giao d·ªãch qu√° nh·ªè ho·∫∑c v∆∞·ª£t v·ªën (${amount_usd:,.2f}). B·ªè qua l·ªánh cho {symbol}.")
                    continue
                if entry_price == 0: # ƒê·∫£m b·∫£o gi√° entry kh√¥ng ph·∫£i 0
                    log_message(f"‚ö†Ô∏è Gi√° v√†o l·ªánh cho {symbol} l√† 0. B·ªè qua l·ªánh.")
                    continue


                # === LOGIC T√çNH TP/SL D·ª∞A TR√äN FINAL_SCORE & TACTIC'S BASE RR ===
                base_rr = effective_tactic["RR"]
                calculated_rr = base_rr

                # √Åp d·ª•ng multiplier n·∫øu score ƒë·ªß cao
                if final_score >= TP_SL_SCALING_RULES["critical_score_threshold"]:
                    calculated_rr = base_rr * TP_SL_SCALING_RULES["critical_score_rr_multiplier"]
                    log_message(f"üìà Critical Score RR k√≠ch ho·∫°t! ({final_score:.2f} >= {TP_SL_SCALING_RULES['critical_score_threshold']}) -> RR tƒÉng l√™n {calculated_rr:.2f}")
                elif final_score >= TP_SL_SCALING_RULES["high_score_threshold"]:
                    calculated_rr = base_rr * TP_SL_SCALING_RULES["high_score_rr_multiplier"]
                    log_message(f"üìä High Score RR k√≠ch ho·∫°t! ({final_score:.2f} >= {TP_SL_SCALING_RULES['high_score_threshold']}) -> RR tƒÉng l√™n {calculated_rr:.2f}")

                sl_price = entry_price * (1 - effective_tactic["SL_PCT"])
                tp_price = entry_price * (1 + effective_tactic["SL_PCT"] * calculated_rr)

                # L√†m tr√≤n TP/SL ƒë·ªÉ tr√°nh s·ªë qu√° d√†i
                tp_price = round(tp_price, 8)
                sl_price = round(sl_price, 8)

                # ƒê·∫£m b·∫£o TP > Entry > SL (cho l·ªánh mua)
                if tp_price <= entry_price or sl_price >= entry_price:
                    log_message(f"‚ö†Ô∏è TP ({tp_price}) ho·∫∑c SL ({sl_price}) kh√¥ng h·ª£p l·ªá so v·ªõi Entry ({entry_price}). B·ªè qua l·ªánh cho {symbol}.")
                    continue
                # ======================================================

                new_trade = {
                    "trade_id": str(uuid.uuid4()), "symbol": symbol, "interval": interval,
                    "status": "ACTIVE", "opened_by_tactic": selected_tactic_name,
                    "trade_type": trade_type, "entry_price": entry_price,
                    "tp": tp_price, "sl": sl_price, "amount_usd": amount_usd,
                    "entry_time": datetime.now(VIETNAM_TZ).isoformat(), "entry_score": final_score
                }
                portfolio_state["active_trades"].append(new_trade)
                opened_this_session = True

                log_icon = "üî•" if trade_type == "TREND_FOLLOW" else "üí°"
                log_message(f"{log_icon} L·ªánh M·ªõi ({selected_tactic_name}/{trade_type}): {symbol} | Score: {final_score:.2f} | Entry: {entry_price:.4f} | TP: {tp_price:.4f} | SL: {sl_price:.4f}")
                break # Ch·ªâ m·ªü 1 l·ªánh m·ªõi m·ªói phi√™n qu√©t
        if opened_this_session: break # Ch·ªâ m·ªü 1 l·ªánh m·ªõi m·ªói phi√™n qu√©t

    # 5. L∆∞u tr·∫°ng th√°i, ghi log v·ªën v√† xu·∫•t l·ªãch s·ª≠ giao d·ªãch
    log_message(f"üí∞ V·ªën Hi·ªán T·∫°i: ${portfolio_state['capital']:,.2f} | L·ªánh M·ªü: {len(portfolio_state['active_trades'])}")
    save_json_file(STATE_FILE, portfolio_state)
    export_trade_history_to_csv(portfolio_state['trade_history']) # Xu·∫•t l·ªãch s·ª≠ giao d·ªãch
    log_equity_point(portfolio_state['capital']) # Ghi ƒëi·ªÉm v·ªën hi·ªán t·∫°i

    # 6. Logic g·ª≠i b√°o c√°o (C·∫£ 2 lo·∫°i)
    # 6.1 B√°o c√°o t·ªïng quan h√†ng ng√†y (8h, 20h)
    if should_send_daily_summary():
        report_content = build_daily_summary_report(portfolio_state)
        send_discord_report(report_content)

        # V·∫Ω v√† g·ª≠i bi·ªÉu ƒë·ªì Equity Curve k√®m b√°o c√°o h√†ng ng√†y
        plot_equity_curve(EQUITY_CURVE_IMAGE_FILE)
        send_discord_image(EQUITY_CURVE_IMAGE_FILE, "üìä **C·∫≠p nh·∫≠t ƒê∆∞·ªùng V·ªën (Equity Curve)**")

        timestamps = load_json_file(TIMESTAMP_FILE, {})
        timestamps["last_daily_report_sent"] = datetime.now().timestamp()
        save_json_file(TIMESTAMP_FILE, timestamps)

    # 6.2 C·∫£nh b√°o bi·∫øn ƒë·ªông (M·ªói 4h n·∫øu PnL thay ƒë·ªïi > 0.5%)
    should_send, pnl_change_pct = should_send_volatility_report(portfolio_state)
    if should_send:
        report_content = build_volatility_report(portfolio_state, pnl_change_pct)
        send_discord_report(report_content)
        timestamps = load_json_file(TIMESTAMP_FILE, {})
        timestamps["last_volatility_report_sent"] = datetime.now().timestamp()
        timestamps["capital_at_last_volatility_report"] = portfolio_state['capital']
        save_json_file(TIMESTAMP_FILE, timestamps)

# ==============================================================================
# ========================  B√ÅO C√ÅO & ƒêI·ªÄU KI·ªÜN G·ª¨I =========================
# ==============================================================================

def should_send_daily_summary() -> bool:
    """Ki·ªÉm tra xem c√≥ n√™n g·ª≠i b√°o c√°o t√≥m t·∫Øt h√†ng ng√†y kh√¥ng."""
    now_vn = datetime.now(VIETNAM_TZ)
    # G·ª≠i v√†o 8h s√°ng v√† 8h t·ªëi
    if now_vn.hour not in [8, 20]: return False

    timestamps = load_json_file(TIMESTAMP_FILE, {"last_daily_report_sent": 0})
    # Cooldown 11 ti·∫øng ƒë·ªÉ tr√°nh g·ª≠i 2 l·∫ßn trong c√πng 1 khung gi·ªù
    if (now_vn.timestamp() - timestamps.get("last_daily_report_sent", 0)) > 11 * 3600:
        return True
    return False

def build_daily_summary_report(state: Dict) -> str:
    """X√¢y d·ª±ng b√°o c√°o t√≥m t·∫Øt h√†ng ng√†y cho danh m·ª•c."""
    now_vn = datetime.now(VIETNAM_TZ)
    if not state: return "Ch∆∞a c√≥ d·ªØ li·ªáu danh m·ª•c ƒë·ªÉ b√°o c√°o."

    capital = state.get('capital', INITIAL_CAPITAL)
    pnl_usd = capital - INITIAL_CAPITAL
    pnl_percent = (pnl_usd / INITIAL_CAPITAL) * 100 if INITIAL_CAPITAL > 0 else 0
    pnl_icon = "üìà" if pnl_usd >= 0 else "üìâ"

    report_lines = [f"üìä **B√°o C√°o T·ªïng Quan - {now_vn.strftime('%H:%M %d-%m-%Y')}** üìä\n"]
    report_lines.append(f"--- **`T·ªïng Quan`** ---")
    report_lines.append(f"{pnl_icon} **V·ªën:** `${capital:,.2f}` | **PnL:** `${pnl_usd:,.2f}` (`{pnl_percent:+.2f}%`)")

    active_trades = state.get('active_trades', [])
    report_lines.append(f"  **L·ªánh ƒëang m·ªü ({len(active_trades)}):**")
    if active_trades:
        for trade in active_trades:
            entry_time = datetime.fromisoformat(trade['entry_time']).astimezone(VIETNAM_TZ)
            held_hours = (datetime.now(VIETNAM_TZ) - entry_time).total_seconds() / 3600

            # ∆Ø·ªõc t√≠nh PnL hi·ªán t·∫°i n·∫øu c√≥ live price trong all_indicators
            current_price_info = all_indicators.get(trade['symbol'], {}).get(trade['interval'])
            current_live_price = current_price_info.get('price') if current_price_info else None

            current_pnl_str = "N/A"
            if current_live_price and trade['entry_price'] > 0:
                current_pnl_pct = (current_live_price - trade['entry_price']) / trade['entry_price'] * 100
                current_pnl_usd = trade['amount_usd'] * (current_live_price - trade['entry_price']) / trade['entry_price']
                current_pnl_str = f"PnL: `${current_pnl_usd:,.2f}` (`{current_pnl_pct:+.2f}%`)"

            report_lines.append(f"  - `{trade['symbol']}` ({trade['trade_type']}) | Tactic: `{trade['opened_by_tactic']}` | Gi·ªØ: `{held_hours:.1f}h` | {current_pnl_str}")
    else:
        report_lines.append("  -> `Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü.`")
    return "\n".join(report_lines)

def should_send_volatility_report(current_state: Dict) -> Tuple[bool, float]:
    """Ki·ªÉm tra xem c√≥ n√™n g·ª≠i c·∫£nh b√°o bi·∫øn ƒë·ªông kh√¥ng."""
    timestamps = load_json_file(TIMESTAMP_FILE, {})
    last_report_ts = timestamps.get("last_volatility_report_sent", 0)

    # Cooldown 4 ti·∫øng
    if (datetime.now().timestamp() - last_report_ts) < VOLATILITY_REPORT_COOLDOWN_HOURS * 3600:
        return False, 0

    last_check_capital = timestamps.get("capital_at_last_volatility_report", INITIAL_CAPITAL)
    current_capital = current_state['capital']

    # N·∫øu l·∫ßn ƒë·∫ßu ch·∫°y ho·∫∑c v·ªën kh√¥ng ƒë·ªß ƒë·ªÉ t√≠nh %
    if last_check_capital == 0 or INITIAL_CAPITAL == 0:
        # ƒê·∫∑t l·∫°i gi√° tr·ªã ban ƒë·∫ßu n·∫øu ch∆∞a c√≥ ƒë·ªÉ b·∫Øt ƒë·∫ßu theo d√µi
        timestamps["capital_at_last_volatility_report"] = current_capital
        save_json_file(TIMESTAMP_FILE, timestamps)
        return False, 0

    pnl_change_percent = ((current_capital - last_check_capital) / last_check_capital) * 100

    # G·ª≠i n·∫øu c√≥ bi·∫øn ƒë·ªông v·ªën ƒë√°ng k·ªÉ
    if abs(pnl_change_percent) >= VOLATILITY_REPORT_PNL_THRESHOLD:
        return True, pnl_change_percent

    return False, 0

def build_volatility_report(state: Dict, pnl_change: float) -> str:
    """X√¢y d·ª±ng b√°o c√°o c·∫£nh b√°o bi·∫øn ƒë·ªông."""
    capital = state.get('capital', INITIAL_CAPITAL)
    pnl_icon = "üìà" if pnl_change >= 0 else "üìâ"

    report_lines = [f"‚ö° **C·∫≠p nh·∫≠t Bi·∫øn ƒë·ªông Danh m·ª•c ({VOLATILITY_REPORT_COOLDOWN_HOURS}H)** ‚ö°\n"]
    report_lines.append(f"{pnl_icon} **PnL thay ƒë·ªïi:** `{pnl_change:+.2f}%` | **V·ªën hi·ªán t·∫°i:** `${capital:,.2f}`")

    # 5 l·ªánh ƒë√≥ng g·∫ßn nh·∫•t (s·∫Øp x·∫øp theo th·ªùi gian ƒë√≥ng l·ªánh m·ªõi nh·∫•t)
    trade_history = sorted(state.get('trade_history', []), key=lambda x: x.get('exit_time', ''), reverse=True)
    if trade_history:
        report_lines.append(f"\n**5 L·ªánh ƒë√≥ng g·∫ßn nh·∫•t:**")
        for trade in trade_history[:5]:
            icon = '‚úÖ' if trade['pnl_usd'] >= 0 else '‚ùå'
            report_lines.append(f"{icon} `{trade['symbol']}` ({trade['trade_type']}) | PnL: `${trade['pnl_usd']:,.2f}` (`{trade['pnl_percent']:.2f}%`)")
    else:
        report_lines.append(f"\n`Kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c ƒë√≥ng g·∫ßn ƒë√¢y.`")


    # 5 l·ªánh m·ªü g·∫ßn nh·∫•t (s·∫Øp x·∫øp theo th·ªùi gian m·ªü l·ªánh m·ªõi nh·∫•t)
    active_trades = sorted(state.get('active_trades', []), key=lambda x: x.get('entry_time', ''), reverse=True)
    if active_trades:
        report_lines.append(f"\n**5 L·ªánh m·ªü g·∫ßn nh·∫•t:**")
        for trade in active_trades[:5]:
            icon = "üî•" if trade['trade_type'] == "TREND_FOLLOW" else "üí°"
            report_lines.append(f"{icon} `{trade['symbol']}` ({trade['opened_by_tactic']}/{trade['trade_type']})")
    else:
        report_lines.append(f"\n`Kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c m·ªü g·∫ßn ƒë√¢y.`")

    return "\n".join(report_lines)

if __name__ == "__main__":
    log_message("====== üöÄ QU·∫¢N L√ù DANH M·ª§C (PAPER TRADE) B·∫ÆT ƒê·∫¶U PHI√äN L√ÄM VI·ªÜC üöÄ ======")
    # ƒê·∫∑t bi·∫øn global all_indicators ·ªü ƒë√¢y ho·∫∑c chuy·ªÉn ƒë·ªïi ki·∫øn tr√∫c ƒë·ªÉ h√†m build_daily_summary_report
    # v√† build_volatility_report kh√¥ng c·∫ßn bi·∫øn global n√†y (v√≠ d·ª•: truy·ªÅn v√†o nh∆∞ tham s·ªë)
    # T·∫°m th·ªùi ƒë·ªÉ n√≥ ch·∫°y ƒë∆∞·ª£c, ta s·∫Ω khai b√°o ·ªü ph·∫°m vi global ho·∫∑c truy·ªÅn tham s·ªë.
    # V√¨ all_indicators ƒë∆∞·ª£c t·∫°o ra trong run_paper_trade_session, n√™n n√≥ kh√¥ng kh·∫£ d·ª•ng tr·ª±c ti·∫øp
    # cho build_daily_summary_report khi h√†m n√†y ƒë∆∞·ª£c g·ªçi t·ª´ run_paper_trade_session.
    # Tuy nhi√™n, do daily summary v√† volatility report ƒë∆∞·ª£c g·ªçi cu·ªëi c√πng sau khi all_indicators
    # ƒë√£ ƒë∆∞·ª£c populate, n√™n n·∫øu n√≥ ƒë∆∞·ª£c x·ª≠ l√Ω trong c√πng m·ªôt lu·ªìng, n√≥ s·∫Ω ho·∫°t ƒë·ªông.
    # V·∫•n ƒë·ªÅ l√† h√†m `build_daily_summary_report` g·ªçi `all_indicators.get` tr·ª±c ti·∫øp.
    # ƒê·ªÉ kh·∫Øc ph·ª•c, ta c·∫ßn ƒë·∫£m b·∫£o `all_indicators` l√† bi·∫øn to√†n c·ª•c ho·∫∑c ƒë∆∞·ª£c truy·ªÅn v√†o.
    # Trong tr∆∞·ªùng h·ª£p n√†y, v√¨ `all_indicators` ƒë∆∞·ª£c t·∫°o v√† s·ª≠ d·ª•ng trong `run_paper_trade_session`,
    # c√°ch t·ªët nh·∫•t l√† truy·ªÅn n√≥ nh∆∞ m·ªôt tham s·ªë cho `build_daily_summary_report` n·∫øu c·∫ßn,
    # ho·∫∑c t√≠nh to√°n l·∫°i `current_price_info` trong h√†m ƒë√≥.
    # T·∫°m th·ªùi, t√¥i s·∫Ω gi·ªØ nguy√™n ƒë·ªÉ ph√π h·ª£p v·ªõi c·∫•u tr√∫c ban ƒë·∫ßu, nh∆∞ng ƒë√¢y l√† ƒëi·ªÉm c·∫ßn l∆∞u √Ω.

    # Kh·ªüi t·∫°o all_indicators r·ªóng n·∫øu kh√¥ng s·∫Ω g·∫∑p l·ªói NameError khi ch·∫°y build_daily_summary_report
    # (n·∫øu n√≥ ƒë∆∞·ª£c g·ªçi tr∆∞·ªõc khi all_indicators ƒë∆∞·ª£c g√°n trong run_paper_trade_session)
    # Tuy nhi√™n, trong lu·ªìng hi·ªán t·∫°i, n√≥ ƒë∆∞·ª£c g·ªçi sau, n√™n kh√¥ng ph·∫£i v·∫•n ƒë·ªÅ ch√≠nh,
    # nh∆∞ng vi·ªác thi·∫øu `import ta` l√† l·ªói c√∫ ph√°p r√µ r√†ng.
    all_indicators = {} # Kh·ªüi t·∫°o ƒë·ªÉ tr√°nh l·ªói NameError trong build_daily_summary_report n·∫øu n√≥ ƒë∆∞·ª£c g·ªçi

    run_paper_trade_session()
    log_message("====== ‚úÖ QU·∫¢N L√ù DANH M·ª§C (PAPER TRADE) K·∫æT TH√öC PHI√äN L√ÄM VI·ªÜC ‚úÖ ======")
