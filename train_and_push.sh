#!/usr/bin/env bash
set -euo pipefail

# ===== SCRIPT HU·∫§N LUY·ªÜN & TRI·ªÇN KHAI v9.0 - GI·∫¢I PH√ÅP ƒê∆†N GI·∫¢N NH·∫§T =====
# C·∫¨P NH·∫¨T:
# 1. X√ìA B·ªé HO√ÄN TO√ÄN t·∫•t c·∫£ c√°c b·ªô l·ªçc log ph·ª©c t·∫°p b√™n ngo√†i.
# 2. Ch·∫•p nh·∫≠n vi·ªác banner c·ªßa NVIDIA/TensorFlow s·∫Ω hi·ªÉn th·ªã ·ªü ƒë·∫ßu m·ªói t√°c v·ª•.
# 3. ƒê·∫£m b·∫£o 100% log hu·∫•n luy·ªán v√† DEBUG ƒë∆∞·ª£c gi·ªØ l·∫°i.
# 4. V·∫´n gi·ªØ c·ªù `--ipc=host` ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng.

# --- C·∫§U H√åNH ---
PROJECT_DIR="/home/tungn/ricealert"
IMAGE="rice-trainer:latest"
LOG_DIR="$PROJECT_DIR/log"
DATA_DIR="$PROJECT_DIR/data"
CONTAINER_NAME="rice-trainer-session"

# Th√¥ng tin VPS ƒë·ªÉ tri·ªÉn khai
VPS_USER="root"
VPS_IP="103.101.162.130"
VPS_REMOTE_PATH="/root/ricealert/"

# K·ªãch b·∫£n cho cron job
CRON_WEEKLY_INTERVALS="1h,4h"
CRON_MONTHLY_INTERVALS="1h,4h,1d"

# --- H√ÄM TH·ª∞C THI ---
run_training_process() {
    local debug_env="$1"
    local intervals_str="$2"

    echo "üßπ D·ªçn d·∫πp container '$CONTAINER_NAME' c≈© (n·∫øu c√≥)..."
    docker rm -f "$CONTAINER_NAME" >/dev/null 2>&1 || true

    LOGFILE="train_$(date +%F_%H-%M-%S).log"
    FULL_LOGFILE_PATH="$LOG_DIR/$LOGFILE"

    local symbols_line
    symbols_line=$(grep -E '^SYMBOLS=' "$PROJECT_DIR/.env" | head -n 1)
    local symbols_val=${symbols_line#*=}
    IFS=',' read -r -a SYMBOLS_ARR <<< "$symbols_val"
    IFS=',' read -r -a INTERVALS_ARR <<< "$intervals_str"

    echo "---"
    echo "üê≥ B·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán theo ch·∫ø ƒë·ªô C√î L·∫¨P TI·∫æN TR√åNH"
    echo "   - Symbols: ${SYMBOLS_ARR[@]}"
    echo "   - Intervals: ${INTERVALS_ARR[@]}"
    echo "   - Log s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o: $LOGFILE"
    echo "---"

    # V√≤ng l·∫∑p ch√≠nh
    for sym in "${SYMBOLS_ARR[@]}"; do
        for iv in "${INTERVALS_ARR[@]}"; do
            echo "--- [$(date --iso-8601=seconds)] B·∫Øt ƒë·∫ßu train: $sym - $iv ---" | tee -a "$FULL_LOGFILE_PATH"
            
            # ===== D√íNG L·ªÜNH G·ªêC, KH√îNG L·ªåC B√äN NGO√ÄI =====
            # Ch·ªâ g·ªçi python v√† ghi log, kh√¥ng c√≥ grep hay awk
            docker run --rm --gpus all \
              --ipc=host \
              --ulimit memlock=-1 --ulimit stack=67108864 \
              -v "$PROJECT_DIR":/app --user "$(id -u)":"$(id -g)" \
              -e DEBUG="$debug_env" \
              "$IMAGE" \
              python -u trainer.py "$sym" "$iv" 2>&1 | tee -a "$FULL_LOGFILE_PATH"
            
            echo "--- [$(date --iso-8601=seconds)] K·∫øt th√∫c train: $sym - $iv. B·ªô nh·ªõ ƒë√£ ƒë∆∞·ª£c gi·∫£i ph√≥ng. ---" | tee -a "$FULL_LOGFILE_PATH"
            echo "" | tee -a "$FULL_LOGFILE_PATH"
        done
    done

    echo "---"
    echo "‚úÖ To√†n b·ªô qu√° tr√¨nh hu·∫•n luy·ªán ƒë√£ ho√†n t·∫•t!"
    echo "üöÄ Chu·∫©n b·ªã tri·ªÉn khai th∆∞ m·ª•c 'data' l√™n VPS..."
    
    # ... (Ph·∫ßn scp gi·ªØ nguy√™n)
    if ssh "$VPS_USER@$VPS_IP" "rm -rf \"${VPS_REMOTE_PATH}data\""; then
        echo "    ‚úÖ X√≥a th√†nh c√¥ng."
        if scp -r "$DATA_DIR" "$VPS_USER@$VPS_IP:$VPS_REMOTE_PATH"; then
            echo "    ‚úÖ Tri·ªÉn khai th√†nh c√¥ng!"
        else
            echo "    ‚ö†Ô∏è L·ªñI: Kh√¥ng th·ªÉ copy 'data' l√™n VPS."
        fi
    else
        echo "‚ö†Ô∏è L·ªñI: Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi VPS."
    fi

    echo "üéâ TO√ÄN B·ªò QUY TR√åNH K·∫æT TH√öC. üéâ"
}


# --- ƒêI·ªÇM B·∫ÆT ƒê·∫¶U C·ª¶A SCRIPT ---
if [[ $# -gt 0 ]]; then
    case "$1" in
        weekly) run_training_process 0 "$CRON_WEEKLY_INTERVALS";;
        monthly) run_training_process 0 "$CRON_MONTHLY_INTERVALS";;
        *) echo "L·ªói: K·ªãch b·∫£n '$1' kh√¥ng ƒë∆∞·ª£c nh·∫≠n d·∫°ng."; exit 1;;
    esac
else
    read -rp "Nh·∫≠p c√°c khung th·ªùi gian mu·ªën train (vd: 1h,4h,1d): " INTERVALS_TO_TRAIN
    [[ -z "$INTERVALS_TO_TRAIN" ]] && { echo "L·ªói: B·∫°n ch∆∞a nh·∫≠p khung th·ªùi gian. Tho√°t."; exit 1; }
    echo "Ch·ªçn ch·∫ø ƒë·ªô ch·∫°y:"
    echo "  [1] RUN"
    echo "  [2] DEBUG"
    read -rp "Nh·∫≠p l·ª±a ch·ªçn [1-2]: " MODE_CHOICE
    DEBUG_ENV=0
    [[ "$MODE_CHOICE" == "2" ]] && DEBUG_ENV=1
    run_training_process "$DEBUG_ENV" "$INTERVALS_TO_TRAIN"
fi
