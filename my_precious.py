# -*- coding: utf-8 -*-
"""my_precious.py ‚Äì position advisor
Version: 5.1 (Pinnacle Build)
Date: 2025-07-03
Description: The Pinnacle Build. This version achieves the best of both worlds:
             It runs on the highly efficient, pre-calculating, and well-structured
             engine of v5.0 while generating the rich, detailed, and user-tuned
             message outputs of v4.1 for a superior user experience.
"""
import os
import json
import time
from datetime import datetime
from collections import Counter
from typing import List, Dict, Any, Tuple
import requests

from dotenv import load_dotenv

# These are assumed to be in the same directory or accessible via PYTHONPATH
from indicator import get_price_data, calculate_indicators
from signal_logic import check_signal

load_dotenv()
WEBHOOK_URL = os.getenv("DISCORD_PRECIOUS")

# ==============================================================================
# CONFIG & PATHS (FROM V5.0)
# ==============================================================================
BASE_DIR = "/root/ricealert"
COOLDOWN_STATE_PATH = os.path.join(BASE_DIR, "advisor_log/cooldown_state.json")
MARKET_CONTEXT_PATH = os.path.join(BASE_DIR, "ricenews/lognew/market_context.json")
TRADELOG_DIR = os.path.join(BASE_DIR, "trade/tradelog")
ADVISOR_DIR  = os.path.join(BASE_DIR, "advisor_log")
LOG_DIR      = os.path.join(ADVISOR_DIR, "log")
NEWS_DIR     = os.path.join(BASE_DIR, "ricenews/lognew")
AI_DIR       = os.path.join(BASE_DIR, "ai_logs")

os.makedirs(LOG_DIR, exist_ok=True)

ICON = {"PANIC_SELL":"üÜò","SELL":"üîª","AVOID":"‚õî",
        "HOLD":"üíé","WEAK_BUY":"üü¢","BUY":"üõí","STRONG_BUY":"üöÄ"}

# ==============================================================================
# NEWS & MARKET CONTEXT LOGIC (HYBRID V4.1 + V5.0)
# ==============================================================================
POSITIVE_NEWS_KEYWORDS = ["etf", "ni√™m y·∫øt", "listing", "adoption", "partnership", "approved", "upgrade", "launch", "mainnet", "burn"]
NEGATIVE_NEWS_KEYWORDS = ["ki·ªán", "hacker", "scam", "b·ªã ƒëi·ªÅu tra", "tether", "sec sues", "sec charges", "hack", "exploit", "lawsuit", "delist", "downtime", "outage"]
NEWS_KEYWORDS_BY_LEVEL = {
    "CRITICAL": ["will list", "etf approval", "halving", "fomc", "interest rate", "cpi", "war", "approved", "regulatory approval"],
    "WARNING": ["delist", "unlock", "hack", "exploit", "sec", "lawsuit", "regulation", "maintenance", "downtime", "outage", "b·ªã ƒëi·ªÅu tra", "ki·ªán"],
}

def analyze_market_trend(mc: dict) -> str:
    if not mc: return "NEUTRAL"
    up_score, down_score = 0, 0
    if mc.get('fear_greed', 50) > 68: up_score += 1
    elif mc.get('fear_greed', 50) < 35: down_score += 1
    if mc.get('btc_dominance', 50) > 55: up_score += 1
    elif mc.get('btc_dominance', 50) < 48: down_score += 1

    if up_score == 2: return "STRONG_UPTREND"
    if down_score == 2: return "STRONG_DOWNTREND"
    if up_score > down_score: return "UPTREND"
    if down_score > up_score: return "DOWNTREND"
    return "NEUTRAL"

def get_news_sentiment(title: str) -> str:
    lowered = title.lower()
    if any(keyword in lowered for keyword in POSITIVE_NEWS_KEYWORDS): return "positive"
    if any(keyword in lowered for keyword in NEGATIVE_NEWS_KEYWORDS): return "negative"
    return "neutral"

def generate_news_and_context_block(symbol: str, market_context: dict) -> Tuple[str, int]:
    """
    This function replicates the exact output block and news_factor logic from v4.1.
    """
    today_path = os.path.join(NEWS_DIR, f"{datetime.now().strftime('%Y-%m-%d')}_news_signal.json")
    news_data = load_json(today_path, [])
    tag = symbol.lower().replace("usdt", "").strip()

    trend = analyze_market_trend(market_context)
    mc_text = (f"üåê **B·ªëi c·∫£nh th·ªã tr∆∞·ªùng (Trend: {trend})** | "
               f"Fear & Greed: `{market_context.get('fear_greed', 'N/A')}` | BTC.D: `{market_context.get('btc_dominance', 'N/A')}%`")

    news_block, news_factor = "‚ö™ Hi·ªán ch∆∞a c√≥ tin t·ª©c ƒë√°ng ch√∫ √Ω.", 0
    coin_news = [n for n in news_data if n.get("category_tag", "").lower() == tag]
    if coin_news:
        news_block = "üóûÔ∏è **Tin t·ª©c li√™n quan:**\n" + "\n".join(f"- [{n['source_name']}] {n['title']} ‚Üí {n['suggestion'].split('üëâ')[0].strip()}" for n in coin_news[:2])
        news_factor = 1 if get_news_sentiment(coin_news[0]['title']) == 'positive' else -1 if get_news_sentiment(coin_news[0]['title']) == 'negative' else 0
    else:
        # Fallback to macro news if no coin-specific news, as per v4.1 logic
        macro_news = [n for n in news_data if n.get("category_tag") in {"macro", "general"} and any(kw in n.get('title', '').lower() for kw in NEWS_KEYWORDS_BY_LEVEL.get("CRITICAL", []) + NEWS_KEYWORDS_BY_LEVEL.get("WARNING", []))]
        if macro_news:
            news_block = "üåê **Tin vƒ© m√¥ ƒë√°ng ch√∫ √Ω:**\n" + "\n".join(f"- [{n['source_name']}] {n['title']} ‚Üí {n['suggestion'].split('üëâ')[0].strip()}" for n in macro_news[:2])
            news_factor = 1 if get_news_sentiment(macro_news[0]['title']) == 'positive' else -1 if get_news_sentiment(macro_news[0]['title']) == 'negative' else 0

    full_block = f"{mc_text}\n{news_block}"
    return full_block, news_factor

# ==============================================================================
# UTILITY FUNCTIONS (FROM V5.0 + V4.1)
# ==============================================================================
def load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f: return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError): return default

def write_json(path: str, data) -> None:
    with open(path, "w", encoding="utf-8") as f: json.dump(data, f, indent=2, ensure_ascii=False)

def log_to_txt(msg: str) -> None:
    log_file = os.path.join(LOG_DIR, f"{datetime.now().strftime('%Y-%m-%d')}.txt")
    with open(log_file, "a", encoding='utf-8') as f:
        f.write(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}\n")

def send_discord_alert(msg: str) -> None:
    if not WEBHOOK_URL: return
    for i in range(0, len(msg), 1950):
        try:
            requests.post(WEBHOOK_URL, json={"content": msg[i:i+1950]}, timeout=10).raise_for_status()
            time.sleep(1)
        except Exception as e: log_to_txt(f"[ERROR] Discord alert failed: {e}")

def calc_held_hours(start_str: str) -> float:
    try:
        t = datetime.strptime(start_str, "%Y-%m-%d %H:%M:%S")
        return round((datetime.now() - t).total_seconds() / 3600, 1)
    except: return 0.0

def should_send_overview(state: dict) -> bool:
    last_ts = state.get("last_overview_timestamp", 0)
    now_dt = datetime.now()
    target_times = [now_dt.replace(hour=8, minute=2, second=0, microsecond=0),
                    now_dt.replace(hour=20, minute=2, second=0, microsecond=0)]
    for target_dt in target_times:
        if now_dt.timestamp() >= target_dt.timestamp() and last_ts < target_dt.timestamp():
            return True
    return False

def parse_trade_plan(plan_str: str) -> dict:
    try: e, t, s = map(float, plan_str.split("/")); return {"entry": e, "tp": t, "sl": s}
    except Exception: return {"entry": 0, "tp": 0, "sl": 0}

# ==============================================================================
# MAIN LOGIC & EXECUTION (ENGINE FROM V5.0)
# ==============================================================================
def main():
    print(f"üíé MyPrecious Advisor v5.1 (Pinnacle Build) starting at {datetime.now()}...")
    trades = []
    for fname in sorted(os.listdir(TRADELOG_DIR)):
        if fname.endswith(".json"):
            trades.extend([t for t in load_json(os.path.join(TRADELOG_DIR, fname), []) if t.get("status") == "open"])

    if not trades:
        print("‚úÖ No open trades found. Exiting.")
        return

    # T·ªêI ∆ØU H√ìA: Thu th·∫≠p v√† t√≠nh to√°n ch·ªâ b√°o M·ªòT L·∫¶N (Core of v5.0)
    unique_pairs = set((trade['symbol'], trade['interval']) for trade in trades)
    for trade in trades:
        for tf in ["1h", "4h", "1d"]:
            unique_pairs.add((trade['symbol'], tf))
    
    print(f"[1/3] Pre-calculating indicators for {len(unique_pairs)} unique pairs...")
    all_indicators = {sym: {} for sym, _ in unique_pairs}
    for sym, itv in unique_pairs:
        try:
            df_raw = get_price_data(sym, itv)
            if not df_raw.empty:
                indicators = calculate_indicators(df_raw, sym, itv)
                all_indicators[sym][itv] = indicators
        except Exception as e:
            log_to_txt(f"Error pre-calculating for {sym}-{itv}: {e}")
    print("‚úÖ Pre-calculation complete.")

    # T·∫£i state v√† context m·ªôt l·∫ßn
    cooldown_state = load_json(COOLDOWN_STATE_PATH, {})
    market_context = load_json(MARKET_CONTEXT_PATH, {})
    now = datetime.now()
    advisor_file = os.path.join(ADVISOR_DIR, f"{now.strftime('%Y-%m-%d')}.json")
    advisor_log = load_json(advisor_file, [])
    advisor_map = {t["id"]: t for t in advisor_log}
    overview_data = []
    level_counter = Counter()

    print(f"\n[2/3] Analyzing {len(trades)} open positions...")
    for trade in trades:
        try:
            trade_id, symbol, interval = trade["id"], trade["symbol"], trade["interval"]
            
            indicators = all_indicators.get(symbol, {}).get(interval)
            if not indicators:
                log_to_txt(f"Skipping {trade_id} - {symbol} due to missing indicator data.")
                continue

            real_entry = trade.get("real_entry") or parse_trade_plan(trade["trade_plan"])["entry"]
            price_now = indicators['price']
            pnl = round((price_now - real_entry) / real_entry * 100, 2) if real_entry else 0
            
            market_trend = analyze_market_trend(market_context)
            news_and_context_text, news_factor = generate_news_and_context_block(symbol, market_context)
            
            # Code m·ªõi ƒë√£ ƒë∆∞·ª£c s·ª≠a
            ml_data = load_json(os.path.join(AI_DIR, f"{symbol}_{interval}.json"), {})

            # <<< B·∫ÆT ƒê·∫¶U PH·∫¶N S·ª¨A L·ªñI >>>
            # B·ªï sung c√°c d·ªØ li·ªáu RSI t·ª´ c√°c khung th·ªùi gian kh√°c m√† check_signal y√™u c·∫ßu
            indicators["rsi_1h"] = all_indicators.get(symbol, {}).get("1h", {}).get("rsi_14", 50)
            indicators["rsi_4h"] = all_indicators.get(symbol, {}).get("4h", {}).get("rsi_14", 50)
            indicators["rsi_1d"] = all_indicators.get(symbol, {}).get("1d", {}).get("rsi_14", 50)
            # Th√™m c·∫£ interval ƒë·ªÉ ƒë·∫£m b·∫£o h√†m check_signal c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin nh·∫•t
            indicators["interval"] = interval

            # B√¢y gi·ªù m·ªõi g·ªçi check_signal v·ªõi ƒë·∫ßy ƒë·ªß d·ªØ li·ªáu
            signal_level, signal_reason = check_signal(indicators)

            # C·∫≠p nh·∫≠t k·∫øt qu·∫£ v√†o t·ª´ ƒëi·ªÉn. L∆∞u √Ω: `tag` ƒë√£ ƒë∆∞·ª£c h√†m check_signal t·ª± ƒë·ªông c·∫≠p nh·∫≠t v√†o `indicators`
            indicators.update({"signal_level": signal_level, "signal_reason": signal_reason, "price": price_now})
            # <<< K·∫æT TH√öC PH·∫¶N S·ª¨A L·ªñI >>>
            
            # --- C√îNG TH·ª®C ƒê√ÅNH GI√Å T·ªîNG H·ª¢P (FROM V4.1/V5.0) ---
            tech_score = calculate_technical_score(indicators, market_trend)
            tech_scaled = (tech_score / 10.0) * 2 - 1

            prob_buy = ml_data.get('prob_buy', 50.0)
            prob_sell = ml_data.get('prob_sell', 0.0)
            ai_skew = (prob_buy - prob_sell) / 100.0
            
            pnl_norm = max(-1.0, min(1.0, pnl / 10.0))

            market_score_val = {"STRONG_UPTREND": 1.0, "UPTREND": 0.5, "STRONG_DOWNTREND": -1.0, "DOWNTREND": -0.5}.get(market_trend, 0.0)
            
            # Tr·ªçng s·ªë: 40% K·ªπ thu·∫≠t, 30% AI, 15% Th·ªã tr∆∞·ªùng, 10% PnL, 5% Tin t·ª©c
            final_rating = (0.40 * tech_scaled +
                            0.30 * ai_skew +
                            0.15 * market_score_val +
                            0.10 * pnl_norm +
                            0.05 * news_factor) # news_factor t·ª´ v4.1 l√† -1, 0, ho·∫∑c 1
            
            final_rating_normalized = min(1.0, max(0.0, (final_rating + 1) / 2))
            
            level_key_map = [(0.20, "PANIC_SELL"), (0.35, "SELL"), (0.45, "AVOID"), (0.55, "HOLD"), (0.65, "WEAK_BUY"), (0.80, "BUY"), (1.01, "STRONG_BUY")]
            level_key = next((lvl for thr, lvl in level_key_map if final_rating_normalized < thr), "AVOID")
            indicators["level_key"] = level_key # C·∫ßn cho c√°c h√†m generate block
            
            overview_data.append({
                **trade, 
                "pnl": pnl, 
                "score": tech_score, 
                "ml_score": prob_buy, 
                "final_rating": final_rating_normalized, 
                "level_key": level_key, 
                "price_now": price_now, 
                "real_entry": real_entry,
                "market_trend": market_trend, # <<< TH√äM D√íNG N√ÄY
                "news_factor": news_factor   # <<< V√Ä D√íNG N√ÄY
            })
            level_counter[level_key] += 1

            prev = advisor_map.get(trade_id, {})
            pnl_change_significant = abs(prev.get("pnl_percent", 0) - pnl) > 3.0
            rating_change_significant = abs(prev.get("final_rating", 0) - final_rating_normalized) > 0.08
            
            if pnl_change_significant or rating_change_significant:
                alert_msg = build_alert_message(trade, indicators, pnl, tech_score, ml_data, news_factor, final_rating_normalized, news_and_context_text, all_indicators, market_context)
                send_discord_alert(alert_msg)
                log_to_txt(f"SEND alert for {symbol} ({interval}) - Level: {level_key}")
            
            advisor_map[trade_id] = {"id": trade_id, "pnl_percent": pnl, "final_rating": final_rating_normalized}

        except Exception as e:
            log_to_txt(f"[CRITICAL ERROR] Failed to process trade {trade.get('id', 'N/A')}: {e}")
            import traceback
            log_to_txt(traceback.format_exc())

    print("\n[3/3] Generating overview report if needed...")
    if should_send_overview(cooldown_state) and overview_data:
        overview_msg = build_overview_report(overview_data, level_counter, now)
        send_discord_alert(overview_msg)
        cooldown_state["last_overview_timestamp"] = now.timestamp()
        print("‚úÖ Overview report sent.")

    write_json(advisor_file, list(advisor_map.values()))
    write_json(COOLDOWN_STATE_PATH, cooldown_state)
    print(f"‚úÖ Finished processing {len(trades)} open trades.")

# ==============================================================================
# HELPER FUNCTIONS FOR BUILDING BLOCKS (OUTPUT FROM V4.1)
# ==============================================================================
def round_num(val, d=2) -> any:
    return round(val, d) if isinstance(val, (float, int)) else val

def format_price(price):
    if not isinstance(price, (int, float)): return price
    return f"{price:.8f}" if price < 0.1 else f"{price:.4f}"

def calculate_technical_score(ind: dict, market_trend: str) -> int:
    # This is identical to calc_score from v4.1
    score = 5.0
    if ind.get("trend_alignment_bonus"): score += 1.0
    rsi = ind.get("rsi_14", 50)
    if rsi < 30 or rsi > 70: score += 1.0
    if ind.get("macd_cross") == "bullish": score += 0.5
    elif ind.get("macd_cross") == "bearish": score -= 0.5
    cmf = ind.get("cmf", 0)
    if cmf > 0.05: score += 1.0
    elif cmf < -0.05: score -= 1.0
    if ind.get("adx", 0) > 25: score += 1.0
    if ind.get("rsi_divergence") == "bullish": score += 1.5
    elif ind.get("rsi_divergence") == "bearish": score -= 1.5
    tag = ind.get("tag", "")
    is_buy_signal = tag in ["buy_high", "buy_low", "canbuy"]
    is_sell_signal = tag in ["sell_high", "sell_low"]
    if "UPTREND" in market_trend:
        if is_buy_signal: score += 1.5
        if is_sell_signal: score -= 1.0
    elif "DOWNTREND" in market_trend:
        if is_buy_signal: score -= 2.0
        if is_sell_signal: score += 1.5
    return int(min(max(score, 0), 10))

def generate_indicator_text_block(ind: dict) -> str:
    lines = [
        f"Gi√° hi·ªán t·∫°i: {format_price(ind['price'])}  |  Entry {format_price(ind['trade_plan']['entry'])}  |  TP {format_price(ind['trade_plan']['tp'])}  |  SL {format_price(ind['trade_plan']['sl'])}",
        f"üìà EMA20: {round_num(ind['ema_20'])}    üí™ RSI14: {round_num(ind['rsi_14'])} ‚Üí {'qu√° mua' if ind['rsi_14']>70 else 'qu√° b√°n' if ind['rsi_14']<30 else 'trung t√≠nh'}",
        f"üìâ MACD: {round_num(ind['macd_line'],3)} vs Signal: {round_num(ind['macd_signal'],3)} ‚Üí {ind['macd_cross']}",
        f"üìä ADX: {round_num(ind['adx'],1)} ‚Üí {'c√≥ trend' if ind['adx']>20 else 'y·∫øu'}",
        f"üîä Volume: {int(ind['volume']):,} / MA20: {int(ind['vol_ma20']):,}",
        f"üí∏ CMF: {round_num(ind['cmf'],3)}",
        f"üåÄ Fibo 0.618: {round_num(ind.get('fib_0_618', 0),4)}",
        f"‚¨ÜÔ∏è Trend c·ª•c b·ªô: {ind.get('trend', 'N/A')}",
    ]
    if ind.get("signal_level") and ind.get("signal_reason"):
        lines.append(f"üîπ T√≠n hi·ªáu k·ªπ thu·∫≠t: {ind['signal_level']} ({ind.get('tag', 'N/A')}) ‚Äì {ind['signal_reason']}")
    return "\n".join(lines)

def generate_summary_block(symbol, interval, pnl, score, ml_data, news_factor, final_rating_normalized):
    tech_desc = "Th·ªã tr∆∞·ªùng kh√¥ng r√µ r√†ng, c·∫ßn quan s√°t th√™m"
    if score >= 7: tech_desc = "T√≠n hi·ªáu k·ªπ thu·∫≠t ·ªßng h·ªô"
    elif score <= 3: tech_desc = "T√≠n hi·ªáu k·ªπ thu·∫≠t y·∫øu, r·ªßi ro cao"

    ai_desc = "Kh√¥ng c√≥ d·ªØ li·ªáu AI"
    if ml_data:
        prob_buy = ml_data.get('prob_buy', 0)
        ai_desc = f"üöß {ml_data.get('level', 'AVOID').replace('_', ' ')} ‚Äì ML d·ª± ƒëo√°n: {ml_data.get('pct', 0):.2f}% (x√°c su·∫•t mua: {prob_buy:.1f}%)"

    news_desc = "T√≠ch c·ª±c" if news_factor > 0 else "Ti√™u c·ª±c" if news_factor < 0 else "Trung l·∫≠p"
    return (f"üìå **T·ªïng h·ª£p ƒë√°nh gi√°:** {symbol} ({interval}) | PnL: {pnl:.2f}% | Final: {final_rating_normalized:.1%}\n"
            f"üîπ **K·ªπ thu·∫≠t:** Score {score}/10 ‚Üí {tech_desc}\n"
            f"üîπ **AI:** {ai_desc}\n"
            f"üîπ **Tin t·ª©c:** {news_desc}")

def generate_mta_block(extra_tf: dict) -> str:
    if not extra_tf: return ""
    lines = ["üìä **Ph√¢n t√≠ch ƒêa Khung th·ªùi gian:**"]
    for tf, tfdata in sorted(extra_tf.items()):
        icon = "üîº" if tfdata.get("trend") == "uptrend" else "üîΩ" if tfdata.get("trend") == "downtrend" else "‚ÜîÔ∏è"
        ai_bias = "tƒÉng" if tfdata.get("ai_bias") == "bullish" else "gi·∫£m" if tfdata.get("ai_bias") == "bearish" else "trung l·∫≠p"
        lines.append(f"{icon} **{tf}**: Trend {tfdata.get('trend', '?'):<9} | RSI: {tfdata.get('rsi', 0):.1f} | AI: {ai_bias}")
    return "\n".join(lines)

def generate_final_strategy_block(pnl: float, score: int, ml_data: dict, news_factor: int, ind: dict, market_context: dict) -> str:
    reco, reasons = [], []
    market_trend = analyze_market_trend(market_context)
    lvl = ind.get("level_key", "")
    if lvl == "PANIC_SELL": reco.append("üîª **∆Øu ti√™n h√†ng ƒë·∫ßu l√† tho√°t l·ªánh NGAY L·∫¨P T·ª®C ƒë·ªÉ b·∫£o to√†n v·ªën.**")
    elif lvl == "SELL": reco.append("üîª **T√≠n hi·ªáu ti√™u c·ª±c chi·∫øm ∆∞u th·∫ø, c√¢n nh·∫Øc gi·∫£m v·ªã th·∫ø ho·∫∑c ch·ªët l·ªùi/c·∫Øt l·ªó.**")
    elif lvl == "AVOID": reco.append("‚õî **Th·ªã tr∆∞·ªùng r·ªßi ro, kh√¥ng r√µ r√†ng ‚Äì n√™n ƒë·ª©ng ngo√†i quan s√°t.**")
    elif lvl == "HOLD": reco.append("üíé **Gi·ªØ l·ªánh hi·ªán t·∫°i.** Ch∆∞a n√™n m·ªü th√™m v·ªã th·∫ø khi t√≠n hi·ªáu ch∆∞a ƒë·ªß m·∫°nh.")
    elif lvl == "WEAK_BUY": reco.append("üü¢ **C√≥ th·ªÉ mua thƒÉm d√≤ v·ªõi kh·ªëi l∆∞·ª£ng nh·ªè.** C·∫ßn qu·∫£n l√Ω r·ªßi ro ch·∫∑t ch·∫Ω.")
    elif lvl == "BUY": reco.append("üõí **T√≠n hi·ªáu MUA ƒëang ƒë∆∞·ª£c c·ªßng c·ªë.** C√≥ th·ªÉ xem x√©t v√†o l·ªánh t·∫°i c√°c v√πng h·ªó tr·ª£.")
    elif lvl == "STRONG_BUY": reco.append("üöÄ **T·∫•t c·∫£ c√°c y·∫øu t·ªë ƒë·ªÅu ·ªßng h·ªô xu h∆∞·ªõng tƒÉng.** C√≥ th·ªÉ t·ª± tin gia tƒÉng v·ªã th·∫ø.")

    reasons.append(f"**C·∫•p ƒë·ªô L·ªánh:** {lvl} (d·ª±a tr√™n ƒëi·ªÉm t·ªïng h·ª£p)")
    reasons.append(f"**K·ªπ thu·∫≠t:** ƒêi·ªÉm {score}/10. {'T√≠n hi·ªáu t√≠ch c·ª±c.' if score >= 7 else 'T√≠n hi·ªáu y·∫øu/ti√™u c·ª±c.' if score <= 3 else 'T√≠n hi·ªáu trung l·∫≠p.'}")
    reasons.append(f"**B·ªëi c·∫£nh Th·ªã tr∆∞·ªùng:** {market_trend}. {'ƒê√¢y l√† y·∫øu t·ªë h·ªó tr·ª£ m·∫°nh m·∫Ω.' if 'UPTREND' in market_trend else 'ƒê√¢y l√† y·∫øu t·ªë r·ªßi ro l·ªõn.' if 'DOWNTREND' in market_trend else 'Th·ªã tr∆∞·ªùng ch∆∞a c√≥ xu h∆∞·ªõng r√µ r√†ng.'}")

    if ml_data:
        prob_buy = ml_data.get('prob_buy', 0)
        reasons.append(f"**AI:** D·ª± b√°o c√≥ xu h∆∞·ªõng {'tƒÉng' if prob_buy >= 60 else 'gi·∫£m' if prob_buy <= 40 else 'trung l·∫≠p'} (x√°c su·∫•t mua {prob_buy:.1f}%).")

    if news_factor != 0: reasons.append(f"**Tin t·ª©c:** C√≥ y·∫øu t·ªë tin t·ª©c {'t√≠ch c·ª±c' if news_factor > 0 else 'ti√™u c·ª±c'} c·∫ßn l∆∞u √Ω.")

    summary_map = { "UPTREND": "b·ª©c tranh chung ƒëang r·∫•t t√≠ch c·ª±c.", "DOWNTREND": "r·ªßi ro t·ª´ th·ªã tr∆∞·ªùng chung l√† r·∫•t l·ªõn.", "NEUTRAL": "th·ªã tr∆∞·ªùng chung ƒëang ƒëi ngang, c·∫ßn t√≠n hi·ªáu r√µ r√†ng h∆°n t·ª´ ch√≠nh coin." }
    summary_text = f"K·∫øt h·ª£p c√°c y·∫øu t·ªë, {summary_map.get(market_trend, '...')} T√≠n hi·ªáu {lvl} n√™n ƒë∆∞·ª£c xem x√©t trong b·ªëi c·∫£nh n√†y."

    out = [f"üß† **Chi·∫øn l∆∞·ª£c cu·ªëi c√πng:**"]
    out.extend([f"‚Ä¢ {line}" for line in reco])
    out.append("üìå **Ph√¢n t√≠ch chi ti·∫øt:**")
    out.extend([f"‚Äì {r}" for r in reasons])
    out.append(f"üìâ **T·ªïng k·∫øt:** {summary_text}")
    return "\n".join(out)

def build_alert_message(trade, indicators, pnl, tech_score, ml_data, news_factor, final_rating_normalized, news_and_context_text, all_indicators, market_context):
    symbol, interval, trade_id = trade['symbol'], trade['interval'], trade['id']
    real_entry = trade.get('real_entry') or parse_trade_plan(trade["trade_plan"])["entry"]
    level_key = indicators["level_key"]
    
    # 1. Title Block
    title_block = f"{ICON.get(level_key, ' ')} [{level_key.replace('_', ' ')}] ƒê√°nh gi√° l·ªánh: {symbol} ({interval})"
    
    # 2. Info Block (from v4.1)
    info_block = (f"üìå ID: {trade_id}  {symbol}  {interval}\n"
                  f"üìÜ In time: {trade.get('in_time')}  |  ƒê√£ gi·ªØ: {calc_held_hours(trade.get('in_time'))} h  |  RealEntry: {real_entry}\n"
                  f"üí∞ PnL: {round(trade.get('amount', 1000) * pnl / 100, 1):.1f} USD ({pnl:.2f}%)  |  üì¶ {round(trade.get('amount', 1000)/real_entry, 2)}  |  üíµ {round(trade.get('amount', 1000) + trade.get('amount', 1000) * pnl / 100, 1)}/{trade.get('amount', 1000):.1f}")

    # 3. Indicator Text Block (from v4.1)
    indicators["trade_plan"] = parse_trade_plan(trade['trade_plan'])
    ind_text_block = generate_indicator_text_block(indicators)

    # 4. Summary Block (from v4.1)
    summary_block = generate_summary_block(symbol, interval, pnl, tech_score, ml_data, news_factor, final_rating_normalized)

    # 5. MTA Block (from v4.1)
    extra_tf = {}
    for tf in ["1h", "4h", "1d"]:
        if tf == interval: continue
        ind_tf = all_indicators.get(symbol, {}).get(tf)
        if ind_tf:
            ai_path_tf = os.path.join(AI_DIR, f"{symbol}_{tf}.json")
            ml_tf_prob_buy = load_json(ai_path_tf, {}).get('prob_buy', 0)
            ai_bias = "bullish" if ml_tf_prob_buy >= 60 else "bearish" if ml_tf_prob_buy <= 40 else "neutral"
            extra_tf[tf] = {"rsi": ind_tf["rsi_14"], "trend": ind_tf["trend"], "ai_bias": ai_bias}
    mta_block = generate_mta_block(extra_tf)

    # 6. Final Strategy Block (from v4.1)
    final_strategy_block = generate_final_strategy_block(pnl, tech_score, ml_data, news_factor, indicators, market_context)
    
    # Assemble the final message in the v4.1 order
    return "\n\n".join(filter(None, [
        title_block, 
        info_block, 
        ind_text_block, 
        summary_block, 
        news_and_context_text, # This variable now contains the full block from our new function
        mta_block, 
        final_strategy_block
    ]))

def build_overview_report(overview_data, level_counter, now):
    # This report format is also modeled after v4.1's detailed per-trade lines
    total_start = sum(t.get("amount", 1000) for t in overview_data)
    total_pnl_usd = sum(t.get("amount", 1000) * t["pnl"] / 100 for t in overview_data)

    lv_counts = ", ".join(f"{ICON[k]}{v}" for k, v in sorted(level_counter.items(), key=lambda item: list(ICON.keys()).index(item[0])))
    pnl_by_level = {lvl: sum(t.get("amount", 1000) * t["pnl"] / 100 for t in overview_data if t["level_key"] == lvl) for lvl in level_counter}
    pnl_lines = ", ".join(f"{ICON[k]}{v:.1f}$" for k, v in sorted(pnl_by_level.items(), key=lambda item: list(ICON.keys()).index(item[0])))

    header  = f"üìä **T·ªïng quan danh m·ª•c {now:%d-%m %H:%M}**\n"
    header += f"L·ªánh: {len(overview_data)} | PnL T·ªïng: {total_pnl_usd:+.1f}$ ({(total_pnl_usd/total_start*100 if total_start else 0):+.2f}%)\n"
    header += f"Ph√¢n b·ªï c·∫•p: {lv_counts}\n"
    header += f"PnL theo c·∫•p: {pnl_lines}"

    overview_lines = []
    for t in sorted(overview_data, key=lambda x: x.get('final_rating', 0)):
        line = (f"üìå **{t['symbol']} ({t['interval']})** | "
                f"PnL: {t['pnl']:+.2f}% | "
                f"Entry: {t.get('real_entry', 0)} | "
                f"Hi·ªán t·∫°i: {t['price_now']}\n"
                # <<< S·ª¨A L·∫†I D√íNG N√ÄY ƒê·ªÇ HI·ªÇN TH·ªä ƒê·∫¶Y ƒê·ª¶ >>>
                f"üß† T: {t['score']}/10 | AI: {t['ml_score']:.0f}% | Mkt: {t.get('market_trend', 'N/A').replace('_', ' ')} | News: {t.get('news_factor', 0):+g} | **Final: {t['final_rating']:.1%}** {ICON.get(t['level_key'], ' ')}")
        overview_lines.append(line)

    return header + "\n" + "-"*50 + "\n" + "\n".join(overview_lines)

if __name__ == "__main__":
    main()
