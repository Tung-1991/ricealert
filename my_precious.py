# my_precious.py
# -*- coding: utf-8 -*-
"""my_precious.py ‚Äì position advisor
Version: 6.0 (Integrated & Streamlined)
Date: 2025-07-04
Description: This version is fully integrated with the main system. It no longer
             re-calculates indicators or scores. Instead, it leverages the
             powerful `trade_advisor.get_advisor_decision` to get a unified score,
             making it consistent, maintainable, and smarter. The output structure
             is preserved but now powered by the new, centralized logic.
"""
import os
import json
import time
import sys
from datetime import datetime
from collections import Counter
from typing import List, Dict, Any, Tuple
import requests

from dotenv import load_dotenv

# --- THAY ƒê·ªîI 1: Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n v√† Import ---
# Gi·ªØ nguy√™n ph·∫ßn thi·∫øt l·∫≠p sys.path ƒë·ªÉ ƒë·∫£m b·∫£o import ho·∫°t ƒë·ªông
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
sys.path.append(BASE_DIR)
sys.path.append(os.path.join(BASE_DIR, "ricenews"))

# Import tr·ª±c ti·∫øp c√°c module c·∫ßn thi·∫øt t·ª´ h·ªá th·ªëng
from indicator import get_price_data, calculate_indicators # S·∫Ω d√πng h√†m g·ªëc
from trade_advisor import get_advisor_decision, FULL_CONFIG # ƒê√¢y l√† "b·ªô n√£o" m·ªõi!
from signal_logic import check_signal # V·∫´n c·∫ßn ƒë·ªÉ hi·ªÉn th·ªã l√Ω do c·ªßa t√≠n hi·ªáu k·ªπ thu·∫≠t

load_dotenv()
WEBHOOK_URL = os.getenv("DISCORD_PRECIOUS")

# ==============================================================================
# CONFIG & PATHS (Gi·ªØ nguy√™n)
# ==============================================================================
COOLDOWN_STATE_PATH = os.path.join(BASE_DIR, "advisor_log/cooldown_state.json")
TRADELOG_DIR = os.path.join(BASE_DIR, "trade/tradelog")
ADVISOR_DIR  = os.path.join(BASE_DIR, "advisor_log")
LOG_DIR      = os.path.join(ADVISOR_DIR, "log")
AI_DIR       = os.path.join(BASE_DIR, "ai_logs")
NEWS_DIR     = os.path.join(BASE_DIR, "ricenews/lognew")

os.makedirs(LOG_DIR, exist_ok=True)

ICON = {"PANIC_SELL":"üÜò","SELL":"üîª","AVOID":"‚õî",
        "HOLD":"üíé","WEAK_BUY":"üü¢","BUY":"üõí","STRONG_BUY":"üöÄ"}

# ==============================================================================
# LO·∫†I B·ªé C√ÅC H√ÄM TR√ôNG L·∫∂P
# ==============================================================================
# ### THAY ƒê·ªîI 2: LO·∫†I B·ªé HO√ÄN TO√ÄN C√ÅC H√ÄM SAU ƒê√ÇY ###
# - `calculate_indicators`: S·∫Ω import v√† d√πng b·∫£n g·ªëc t·ª´ `indicator.py`.
# - `analyze_market_trend`: Logic n√†y ƒë√£ c√≥ trong `trade_advisor.py`.
# - `get_news_sentiment`: Logic n√†y ƒë√£ c√≥ trong `trade_advisor.py`.
# - `generate_news_and_context_block`: S·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng output t·ª´ `trade_advisor`.
# - `calculate_technical_score`: S·∫Ω d√πng ƒëi·ªÉm `tech_score` t·ª´ `trade_advisor`.
# ==============================================================================

# ==============================================================================
# UTILITY FUNCTIONS (Gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi)
# ==============================================================================
def load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f: return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError): return default

def write_json(path: str, data) -> None:
    with open(path, "w", encoding="utf-8") as f: json.dump(data, f, indent=2, ensure_ascii=False)

def log_to_txt(msg: str) -> None:
    log_file = os.path.join(LOG_DIR, f"{datetime.now().strftime('%Y-%m-%d')}.txt")
    with open(log_file, "a", encoding='utf-8') as f:
        f.write(f"[{datetime.now().strftime('%H:%M:%S')}] {msg}\n")

def send_discord_alert(msg: str) -> None:
    if not WEBHOOK_URL: return
    for i in range(0, len(msg), 1950):
        try:
            requests.post(WEBHOOK_URL, json={"content": msg[i:i+1950]}, timeout=10).raise_for_status()
            time.sleep(1)
        except Exception as e: log_to_txt(f"[ERROR] Discord alert failed: {e}")

def calc_held_hours(start_str: str) -> float:
    try:
        t = datetime.strptime(start_str, "%Y-%m-%d %H:%M:%S")
        return round((datetime.now() - t).total_seconds() / 3600, 1)
    except: return 0.0

def should_send_overview(state: dict) -> bool:
    last_ts = state.get("last_overview_timestamp", 0)
    now_dt = datetime.now()
    target_times = [now_dt.replace(hour=8, minute=2, second=0, microsecond=0),
                    now_dt.replace(hour=20, minute=2, second=0, microsecond=0)]
    for target_dt in target_times:
        if now_dt.timestamp() >= target_dt.timestamp() and last_ts < target_dt.timestamp():
            return True
    return False

def parse_trade_plan(plan_str: str) -> dict:
    try: e, t, s = map(float, plan_str.split("/")); return {"entry": e, "tp": t, "sl": s}
    except Exception: return {"entry": 0, "tp": 0, "sl": 0}

# ==============================================================================
# MAIN LOGIC & EXECUTION
# ==============================================================================
def main():
    print(f"üíé MyPrecious Advisor v6.0 (Integrated) starting at {datetime.now()}...")
    trades = []
    for fname in sorted(os.listdir(TRADELOG_DIR)):
        if fname.endswith(".json"):
            trades.extend([t for t in load_json(os.path.join(TRADELOG_DIR, fname), []) if t.get("status") == "open"])

    if not trades:
        print("‚úÖ No open trades found. Exiting.")
        return

    # T·ªëi ∆∞u h√≥a: Thu th·∫≠p v√† t√≠nh to√°n ch·ªâ b√°o M·ªòT L·∫¶N (Logic n√†y v·∫´n r·∫•t t·ªët)
    unique_symbols = {trade['symbol'] for trade in trades}
    all_timeframes = ["1h", "4h", "1d"]

    print(f"[1/3] Pre-calculating indicators for {len(unique_symbols)} unique symbols...")
    all_indicators = {sym: {} for sym in unique_symbols}
    for sym in unique_symbols:
        for itv in all_timeframes:
            try:
                df_raw = get_price_data(sym, itv, limit=200) # L·∫•y 200 n·∫øn l√† ƒë·ªß
                if not df_raw.empty and len(df_raw) >= 50:
                    # D√πng h√†m calculate_indicators g·ªëc
                    indicators_data = calculate_indicators(df_raw, sym, itv)
                    all_indicators[sym][itv] = indicators_data
            except Exception as e:
                log_to_txt(f"Error pre-calculating for {sym}-{itv}: {e}")
    print("‚úÖ Pre-calculation complete.")

    # T·∫£i state v√† context m·ªôt l·∫ßn
    cooldown_state = load_json(COOLDOWN_STATE_PATH, {})
    now = datetime.now()
    advisor_file = os.path.join(ADVISOR_DIR, f"{now.strftime('%Y-%m-%d')}.json")
    advisor_log = load_json(advisor_file, [])
    advisor_map = {t["id"]: t for t in advisor_log}
    overview_data = []
    level_counter = Counter()

    print(f"\n[2/3] Analyzing {len(trades)} open positions...")
    for trade in trades:
        try:
            trade_id, symbol, interval = trade["id"], trade["symbol"], trade["interval"]

            # L·∫•y d·ªØ li·ªáu ch·ªâ b√°o c·ªßa khung th·ªùi gian ch√≠nh
            indicators = all_indicators.get(symbol, {}).get(interval)
            if not indicators:
                log_to_txt(f"Skipping {trade_id} - {symbol}-{interval} due to missing indicator data.")
                continue

            # ### THAY ƒê·ªîI 3: G·ªåI TRADE ADVISOR ƒê·ªÇ L·∫§Y QUY·∫æT ƒê·ªäNH T·ªîNG H·ª¢P ###
            # G·∫Øn c√°c ch·ªâ b√°o ƒëa khung th·ªùi gian v√†o indicators ƒë·ªÉ check_signal b√™n trong get_advisor_decision c√≥ th·ªÉ s·ª≠ d·ª•ng
            for tf_key in ["1h", "4h", "1d"]:
                indicators[f"rsi_{tf_key}"] = all_indicators.get(symbol, {}).get(tf_key, {}).get("rsi_14", 50)

            # ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng nh·∫•t: g·ªçi b·ªô n√£o trung t√¢m
            # Ch√∫ng ta kh√¥ng c·∫ßn truy·ªÅn ai_data_override v√† context_override n·ªØa
            # v√¨ get_advisor_decision s·∫Ω t·ª± ƒë·ªông ƒë·ªçc ch√∫ng t·ª´ file
            advisor_decision = get_advisor_decision(symbol, interval, indicators, FULL_CONFIG)

            # L·∫•y t·∫•t c·∫£ th√¥ng tin c·∫ßn thi·∫øt t·ª´ quy·∫øt ƒë·ªãnh c·ªßa advisor
            base_score = advisor_decision.get("final_score", 5.0) # L∆∞u base_score tr∆∞·ªõc khi ƒëi·ªÅu ch·ªânh PnL
            tech_score = advisor_decision.get("tech_score", 5.0)
            ml_data = advisor_decision.get("ai_prediction", {})
            market_trend = advisor_decision.get("market_trend", "NEUTRAL")
            news_factor = advisor_decision.get("news_factor", 0.0)
            signal_details = advisor_decision.get("signal_details", {})
            full_indicators_from_advisor = advisor_decision.get("full_indicators", {})

            # T√≠nh to√°n c√°c th√¥ng tin ƒë·∫∑c th√π c·ªßa my_precious
            real_entry = trade.get("real_entry") or parse_trade_plan(trade["trade_plan"])["entry"]
            price_now = full_indicators_from_advisor.get('entry_price', full_indicators_from_advisor.get('price', 0))

            # --- LOGIC M·ªöI: T√çNH TO√ÅN ƒêI·ªÇM ƒêI·ªÄU CH·ªàNH PNL ---
            pnl = round((price_now - real_entry) / real_entry * 100, 2) if real_entry else 0

            # Chu·∫©n h√≥a PnL v·ªÅ kho·∫£ng [-1, 1]. Coi PnL 25% l√† m·ª©c t·ªëi ƒëa ƒë·ªÉ c√≥ ·∫£nh h∆∞·ªüng.
            # ƒêi·ªÅu n√†y c√≥ nghƒ©a l√† l·ªùi 25% hay 100% ƒë·ªÅu c√≥ t√°c ƒë·ªông nh∆∞ nhau.
            pnl_norm = max(-1.0, min(1.0, pnl / 25.0))

            # PnL c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t·ªëi ƒëa +/- 0.75 ƒëi·ªÉm tr√™n thang ƒëi·ªÉm 10.
            # ƒê√¢y l√† "tr·ªçng s·ªë" c·ªßa PnL. B·∫°n c√≥ th·ªÉ thay ƒë·ªïi con s·ªë 0.75 n√†y.
            PNL_ADJUSTMENT_WEIGHT = 0.75
            pnl_adjustment_score = pnl_norm * PNL_ADJUSTMENT_WEIGHT

            # T√≠nh ƒëi·ªÉm cu·ªëi c√πng c·ªßa MyPrecious
            my_precious_score = base_score + pnl_adjustment_score
            my_precious_score = min(max(my_precious_score, 0), 10) # K·∫πp l·∫°i trong kho·∫£ng 0-10

            # Ghi ƒë√® l·∫°i final_score trong advisor_decision ƒë·ªÉ c√°c h√†m sau s·ª≠ d·ª•ng
            advisor_decision['final_score'] = my_precious_score
            #--------------------------------------------------------------

            # Logic c√≤n l·∫°i s·∫Ω s·ª≠ d·ª•ng my_precious_score (ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o final_score)
            final_score = my_precious_score # G√°n l·∫°i ƒë·ªÉ c√°c bi·∫øn sau n√†y d√πng ƒë√∫ng

            # ### THAY ƒê·ªîI 4: X√ÅC ƒê·ªäNH LEVEL D·ª∞A TR√äN FINAL_SCORE M·ªöI ###
            # Ng∆∞·ª°ng n√†y c√≥ th·ªÉ ƒë∆∞·ª£c tinh ch·ªânh cho ph√π h·ª£p h∆°n
            level_key_map = [
                (3.0, "PANIC_SELL"), (4.0, "SELL"), (4.8, "AVOID"),
                (5.5, "HOLD"), (6.5, "WEAK_BUY"), (7.8, "BUY"), (10.1, "STRONG_BUY")
            ]
            level_key = next((lvl for thr, lvl in level_key_map if final_score < thr), "AVOID")

            # G√≥i d·ªØ li·ªáu ƒë·ªÉ x√¢y d·ª±ng b√°o c√°o
            report_payload = {
                "trade": trade, "pnl": pnl, "advisor_decision": advisor_decision,
                "price_now": price_now, "real_entry": real_entry,
                "level_key": level_key, "all_indicators": all_indicators
            }
            overview_data.append(report_payload)
            level_counter[level_key] += 1

            # Logic ki·ªÉm tra thay ƒë·ªïi v√† g·ª≠i alert (gi·ªØ nguy√™n)
            prev = advisor_map.get(trade_id, {})
            pnl_change_significant = abs(prev.get("pnl_percent", 0) - pnl) > 3.0
            # S·ª≠ d·ª•ng final_score (ƒë√£ ƒëi·ªÅu ch·ªânh) ƒë·ªÉ so s√°nh
            score_change_significant = abs(prev.get("final_score", 5.0) - final_score) > 0.8 # TƒÉng ng∆∞·ª°ng v√¨ thang ƒëi·ªÉm 10

            if pnl_change_significant or score_change_significant:
                alert_msg = build_alert_message(report_payload)
                send_discord_alert(alert_msg)
                log_to_txt(f"SEND alert for {symbol} ({interval}) - Level: {level_key} | Score: {final_score:.1f} (Base: {base_score:.1f}, PnL Adj: {pnl_adjustment_score:+.2f})")

            # C·∫≠p nh·∫≠t advisor_map v·ªõi c·∫£ base_score v√† final_score
            advisor_map[trade_id] = {"id": trade_id, "pnl_percent": pnl, "final_score": final_score, "base_score": base_score}

        except Exception as e:
            log_to_txt(f"[CRITICAL ERROR] Failed to process trade {trade.get('id', 'N/A')}: {e}")
            import traceback
            log_to_txt(traceback.format_exc())

    print("\n[3/3] Generating overview report if needed...")
    if should_send_overview(cooldown_state) and overview_data:
        overview_msg = build_overview_report(overview_data, level_counter, now)
        send_discord_alert(overview_msg)
        cooldown_state["last_overview_timestamp"] = now.timestamp()
        print("‚úÖ Overview report sent.")

    write_json(advisor_file, list(advisor_map.values()))
    write_json(COOLDOWN_STATE_PATH, cooldown_state)
    print(f"‚úÖ Finished processing {len(trades)} open trades.")


# ==============================================================================
# ### THAY ƒê·ªîI 5: C·∫¨P NH·∫¨T C√ÅC H√ÄM X√ÇY D·ª∞NG MESSAGE ###
# C√°c h√†m n√†y gi·ªù ƒë√¢y s·∫Ω nh·∫≠n `report_payload` v√† tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ ƒë√≥
# ==============================================================================
def format_price(price):
    if not isinstance(price, (int, float)): return "N/A"
    return f"{price:.8f}" if price < 0.1 else f"{price:.4f}"

def generate_indicator_text_block(ind: dict) -> str:
    """
    T·∫°o kh·ªëi hi·ªÉn th·ªã ch·ªâ b√°o k·ªπ thu·∫≠t chi ti·∫øt, ƒë·ªìng b·ªô v·ªõi format c·ªßa main.py.
    """
    # --- Helper ƒë·ªÉ format s·ªë cho ƒë·∫πp ---
    def f(val, precision=4):
        return f"{val:.{precision}f}" if isinstance(val, (int, float)) else str(val)

    # --- Tr√≠ch xu·∫•t t·∫•t c·∫£ c√°c ch·ªâ s·ªë t·ª´ dict 'ind' ---
    price = ind.get('price', 0.0)
    trade_plan = ind.get('trade_plan', {})
    ema_20 = ind.get('ema_20', 'N/A')
    rsi_14 = ind.get('rsi_14', 'N/A')
    rsi_div = ind.get('rsi_divergence') or 'None'
    macd_line = ind.get('macd_line', 'N/A')
    macd_signal_val = ind.get('macd_signal', 'N/A')
    macd_cross = ind.get('macd_cross', 'N/A')
    adx = ind.get('adx', 'N/A')
    bb_upper = ind.get('bb_upper', 'N/A')
    bb_lower = ind.get('bb_lower', 'N/A')
    volume = ind.get('volume', 'N/A')
    vol_ma20 = ind.get('vol_ma20', 'N/A')
    fib_0_618 = ind.get('fib_0_618', 'N/A')
    doji_note = f"{ind['doji_type'].replace('_', ' ').title()} Doji" if ind.get("doji_type") else "No"
    trend = ind.get("trend", "unknown")
    cmf = ind.get("cmf", 'N/A')
    
    # L·∫•y th√¥ng tin t√≠n hi·ªáu k·ªπ thu·∫≠t ƒë√£ ƒë∆∞·ª£c g·∫Øn v√†o
    signal_details = ind.get("signal_details", {})
    signal_reason = signal_details.get('reason', '...')

    # --- T·∫°o kh·ªëi hi·ªÉn th·ªã m·ªõi ---
    # D√≤ng ƒë·∫ßu ti√™n v·∫´n gi·ªØ th√¥ng tin v·ªÅ trade plan
    header_line = f"Gi√° hi·ªán t·∫°i: {format_price(price)} | Entry: {format_price(trade_plan.get('entry', 0))} | TP: {format_price(trade_plan.get('tp', 0))} | SL: {format_price(trade_plan.get('sl', 0))}"

    # C√°c d√≤ng sau l√† ch·ªâ b√°o chi ti·∫øt
    indicator_lines = f"""üìà EMA20: {f(ema_20)}
üí™ RSI14: {f(rsi_14, 2)} ({rsi_div})
üìâ MACD Line: {f(macd_line)}
üìä MACD Signal: {f(macd_signal_val)} ‚Üí {str(macd_cross).capitalize()}
üß≠ ADX: {f(adx, 2)}
üî∫ BB Upper: {f(bb_upper)}
üîª BB Lower: {f(bb_lower)}
üîä Volume: {f(volume, 2)} / MA20: {f(vol_ma20, 2)}
üåÄ Fibo 0.618: {f(fib_0_618)}
üïØÔ∏è Doji: {doji_note}
üìà Trend: {trend.capitalize()}
üí∏ CMF: {f(cmf)}
üîπ T√≠n hi·ªáu KT: {signal_details.get('level', 'N/A')} ({signal_details.get('tag', 'N/A')}) ‚Äì {signal_reason}"""

    return f"{header_line}\n{indicator_lines}"


def generate_summary_block(symbol: str, interval: str, pnl: float, advisor_decision: dict):
    final_score = advisor_decision.get('final_score', 5.0)
    tech_score = advisor_decision.get('tech_score', 5.0)
    ml_data = advisor_decision.get('ai_prediction', {})
    news_factor = advisor_decision.get('news_factor', 0)

    tech_desc = "Th·ªã tr∆∞·ªùng kh√¥ng r√µ r√†ng"
    if tech_score >= 7: tech_desc = "T√≠n hi·ªáu k·ªπ thu·∫≠t ·ªßng h·ªô"
    elif tech_score <= 3.5: tech_desc = "T√≠n hi·ªáu k·ªπ thu·∫≠t y·∫øu, r·ªßi ro"

    ai_desc = "Kh√¥ng c√≥ d·ªØ li·ªáu AI"
    if ml_data and 'prob_buy' in ml_data:
        ai_level = "AVOID" # C·∫ßn ƒë·ªçc level t·ª´ ml_report
        ml_log_path = os.path.join(AI_DIR, f"{symbol}_{interval}.json")
        if os.path.exists(ml_log_path):
           ai_level = load_json(ml_log_path, {}).get("level", "AVOID")

        ai_desc = f"üöß {ai_level.replace('_', ' ')} ‚Äì ML d·ª± ƒëo√°n: {ml_data.get('pct', 0):.2f}% ({ml_data.get('prob_buy', 0):.1f}%/{ml_data.get('prob_sell', 0):.1f}%)"

    news_desc = "T√≠ch c·ª±c" if news_factor > 0 else "Ti√™u c·ª±c" if news_factor < 0 else "Trung l·∫≠p"
    return (f"üìå **T·ªïng h·ª£p ƒë√°nh gi√°:** {symbol} ({interval}) | PnL: {pnl:.2f}% | Final Score: {final_score:.1f}/10\n"
            f"üîπ **K·ªπ thu·∫≠t:** Score {tech_score:.1f}/10 ‚Üí {tech_desc}\n"
            f"üîπ **AI:** {ai_desc}\n"
            f"üîπ **Tin t·ª©c & B·ªëi c·∫£nh:** {news_desc}")

def generate_news_and_context_block_v2(advisor_decision: dict) -> str:
    market_trend = advisor_decision.get("market_trend", "NEUTRAL")
    news_factor = advisor_decision.get("news_factor", 0.0)
    # L·∫•y l·∫°i market_context ƒë·ªÉ hi·ªÉn th·ªã chi ti·∫øt h∆°n
    mc_data = advisor_decision.get("debug_info", {}).get("context_used", {}) # C·∫ßn th√™m v√†o trade_advisor

    mc_text = (f"üåê **B·ªëi c·∫£nh th·ªã tr∆∞·ªùng (Trend: {market_trend})** | "
               f"Fear & Greed: `{mc_data.get('fear_greed', 'N/A')}` | BTC.D: `{mc_data.get('btc_dominance', 'N/A')}%`")

    news_block = "‚ö™ Kh√¥ng c√≥ tin t·ª©c m·ªõi ·∫£nh h∆∞·ªüng."
    if news_factor != 0.0:
        # Ch√∫ng ta kh√¥ng c√≥ s·∫µn ti√™u ƒë·ªÅ tin t·ª©c ·ªü ƒë√¢y, ch·ªâ c√≥ ƒëi·ªÉm s·ªë
        # ƒê√¢y l√† m·ªôt s·ª± ƒë√°nh ƒë·ªïi khi t√≠ch h·ª£p. Ta c√≥ th·ªÉ di·ªÖn gi·∫£i ƒëi·ªÉm s·ªë.
        if news_factor > 0:
            news_block = "üóûÔ∏è **Tin t·ª©c:** C√≥ c√°c tin t·ª©c mang t√≠nh t√≠ch c·ª±c."
        else:
            news_block = "üóûÔ∏è **Tin t·ª©c:** C√≥ c√°c tin t·ª©c mang t√≠nh ti√™u c·ª±c."

    return f"{mc_text}\n{news_block}"

def generate_mta_block(symbol: str, current_interval: str, all_indicators: dict) -> str:
    lines = ["üìä **Ph√¢n t√≠ch ƒêa Khung th·ªùi gian:**"]
    for tf in ["1h", "4h", "1d"]:
        if tf == current_interval: continue
        ind_tf = all_indicators.get(symbol, {}).get(tf)
        if ind_tf:
            trend = ind_tf.get('trend', 'N/A')
            icon = "üîº" if trend == "uptrend" else "üîΩ" if trend == "downtrend" else "‚ÜîÔ∏è"
            # L·∫•y d·ªØ li·ªáu AI cho khung th·ªùi gian ph·ª•
            ai_data_tf = load_json(os.path.join(AI_DIR, f"{symbol}_{tf}.json"), {})
            ai_bias = "tƒÉng" if ai_data_tf.get("prob_buy", 50) > 60 else "gi·∫£m" if ai_data_tf.get("prob_sell", 0) > 60 else "trung l·∫≠p"

            lines.append(f"{icon} **{tf}**: Trend {trend:<9} | RSI: {ind_tf.get('rsi_14', 0):.1f} | AI: {ai_bias}")
    return "\n".join(lines) if len(lines) > 1 else ""

def generate_final_strategy_block(pnl: float, level_key: str, advisor_decision: dict) -> str:
    final_score = advisor_decision.get('final_score', 5.0)
    tech_score = advisor_decision.get('tech_score', 5.0)
    market_trend = advisor_decision.get('market_trend', "NEUTRAL")
    news_factor = advisor_decision.get("news_factor", 0)
    ml_data = advisor_decision.get("ai_prediction", {})

    reco_map = {
        "PANIC_SELL": "üîª **∆Øu ti√™n h√†ng ƒë·∫ßu l√† tho√°t l·ªánh NGAY L·∫¨P T·ª®C ƒë·ªÉ b·∫£o to√†n v·ªën.**",
        "SELL": "üîª **T√≠n hi·ªáu ti√™u c·ª±c chi·∫øm ∆∞u th·∫ø, c√¢n nh·∫Øc gi·∫£m v·ªã th·∫ø ho·∫∑c ch·ªët l·ªùi/c·∫Øt l·ªó.**",
        "AVOID": "‚õî **Th·ªã tr∆∞·ªùng r·ªßi ro, kh√¥ng r√µ r√†ng ‚Äì n√™n ƒë·ª©ng ngo√†i quan s√°t.**",
        "HOLD": "üíé **Gi·ªØ l·ªánh hi·ªán t·∫°i.** Ch∆∞a n√™n m·ªü th√™m v·ªã th·∫ø khi t√≠n hi·ªáu ch∆∞a ƒë·ªß m·∫°nh.",
        "WEAK_BUY": "üü¢ **C√≥ th·ªÉ mua thƒÉm d√≤ v·ªõi kh·ªëi l∆∞·ª£ng nh·ªè.** C·∫ßn qu·∫£n l√Ω r·ªßi ro ch·∫∑t ch·∫Ω.",
        "BUY": "üõí **T√≠n hi·ªáu MUA ƒëang ƒë∆∞·ª£c c·ªßng c·ªë.** C√≥ th·ªÉ xem x√©t v√†o l·ªánh t·∫°i c√°c v√πng h·ªó tr·ª£.",
        "STRONG_BUY": "üöÄ **T·∫•t c·∫£ c√°c y·∫øu t·ªë ƒë·ªÅu ·ªßng h·ªô xu h∆∞·ªõng tƒÉng.** C√≥ th·ªÉ t·ª± tin gia tƒÉng v·ªã th·∫ø."
    }
    reco = [reco_map.get(level_key, "")]

    reasons = [
        f"**C·∫•p ƒë·ªô L·ªánh:** {level_key} (d·ª±a tr√™n ƒëi·ªÉm t·ªïng h·ª£p {final_score:.1f}/10)",
        f"**K·ªπ thu·∫≠t:** ƒêi·ªÉm {tech_score:.1f}/10. {'T√≠ch c·ª±c.' if tech_score >= 7 else 'Ti√™u c·ª±c.' if tech_score <= 3.5 else 'Trung l·∫≠p.'}",
        f"**B·ªëi c·∫£nh:** {market_trend}. {'H·ªó tr·ª£ m·∫°nh.' if 'UPTREND' in market_trend else 'R·ªßi ro l·ªõn.' if 'DOWNTREND' in market_trend else 'Ch∆∞a r√µ xu h∆∞·ªõng.'}"
    ]
    if ml_data and 'prob_buy' in ml_data:
        reasons.append(f"**AI:** D·ª± b√°o c√≥ xu h∆∞·ªõng {'tƒÉng' if ml_data['prob_buy'] >= 60 else 'gi·∫£m' if ml_data['prob_buy'] <= 40 else 'trung l·∫≠p'} (x√°c su·∫•t {ml_data['prob_buy']:.1f}%).")
    if news_factor != 0:
        reasons.append(f"**Tin t·ª©c:** C√≥ y·∫øu t·ªë tin t·ª©c {'t√≠ch c·ª±c' if news_factor > 0 else 'ti√™u c·ª±c'}.")

    summary_map = { "UPTREND": "b·ª©c tranh chung ƒëang t√≠ch c·ª±c.", "DOWNTREND": "r·ªßi ro t·ª´ th·ªã tr∆∞·ªùng chung l√† r·∫•t l·ªõn.", "NEUTRAL": "th·ªã tr∆∞·ªùng chung ƒëang ƒëi ngang." }
    summary_text = f"K·∫øt h·ª£p c√°c y·∫øu t·ªë, {summary_map.get(market_trend, '...')} T√≠n hi·ªáu {level_key} n√™n ƒë∆∞·ª£c xem x√©t trong b·ªëi c·∫£nh n√†y."

    out = [f"üß† **Chi·∫øn l∆∞·ª£c cu·ªëi c√πng (Score: {final_score:.1f}):**"]
    out.extend([f"‚Ä¢ {line}" for line in reco])
    out.append("üìå **Ph√¢n t√≠ch chi ti·∫øt:**")
    out.extend([f"‚Äì {r}" for r in reasons])
    out.append(f"üìâ **T·ªïng k·∫øt:** {summary_text}")
    return "\n".join(out)

def build_alert_message(payload: dict) -> str:
    trade = payload["trade"]
    pnl = payload["pnl"]
    advisor_decision = payload["advisor_decision"]
    level_key = payload["level_key"]
    all_indicators = payload["all_indicators"]

    symbol, interval, trade_id = trade['symbol'], trade['interval'], trade['id']
    real_entry = payload["real_entry"]

    title_block = f"{ICON.get(level_key, ' ')} [{level_key.replace('_', ' ')}] ƒê√°nh gi√° l·ªánh: {symbol} ({interval})"

    info_block = (f"üìå ID: {trade_id}  {symbol}  {interval}\n"
                  f"üìÜ In time: {trade.get('in_time')}  |  ƒê√£ gi·ªØ: {calc_held_hours(trade.get('in_time'))} h  |  RealEntry: {format_price(real_entry)}\n"
                  f"üí∞ PnL: {round(trade.get('amount', 1000) * pnl / 100, 1):.1f} USD ({pnl:.2f}%)")

    # L·∫•y indicator c·ªßa khung th·ªùi gian ch√≠nh t·ª´ advisor_decision ƒë·ªÉ hi·ªÉn th·ªã
    main_indicators = advisor_decision.get("full_indicators", {})
    main_indicators["trade_plan"] = parse_trade_plan(trade['trade_plan']) # G·∫Øn tradeplan c≈© v√†o
    main_indicators["signal_details"] = advisor_decision.get("signal_details", {})
    ind_text_block = generate_indicator_text_block(main_indicators)

    summary_block = generate_summary_block(symbol, interval, pnl, advisor_decision)

    # News block m·ªõi s·∫Ω ƒë∆°n gi·∫£n h∆°n
    news_block = generate_news_and_context_block_v2(advisor_decision)

    mta_block = generate_mta_block(symbol, interval, all_indicators)
    final_strategy_block = generate_final_strategy_block(pnl, level_key, advisor_decision)

    return "\n\n".join(filter(None, [
        title_block, info_block, ind_text_block, summary_block,
        news_block, mta_block, final_strategy_block
    ]))

def build_overview_report(overview_data: list, level_counter: Counter, now: datetime) -> str:
    # H√†m n√†y g·∫ßn nh∆∞ kh√¥ng ƒë·ªïi, ch·ªâ c·∫ßn ƒëi·ªÅu ch·ªânh c√°ch l·∫•y d·ªØ li·ªáu t·ª´ payload
    total_start = sum(t["trade"].get("amount", 1000) for t in overview_data)
    total_pnl_usd = sum(t["trade"].get("amount", 1000) * t["pnl"] / 100 for t in overview_data)

    lv_counts = ", ".join(f"{ICON[k]}{v}" for k, v in sorted(level_counter.items(), key=lambda item: list(ICON.keys()).index(item[0])))
    total_pnl_percent = (total_pnl_usd / total_start * 100) if total_start else 0.0

    header  = f"üìä **T·ªïng quan danh m·ª•c {now:%d-%m %H:%M}**\n"
    header += f"L·ªánh: {len(overview_data)} | PnL T·ªïng: {total_pnl_usd:+.1f}$ ({total_pnl_percent:+.2f}%)\n"
    header += f"Ph√¢n b·ªï c·∫•p: {lv_counts}"

    overview_lines = []
    # S·∫Øp x·∫øp theo ƒëi·ªÉm s·ªë cu·ªëi c√πng
    for t_payload in sorted(overview_data, key=lambda x: x["advisor_decision"].get('final_score', 0)):
        t = t_payload["trade"]
        advisor_decision = t_payload["advisor_decision"]

        final_score = advisor_decision.get('final_score', 5.0)
        # L·∫•y base_score t·ª´ advisor_map n·∫øu c√≥, n·∫øu kh√¥ng th√¨ d√πng final_score ƒë√£ ƒëi·ªÅu ch·ªânh
        # ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o hi·ªÉn th·ªã ƒë√∫ng base_score ban ƒë·∫ßu t·ª´ advisor
        trade_id = t_payload["trade"]["id"]
        base_score_from_log = load_json(os.path.join(ADVISOR_DIR, f"{now.strftime('%Y-%m-%d')}.json"), {})
        base_score_for_display = next((item.get("base_score", 5.0) for item in base_score_from_log if item.get("id") == trade_id), 5.0)

        tech_score = advisor_decision.get('tech_score', 5.0)
        ml_data = advisor_decision.get('ai_prediction', {})
        prob_buy = ml_data.get('prob_buy', 0)
        prob_sell = ml_data.get('prob_sell', 0)
        ai_icon = "üîº" if prob_buy > prob_sell else "üîΩ" if prob_sell > prob_buy else "‚ÜîÔ∏è"
        ai_display_str = f"{prob_buy:.0f}/{prob_sell:.0f} {ai_icon}"

        line = (f"üìå **{t['symbol']} ({t['interval']})** | "
                f"PnL: {t_payload['pnl']:+.2f}% | "
                f"Entry: {format_price(t_payload.get('real_entry', 0))}\n"
                f"üß† T:{tech_score:.1f} | AI:{ai_display_str} | **Score: {final_score:.1f}/10** (Base: {base_score_for_display:.1f}) {ICON.get(t_payload['level_key'], ' ')}")
        overview_lines.append(line)

    return header + "\n" + "-"*50 + "\n" + "\n".join(overview_lines)


if __name__ == "__main__":
    main()
