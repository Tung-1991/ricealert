# livetrade/csv_viewer.py
# -*- coding: utf-8 -*-
"""
CSV Viewer - C√¥ng c·ª• xem v√† ph√¢n t√≠ch to√†n b·ªô l·ªãch s·ª≠ giao d·ªãch.
Version: 1.4.0 - Th√™m b·∫£ng ph√¢n t√≠ch Tactic v√† ƒë√°nh s·ªë th·ª© t·ª±.
Date: 2025-08-15
"""
import os
import sys
import json
import pandas as pd
import pytz
import traceback
import csv

# --- C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)
DATA_DIR = os.path.join(BASE_DIR, "data")
TRADE_HISTORY_CSV_FILE = os.path.join(DATA_DIR, "live_trade_history.csv")
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

# --- C·∫§U TR√öC CSV CHU·∫®N ---
CORRECT_HEADER = [
    "trade_id", "symbol", "interval", "status", "opened_by_tactic",
    "tactic_used", "trade_type", "entry_price", "exit_price", "tp", "sl",
    "initial_sl", "total_invested_usd", "pnl_usd", "pnl_percent",
    "entry_time", "exit_time", "holding_duration_hours", "entry_score",
    "last_score", "dca_entries", "partial_pnl_details",
    "realized_pnl_usd", "binance_market_order_id", "entry_zone", "last_zone", "initial_entry"
]
PARTIAL_PNL_DETAILS_INDEX = CORRECT_HEADER.index('partial_pnl_details')

def format_price_dynamically(price: float) -> str:
    if price is None or pd.isna(price): return "N/A"
    try:
        price_f = float(price)
        if price_f >= 1.0: return f"{price_f:,.4f}"
        return f"{price_f:,.8f}"
    except (ValueError, TypeError): return "N/A"

def parse_json_like_string(s: str) -> dict or list:
    if pd.isna(s) or not isinstance(s, str) or not s.strip():
        return {} if '{' in str(s) else []
    try:
        s_cleaned = str(s).replace("'", '"').replace('None', 'null').replace('True', 'true').replace('False', 'false')
        if s_cleaned.startswith('"') and s_cleaned.endswith('"'):
            s_cleaned = json.loads(s_cleaned)
        return json.loads(s_cleaned) if isinstance(s_cleaned, str) else s_cleaned
    except (json.JSONDecodeError, TypeError):
        return {} if '{' in str(s) else []

def read_and_normalize_csv():
    """ƒê·ªçc v√† chu·∫©n h√≥a file CSV, tr·∫£ v·ªÅ m·ªôt DataFrame s·∫°ch."""
    if not os.path.exists(TRADE_HISTORY_CSV_FILE):
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file l·ªãch s·ª≠ t·∫°i '{TRADE_HISTORY_CSV_FILE}'")
        return None
    
    all_rows_normalized = []
    with open(TRADE_HISTORY_CSV_FILE, 'r', encoding='utf-8', newline='') as f:
        reader = csv.reader(f)
        next(reader, None)
        for i, row in enumerate(reader, 2):
            if len(row) == 26:
                row.insert(PARTIAL_PNL_DETAILS_INDEX, None)
                all_rows_normalized.append(row)
            elif len(row) == 27:
                all_rows_normalized.append(row)
            else:
                print(f"‚ö†Ô∏è C·∫£nh b√°o: B·ªè qua d√≤ng {i} kh√¥ng h·ª£p l·ªá v·ªõi {len(row)} c·ªôt.")
    
    df = pd.DataFrame(all_rows_normalized, columns=CORRECT_HEADER)
    
    if df.empty:
        print("‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá n√†o ƒë∆∞·ª£c t√¨m th·∫•y trong file CSV.")
        return None
        
    print(f"‚úÖ ƒê√£ t·∫£i v√† chu·∫©n h√≥a th√†nh c√¥ng {len(df)} b·∫£n ghi. ƒêang x·ª≠ l√Ω...")
    return df

def analyze_tactic_performance(df: pd.DataFrame):
    """Ph√¢n t√≠ch v√† hi·ªÉn th·ªã hi·ªáu su·∫•t c·ªßa c√°c Tactic t·ª´ DataFrame."""
    print("\n" + "="*20, "üìä B·∫¢NG PH√ÇN T√çCH HI·ªÜU SU·∫§T TACTIC üìä", "="*20)
    
    df_analysis = df.copy()
    df_analysis['pnl_usd'] = pd.to_numeric(df_analysis['pnl_usd'], errors='coerce')
    df_analysis.dropna(subset=['pnl_usd', 'opened_by_tactic'], inplace=True)
    df_analysis = df_analysis[df_analysis['status'].astype(str).str.contains('Closed', na=False, case=False)]

    if df_analysis.empty:
        print("‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá ƒë·ªÉ ph√¢n t√≠ch hi·ªáu su·∫•t.")
        return

    grouped = df_analysis.groupby('opened_by_tactic').agg(
        Total_Trades=('pnl_usd', 'count'),
        Total_PnL=('pnl_usd', 'sum'),
        Wins=('pnl_usd', lambda x: (x > 0).sum()),
        Avg_Win_PnL=('pnl_usd', lambda x: x[x > 0].mean()),
        Avg_Loss_PnL=('pnl_usd', lambda x: x[x <= 0].mean()),
        Max_Win=('pnl_usd', 'max'),
        Max_Loss=('pnl_usd', 'min')
    ).fillna(0)

    grouped['Win_Rate_%'] = (grouped['Wins'] / grouped['Total_Trades'] * 100).where(grouped['Total_Trades'] > 0, 0)
    grouped['Payoff_Ratio'] = abs(grouped['Avg_Win_PnL'] / grouped['Avg_Loss_PnL']).where(grouped['Avg_Loss_PnL'] != 0, float('inf'))
    
    total_trades_all = len(df_analysis)
    wins_all = (df_analysis['pnl_usd'] > 0).sum()
    
    total_row = {
        'Tactic': 'T·ªîNG C·ªòNG',
        'Total_Trades': total_trades_all,
        'Total_PnL': df_analysis['pnl_usd'].sum(),
        'Wins': wins_all,
        'Win_Rate_%': (wins_all / total_trades_all * 100) if total_trades_all > 0 else 0,
        'Avg_Win_PnL': df_analysis[df_analysis['pnl_usd'] > 0]['pnl_usd'].mean(),
        'Avg_Loss_PnL': df_analysis[df_analysis['pnl_usd'] <= 0]['pnl_usd'].mean(),
        'Max_Win': df_analysis['pnl_usd'].max(),
        'Max_Loss': df_analysis['pnl_usd'].min(),
    }
    avg_win_all = total_row.get('Avg_Win_PnL', 0)
    avg_loss_all = total_row.get('Avg_Loss_PnL', 0)
    total_row['Payoff_Ratio'] = abs(avg_win_all / avg_loss_all) if avg_loss_all != 0 else float('inf')

    total_df = pd.DataFrame([total_row]).set_index('Tactic')
    analysis_df = pd.concat([grouped, total_df.fillna(0)])
    
    final_df = analysis_df.reset_index().rename(columns={'index': 'Tactic'})

    final_cols = ['Tactic', 'Total_Trades', 'Win_Rate_%', 'Total_PnL', 'Avg_Win_PnL', 'Avg_Loss_PnL', 'Payoff_Ratio', 'Max_Win', 'Max_Loss']
    
    pd.options.display.float_format = '{:,.2f}'.format
    print(final_df[final_cols].to_string(index=False))
    pd.reset_option('display.float_format')

    # *** PH·∫¶N CH√ö TH√çCH CHI TI·∫æT ƒê√ÇY R·ªíI! ***
    print("\n" + "-"*25 + " üí° CH√ö TH√çCH C√ÅC C·ªòT üí° " + "-"*25)
    print("  - Total_Trades: T·ªïng s·ªë l·ªánh ƒë√£ ƒë√≥ng c·ªßa Tactic n√†y.")
    print("  - Win_Rate_%:   T·ª∑ l·ªá ph·∫ßn trƒÉm s·ªë l·ªánh th·∫Øng tr√™n t·ªïng s·ªë l·ªánh.")
    print("  - Total_PnL:    T·ªïng l·ª£i nhu·∫≠n/thua l·ªó r√≤ng ($) m√† Tactic n√†y t·∫°o ra.")
    print("  - Avg_Win_PnL:  L·ª£i nhu·∫≠n trung b√¨nh ($) c·ªßa m·ªôt l·ªánh TH·∫ÆNG.")
    print("  - Avg_Loss_PnL: M·ª©c l·ªó trung b√¨nh ($) c·ªßa m·ªôt l·ªánh THUA.")
    print("  - Payoff_Ratio: T·ª∑ l·ªá L·ªùi/L·ªó. V√≠ d·ª• 1.5 nghƒ©a l√† khi th·∫Øng, b·∫°n ƒÉn ƒë∆∞·ª£c g·∫•p 1.5 l·∫ßn so v·ªõi khi thua.")
    print("                  (C√†ng cao c√†ng t·ªët, > 1.0 l√† t√≠ch c·ª±c).")
    print("  - Max_Win:      L·ªánh th·∫Øng l·ªõn nh·∫•t ($) c·ªßa Tactic n√†y.")
    print("  - Max_Loss:     L·ªánh thua l·ªó n·∫∑ng nh·∫•t ($) c·ªßa Tactic n√†y.")




def display_full_csv_history():
    """H√†m ch√≠nh ƒë·ªÉ ƒë·ªçc, x·ª≠ l√Ω v√† hi·ªÉn th·ªã to√†n b·ªô l·ªãch s·ª≠ giao d·ªãch."""
    print("\n" + "="*25 + " üìú TO√ÄN B·ªò L·ªäCH S·ª¨ GIAO D·ªäCH üìú " + "="*25)
    
    df = read_and_normalize_csv()
    if df is None:
        return

    numeric_cols = [
        'entry_price', 'exit_price', 'initial_sl', 'pnl_usd', 'pnl_percent', 
        'holding_duration_hours', 'entry_score', 'last_score'
    ]
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce')

    df['exit_time_dt'] = pd.to_datetime(df['exit_time'], errors='coerce')
    df.sort_values(by='exit_time_dt', ascending=False, inplace=True)
    
    # *** TH√äM C·ªòT S·ªê TH·ª® T·ª∞ ***
    df.insert(0, 'STT', range(len(df), 0, -1))

    df['V·ªën'] = df.apply(lambda r: parse_json_like_string(r.get('initial_entry', '{}')).get('invested_usd', r.get('total_invested_usd')), axis=1)
    df['Reason'] = df['status'].astype(str).str.extract(r'\((.*?)\)').fillna('N/A').iloc[:, 0]
    
    def create_tags(row):
        tags = []
        tactics_used = parse_json_like_string(row.get('tactic_used', '[]'))
        if any("TP1" in s for s in tactics_used if isinstance(s, str)): tags.append("TP1‚úÖ")
        if any("Protect_Profit" in s for s in tactics_used if isinstance(s, str)): tags.append("PP‚úÖ")
        dca_entries = parse_json_like_string(row.get('dca_entries', '[]'))
        if dca_entries and isinstance(dca_entries, list): tags.append(f"DCA:{len(dca_entries)}")
        return ", ".join(tags) if tags else "---"
    df['Tags'] = df.apply(create_tags, axis=1)
    
    df['Score'] = df.apply(lambda r: f"{r.get('entry_score', 0.0):.1f}‚Üí{r.get('last_score', 0.0):.1f}" if pd.notna(r.get('entry_score')) and pd.notna(r.get('last_score')) else "N/A", axis=1)
    df['Zone'] = df.apply(lambda r: f"{r.get('entry_zone', 'N/A')}‚Üí{r.get('last_zone', 'N/A')}" if pd.notna(r.get('last_zone')) and r.get('entry_zone') != r.get('last_zone') else r.get('entry_zone', 'N/A'), axis=1)

    df_display = pd.DataFrame()
    df_display['STT'] = df['STT']
    df_display['Time Close'] = df['exit_time_dt'].dt.tz_convert(VIETNAM_TZ).dt.strftime('%Y-%m-%d %H:%M')
    df_display['Symbol'] = df['symbol'].astype(str) + '-' + df['interval'].astype(str)
    df_display['V·ªën'] = pd.to_numeric(df['V·ªën'], errors='coerce').apply(lambda x: f"${x:,.2f}" if pd.notna(x) else "N/A")
    df_display['Gi√° v√†o'] = df['entry_price'].apply(format_price_dynamically)
    df_display['Gi√° ra'] = df['exit_price'].apply(format_price_dynamically)
    df_display['PnL $'] = df['pnl_usd'].apply(lambda x: f"${x:+.2f}" if pd.notna(x) else "N/A")
    df_display['PnL %'] = df['pnl_percent'].apply(lambda x: f"{x:+.2f}%" if pd.notna(x) else "N/A")
    df_display['Hold (h)'] = df['holding_duration_hours'].apply(lambda x: f"{x:.1f}" if pd.notna(x) else "N/A")
    df_display['Score'] = df['Score']
    df_display['Zone'] = df['Zone']
    df_display['Tactic'] = df['opened_by_tactic']
    df_display['Reason'] = df['Reason']
    df_display['Tags'] = df['Tags']
    
    pd.set_option('display.max_rows', None)
    print(df_display.to_string(index=False))
    pd.reset_option('display.max_rows')

    print("\n" + "="*75)
    
    # G·ªçi h√†m ph√¢n t√≠ch Tactic
    analyze_tactic_performance(df)
    
    print("\n" + "="*75)
    print(f"üìä T·ªïng c·ªông: {len(df)} giao d·ªãch ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch.")

if __name__ == "__main__":
    try:
        display_full_csv_history()
    except Exception as e:
        print(f"\nüî•üî•üî• ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
        traceback.print_exc()
