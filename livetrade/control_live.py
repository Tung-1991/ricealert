# livetrade/control_live.py
# -*- coding: utf-8 -*-
# Version: 7.1.0 - FINAL FUCKING STABLE VERSION + New Features

import os
import sys
import json
import uuid
import time
import requests
import pytz
import pandas as pd
import csv
import traceback
import shutil
import signal
from datetime import datetime, timedelta

# --- C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)
sys.path.append(PROJECT_ROOT)

try:
    from binance_connector import BinanceConnector
    from live_trade import (
        TRADING_MODE, GENERAL_CONFIG, TACTICS_LAB,
        ZONES, INTERVALS_TO_SCAN, RISK_RULES_CONFIG,
        # --- TH√äM C√ÅC H√ÄM N√ÄY V√ÄO ---
        calculate_total_equity, build_dynamic_alert_text, build_daily_summary_text,
        send_discord_message_chunks, ALERT_CONFIG
    )
except ImportError as e:
    sys.exit(f"‚ùå L·ªói: Kh√¥ng th·ªÉ import module c·∫ßn thi·∫øt: {e}.")

# --- C√ÅC H·∫∞NG S·ªê ---
DATA_DIR = os.path.join(BASE_DIR, "data")
STATE_FILE = os.path.join(DATA_DIR, "live_trade_state.json")
TRADE_HISTORY_CSV_FILE = os.path.join(DATA_DIR, "live_trade_history.csv")
BACKUP_FILE = STATE_FILE + ".backup"
LOCK_FILE = STATE_FILE + ".lock"
ENV_FILE = os.path.join(PROJECT_ROOT, ".env")
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')
TACTICS = list(TACTICS_LAB.keys())
INTERVALS = list(INTERVALS_TO_SCAN)
CSV_HEADER = [
    "trade_id", "symbol", "interval", "status", "opened_by_tactic", "tactic_used", "trade_type",
    "entry_price", "exit_price", "tp", "sl", "initial_sl", "total_invested_usd",
    "pnl_usd", "pnl_percent", "entry_time", "exit_time", "holding_duration_hours",
    "entry_score", "last_score", "dca_entries", "realized_pnl_usd",
    "binance_market_order_id", "entry_zone", "last_zone", "initial_entry"
]

# --- C√ÅC H√ÄM TI·ªÜN √çCH & KH√ìA FILE ---
def acquire_lock(timeout=120):
    start_time = time.time()
    print("‚è≥ ƒêang ch·ªù quy·ªÅn truy c·∫≠p file tr·∫°ng th√°i...", end='', flush=True)
    while os.path.exists(LOCK_FILE):
        if time.time() - start_time > timeout:
            print(f"\r‚ùå L·ªói: Kh√¥ng th·ªÉ chi·∫øm quy·ªÅn ƒëi·ªÅu khi·ªÉn file sau {timeout} gi√¢y.")
            return False
        time.sleep(0.5); print(".", end='', flush=True)
    try:
        with open(LOCK_FILE, 'w') as f: f.write(str(os.getpid()))
        print("\r‚úÖ ƒê√£ c√≥ quy·ªÅn truy c·∫≠p.                                       ")
        return True
    except IOError as e:
        print(f"\r‚ùå L·ªói I/O khi t·∫°o file lock: {e}"); return False

def release_lock():
    if os.path.exists(LOCK_FILE):
        try: os.remove(LOCK_FILE); print("‚úÖ ƒê√£ gi·∫£i ph√≥ng quy·ªÅn truy c·∫≠p file.")
        except OSError as e: print(f"‚ùå L·ªói khi gi·∫£i ph√≥ng file lock: {e}")

def create_backup():
    try:
        if os.path.exists(STATE_FILE): shutil.copy2(STATE_FILE, BACKUP_FILE); print("üìã ƒê√£ t·∫°o b·∫£n sao l∆∞u an to√†n (`.backup`).")
    except Exception as e: print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ t·∫°o file sao l∆∞u. L·ªói: {e}")

def handle_exit_signals(signum, frame):
    print(f"\nüö® Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu ng·∫Øt. ƒêang d·ªçn d·∫πp v√† tho√°t...")
    release_lock()
    sys.exit(1)

def parse_env_variable(key_name):
    try:
        with open(ENV_FILE, 'r') as f:
            for line in f:
                if line.strip() and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if key.strip() == key_name:
                        return [item.strip() for item in value.strip().strip('"').strip("'").split(',')]
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env t·∫°i {ENV_FILE}"); return []
    return []

def get_current_price(symbol):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try: return float(requests.get(url, timeout=5).json()['price'])
    except Exception: return None

def get_usdt_fund(bnc: BinanceConnector):
    try:
        balance_info = bnc.get_account_balance()
        usdt = next((b for b in balance_info.get("balances", []) if b["asset"] == "USDT"), None)
        if usdt: return float(usdt['free']), float(usdt['free']) + float(usdt['locked'])
    except Exception as e: print(f"‚ö†Ô∏è L·ªói kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞ USDT: {e}"); return 0.0, 0.0

def load_state():
    if not os.path.exists(STATE_FILE): return {"active_trades": [], "trade_history": []}
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            return json.loads(content) if content else {"active_trades": [], "trade_history": []}
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file tr·∫°ng th√°i: {e}"); return None

def save_state(state):
    try:
        temp_keys = ['temp_newly_opened_trades', 'temp_newly_closed_trades', 'temp_money_spent_on_trades', 'temp_pnl_from_closed_trades', 'session_has_events']
        state_to_save = {k: v for k, v in state.items() if k not in temp_keys}
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state_to_save, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ ƒê√£ l∆∞u l·∫°i tr·∫°ng th√°i (state.json) th√†nh c√¥ng!")
    except Exception as e: print(f"‚ùå L·ªói khi l∆∞u file tr·∫°ng th√°i: {e}")

def select_from_list(options, prompt, display_list):
    if not options: return None
    for i, item in enumerate(display_list): print(f"  {i+1}. {item}")
    while True:
        try:
            choice_str = input(prompt)
            if not choice_str: return None
            choice = int(choice_str)
            if 1 <= choice <= len(options): return options[choice - 1]
            else: print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError: print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt con s·ªë.")

def reconcile_state(bnc: BinanceConnector):
    state = load_state()
    if not state or not state.get("active_trades"): return [], []
    try:
        balances = {item['asset']: float(item['free']) + float(item['locked']) for item in bnc.get_account_balance().get("balances", [])}
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞ ƒë·ªÉ ƒë·ªëi so√°t: {e}"); return state.get("active_trades", []), []
    valid, desynced = [], []
    threshold = GENERAL_CONFIG.get("RECONCILIATION_QTY_THRESHOLD", 0.95)
    for trade in state.get("active_trades", []):
        asset = trade['symbol'].replace("USDT", "")
        if balances.get(asset, 0.0) < float(trade.get('quantity', 0)) * threshold:
            desynced.append(trade)
        else: valid.append(trade)
    return valid, desynced

def write_trades_to_csv(closed_trades: list):
    if not closed_trades: return
    try:
        with open(TRADE_HISTORY_CSV_FILE, 'a', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=CSV_HEADER, extrasaction='ignore')
            if f.tell() == 0: writer.writeheader()
            for trade in closed_trades:
                trade_to_write = {k: (json.dumps(v) if isinstance(v, (dict, list)) else v) for k, v in trade.items()}
                writer.writerow(trade_to_write)
        print(f"‚úçÔ∏è  ƒê√£ ghi th√†nh c√¥ng {len(closed_trades)} l·ªánh v√†o file CSV.")
    except Exception as e: print(f"‚ùå L·ªói nghi√™m tr·ªçng khi ghi file CSV: {e}")

def process_and_log_closed_trade(bnc, trade, reason, state) -> tuple[bool, float, float]:
    symbol, qty = trade['symbol'], float(trade.get('quantity', 0))
    if qty <= 0: return False, 0.0, 0.0
    try:
        print(f"‚ö°Ô∏è ƒêang g·ª≠i l·ªánh B√ÅN {qty:.8f} {symbol.replace('USDT','')}...")
        order = bnc.place_market_order(symbol=symbol, side="SELL", quantity=qty)
        if not (order and float(order.get('executedQty', 0)) > 0):
            raise Exception("L·ªánh ƒë√≥ng kh√¥ng kh·ªõp ho·∫∑c kh√¥ng c√≥ ph·∫£n h·ªìi.")
    except Exception as e:
        print(f"‚ùå L·ªói API Binance khi ƒë√≥ng l·ªánh {symbol}: {e}"); return False, 0.0, 0.0

    closed_qty = float(order['executedQty'])
    exit_price = float(order['cummulativeQuoteQty']) / closed_qty if closed_qty > 0 else trade['entry_price']
    pnl_usd = (exit_price - trade['entry_price']) * closed_qty

    trade.update({
        'status': f'Closed ({reason})', 'exit_price': exit_price,
        'exit_time': datetime.now(VIETNAM_TZ).isoformat(),
        'pnl_usd': trade.get('realized_pnl_usd', 0.0) + pnl_usd,
        'pnl_percent': (pnl_usd / trade.get('total_invested_usd', 1)) * 100,
    })

    state['active_trades'] = [t for t in state['active_trades'] if t['trade_id'] != trade['trade_id']]
    state.setdefault('trade_history', []).append(trade)
    print(f"‚úÖ ƒê√≥ng {symbol} th√†nh c√¥ng. PnL: ${pnl_usd:,.2f}")
    return True, pnl_usd, trade.get('total_invested_usd', 0)

# --- C√ÅC CH·ª®C NƒÇNG MENU ---
def show_full_dashboard(bnc: BinanceConnector):
    state = load_state()
    if not state: return
    print("\n" + "="*80)
    valid_trades, desynced_trades = reconcile_state(bnc)
    available_usdt, total_usdt = get_usdt_fund(bnc)
    prices = {s['symbol']: get_current_price(s['symbol']) for s in valid_trades}
    value_open = sum(float(t.get('quantity', 0)) * prices.get(t['symbol'], 0) for t in valid_trades)
    equity = total_usdt + value_open
    initial_capital = state.get('initial_capital', equity or 1)
    pnl_total_usd = equity - initial_capital
    pnl_total_percent = (pnl_total_usd / initial_capital) * 100 if initial_capital > 0 else 0
    print(f"üìä B√ÅO C√ÅO T·ªîNG K·∫æT (LIVE) - {datetime.now(VIETNAM_TZ).strftime('%H:%M %d-%m-%Y')} üìä")
    print(f"üí∞ V·ªën Bƒê: ${initial_capital:,.2f} | üíµ Ti·ªÅn m·∫∑t (USDT): ${total_usdt:,.2f}")
    print(f"üìä T·ªïng TS: ${equity:,.2f} | üìà PnL T·ªïng: {'üü¢' if pnl_total_usd >= 0 else 'üî¥'} ${pnl_total_usd:,.2f} ({pnl_total_percent:+.2f}%)")

    print("\n--- DANH S√ÅCH L·ªÜNH ƒêANG M·ªû ---")
    all_trades = sorted(valid_trades + desynced_trades, key=lambda t: t.get('entry_time', ''))
    if not all_trades:
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü.")
    else:
        for trade in all_trades:
            is_desynced = any(t['trade_id'] == trade['trade_id'] for t in desynced_trades)
            symbol = trade.get('symbol', 'N/A')
            current_price = prices.get(symbol)

            pnl_usd, pnl_percent = 0, 0
            if current_price and not is_desynced:
                entry_price = trade.get('entry_price', 0)
                invested_usd = trade.get('total_invested_usd', 0)
                if entry_price > 0:
                    pnl_percent = ((current_price - entry_price) / entry_price) * 100
                    pnl_usd = invested_usd * (pnl_percent / 100)
                current_value = invested_usd + pnl_usd
                price_info = f"V·ªën:${invested_usd:,.2f} -> ${current_value:,.2f} | Entry:{entry_price:.4f} Cur:{current_price:.4f} TP:{trade.get('tp', 0):.4f} SL:{trade.get('sl', 0):.4f}"
            else:
                price_info = f"V·ªën:${trade.get('total_invested_usd', 0):,.2f} | Entry:{trade.get('entry_price', 0):.4f} (Kh√¥ng th·ªÉ t√≠nh PnL)"

            pnl_icon = "‚ö™Ô∏è" if is_desynced else ("üü¢" if pnl_usd >= 0 else "üî¥")
            score_display = f"{trade.get('entry_score', 0.0):.1f}‚Üí{trade.get('last_score', 0.0):.1f}"

            # Logic hi·ªÉn th·ªã zone th√¥ng minh h∆°n
            entry_zone = trade.get('entry_zone', 'N/A')
            last_zone = trade.get('last_zone') # L·∫•y last_zone, c√≥ th·ªÉ l√† None
            if last_zone and last_zone != entry_zone:
                zone_display = f"{entry_zone}‚Üí{last_zone}"
            else:
                zone_display = entry_zone

            tactic_info = f"({trade.get('opened_by_tactic', 'N/A')} | {score_display} | {zone_display})"


            print(f"{pnl_icon}{' ‚ö†Ô∏è DESYNC' if is_desynced else ''} {symbol}-{trade.get('interval', 'N/A')} {tactic_info} PnL: ${pnl_usd:,.2f} ({pnl_percent:+.2f}%)")
            print(f"   {price_info}")
    print("="*80)

def close_manual_trade(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        valid_trades, _ = reconcile_state(bnc)
        if not valid_trades: print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh h·ª£p l·ªá ƒë·ªÉ ƒë√≥ng."); return
        display_list = [f"{t['symbol']}-{t['interval']}" for t in valid_trades]
        trade_to_close = select_from_list(valid_trades, "üëâ Ch·ªçn l·ªánh c·∫ßn ƒë√≥ng: ", display_list)
        if not trade_to_close: print("H·ªßy."); return
        state = load_state()
        create_backup()
        success, pnl, spent = process_and_log_closed_trade(bnc, trade_to_close, "Panel Manual", state)
        if success:
            state['pnl_closed_last_session'] = state.get('pnl_closed_last_session', 0) + pnl
            state['money_spent_on_trades_last_session'] = 0
            state['usdt_balance_end_of_last_session'], _ = get_usdt_fund(bnc)
            save_state(state)
            write_trades_to_csv([trade_to_close])
    finally: release_lock()

def close_all_trades(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        valid_trades, _ = reconcile_state(bnc)
        if not valid_trades: print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh h·ª£p l·ªá ƒë·ªÉ ƒë√≥ng."); return
        if input(f"‚ö†Ô∏è C·∫¢NH B√ÅO: S·∫Ω ƒë√≥ng {len(valid_trades)} l·ªánh. Ti·∫øp t·ª•c? (y/n): ").lower() != 'y':
            print("H·ªßy."); return
        state = load_state()
        create_backup()
        closed, pnl_session, spent_session = [], 0.0, 0.0
        for trade in list(valid_trades):
            success, pnl, spent = process_and_log_closed_trade(bnc, trade, "Panel Close All", state)
            if success:
                closed.append(trade); pnl_session += pnl; spent_session += spent
        if closed:
            state['pnl_closed_last_session'] = pnl_session
            state['money_spent_on_trades_last_session'] = 0
            state['usdt_balance_end_of_last_session'], _ = get_usdt_fund(bnc)
            save_state(state)
            write_trades_to_csv(closed)
    finally: release_lock()

def extend_stale_check(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        valid_trades, _ = reconcile_state(bnc)
        if not valid_trades: print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh h·ª£p l·ªá ƒë·ªÉ gia h·∫°n."); return
        display_list = [f"{t['symbol']}-{t['interval']}" for t in valid_trades]
        trade_to_extend = select_from_list(valid_trades, "üëâ Ch·ªçn l·ªánh c·∫ßn gia h·∫°n: ", display_list)
        if not trade_to_extend: print("H·ªßy."); return
        hours = float(input("üëâ Nh·∫≠p s·ªë gi·ªù mu·ªën gia h·∫°n: "))
        if hours <= 0: print("‚ùå S·ªë gi·ªù ph·∫£i d∆∞∆°ng."); return
        state = load_state()
        create_backup()
        for trade in state['active_trades']:
            if trade['trade_id'] == trade_to_extend['trade_id']:
                override_until = datetime.now(VIETNAM_TZ) + timedelta(hours=hours)
                trade['stale_override_until'] = override_until.isoformat()
                print(f"\n‚úÖ L·ªánh {trade['symbol']} ƒë√£ gia h·∫°n ƒë·∫øn: {override_until.strftime('%Y-%m-%d %H:%M:%S')}")
                save_state(state)
                return
    except (ValueError, TypeError): print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")
    finally: release_lock()

def open_manual_trade(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        print("\n" + "üî•" * 10 + " M·ªû L·ªÜNH M·ªöI TH·ª¶ C√îNG " + "üî•" * 10)
        state = load_state()
        if state is None: return
        available_symbols = parse_env_variable("SYMBOLS_TO_SCAN")
        if not available_symbols: print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc symbol t·ª´ .env."); return
        symbol = select_from_list(available_symbols, "üëâ Ch·ªçn Symbol (Enter ƒë·ªÉ h·ªßy): ", available_symbols)
        if not symbol: print("H·ªßy."); return
        interval = select_from_list(INTERVALS, "üëâ Ch·ªçn Interval (Enter ƒë·ªÉ h·ªßy): ", INTERVALS)
        if not interval: print("H·ªßy."); return
        tactic_name = select_from_list(TACTICS, "üëâ Ch·ªçn Tactic (Enter ƒë·ªÉ h·ªßy): ", TACTICS)
        if not tactic_name: print("H·ªßy."); return
        tactic_cfg = TACTICS_LAB.get(tactic_name, {})
        available_usdt, _ = get_usdt_fund(bnc)
        print(f"üíµ USDT kh·∫£ d·ª•ng: ${available_usdt:,.2f}")
        invested_amount = float(input(f"üëâ Nh·∫≠p v·ªën USDT: "))
        if invested_amount > available_usdt: print("‚ùå Kh√¥ng ƒë·ªß USDT."); return
        min_order_value = GENERAL_CONFIG.get('MIN_ORDER_VALUE_USDT', 11.0)
        if invested_amount < min_order_value: print(f"‚ùå V·ªën ph·∫£i >= ${min_order_value}."); return
        if input(f"‚ö†Ô∏è ƒê·∫∑t l·ªánh MUA {symbol} v·ªõi ${invested_amount:,.2f}? (y/n): ").lower() != 'y':
            print("H·ªßy."); return
        create_backup()
        order = bnc.place_market_order(symbol=symbol, side="BUY", quote_order_qty=round(invested_amount, 2))
        if not (order and float(order.get('executedQty', 0)) > 0):
            raise Exception("L·ªánh kh√¥ng kh·ªõp ho·∫∑c kh√¥ng c√≥ ph·∫£n h·ªìi.")
        qty, cost = float(order['executedQty']), float(order['cummulativeQuoteQty'])
        price = cost / qty if qty > 0 else 0
        sl_price = price * (1 - RISK_RULES_CONFIG["MAX_SL_PERCENT_BY_TIMEFRAME"].get(interval, 0.08))
        tp_price = price + ((price - sl_price) * tactic_cfg.get("RR", 2.0))
        new_trade = {
            "trade_id": str(uuid.uuid4()), "symbol": symbol, "interval": interval, "status": "ACTIVE",
            "opened_by_tactic": tactic_name, "trade_type": "LONG", "entry_price": price,
            "quantity": qty, "tp": tp_price, "sl": sl_price, "initial_sl": sl_price,
            "initial_entry": {"price": price, "quantity": qty, "invested_usd": cost},
            "total_invested_usd": cost, "entry_time": datetime.now(VIETNAM_TZ).isoformat(),
            "entry_score": 5.0, "last_score": 5.0, "entry_zone": "Manual", "last_zone": "Manual",
            "tactic_used": ["Manual_Entry"], "binance_market_order_id": order['orderId'],
            "dca_entries": [], "realized_pnl_usd": 0.0, "peak_pnl_percent": 0.0,
            "tp1_hit": False, "close_retry_count": 0
        }
        state['active_trades'].append(new_trade)
        state['pnl_closed_last_session'] = 0.0
        state['money_spent_on_trades_last_session'] = cost
        state['usdt_balance_end_of_last_session'], _ = get_usdt_fund(bnc)
        save_state(state)
        print(f"‚úÖ ƒê√£ th√™m l·ªánh {symbol} v√† c·∫≠p nh·∫≠t state k·∫ø to√°n th√†nh c√¥ng.")
    except (ValueError, TypeError): print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.")
    except Exception as e: print(f"‚ùå L·ªói: {e}")
    finally: release_lock()

def reconcile_manually(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        print("\n--- Ch·ª©c nƒÉng: ƒê·ªìng b·ªô l·∫°i tr·∫°ng th√°i (S·ª≠a 'l·ªánh ma') ---")
        _, desynced_trades = reconcile_state(bnc)
        if not desynced_trades: print("\n‚úÖ Tr·∫°ng th√°i ƒë√£ ƒë·ªìng b·ªô."); return
        state = load_state()
        create_backup()
        print("\n" + "‚ö†Ô∏è" * 5 + " C√ÅC L·ªÜNH B·∫§T ƒê·ªíNG B·ªò ƒê√É T√åM TH·∫§Y " + "‚ö†Ô∏è" * 5)
        for i, trade in enumerate(desynced_trades): print(f"{i+1}. {trade['symbol']}")
        if input("\nüëâ X√≥a c√°c l·ªánh n√†y kh·ªèi danh s√°ch ƒëang m·ªü? (y/n): ").lower() != 'y':
            print("H·ªßy."); return
        trade_ids_to_remove = {t['trade_id'] for t in desynced_trades}
        for trade in desynced_trades:
            trade.update({'status': 'Closed (Desynced by Panel)', 'exit_time': datetime.now(VIETNAM_TZ).isoformat(), 'pnl_usd': 0})
            state.setdefault('trade_history', []).append(trade)
        state['active_trades'] = [t for t in state['active_trades'] if t['trade_id'] not in trade_ids_to_remove]
        print(f"\n‚úÖ ƒê√£ d·ªçn d·∫πp {len(desynced_trades)} l·ªánh.")
        state['pnl_closed_last_session'] = 0.0
        state['money_spent_on_trades_last_session'] = 0.0
        state['usdt_balance_end_of_last_session'], _ = get_usdt_fund(bnc)
        save_state(state)
        write_trades_to_csv(desynced_trades)
    finally: release_lock()

def view_csv_history():
    print("\n--- üìú 20 Giao d·ªãch cu·ªëi c√πng (t·ª´ file CSV) üìú ---")
    try:
        if not os.path.exists(TRADE_HISTORY_CSV_FILE): print("‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y file trade_history.csv."); return
        df = pd.read_csv(TRADE_HISTORY_CSV_FILE)
        if df.empty: print("‚ÑπÔ∏è File l·ªãch s·ª≠ tr·ªëng."); return
        cols = ['exit_time', 'symbol', 'opened_by_tactic', 'pnl_usd', 'pnl_percent', 'holding_duration_hours']
        df_display = df[[c for c in cols if c in df.columns]].copy()
        df_display['exit_time'] = pd.to_datetime(df_display['exit_time']).dt.strftime('%Y-%m-%d %H:%M')
        df_display['pnl_usd'] = df_display['pnl_usd'].map('${:,.2f}'.format)
        df_display['pnl_percent'] = df_display['pnl_percent'].map('{:,.2f}%'.format)
        print(df_display.sort_values(by='exit_time', ascending=False).head(20).to_string(index=False))
    except Exception as e: print(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc file CSV: {e}")

def sell_manual_assets(bnc: BinanceConnector):
    print("\n" + "üóëÔ∏è" * 10 + " C√îNG C·ª§ B√ÅN COIN L·∫∫ " + "üóëÔ∏è" * 10)
    print("Ch·ª©c nƒÉng n√†y b√°n coin tr√™n s√†n v√† KH√îNG ·∫£nh h∆∞·ªüng ƒë·∫øn state c·ªßa bot.")
    try:
        print("\n... ƒêang l·∫•y s·ªë d∆∞ v√† gi√° t·ª´ Binance...")
        account = bnc.get_account_balance()
        if not account:
            print("‚ùå Kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞."); return

        balances = {b['asset']: float(b['free']) for b in account.get('balances', []) if float(b['free']) > 0}
        
        # Ch·ªâ l·∫•y c√°c coin c√≥ trong file .env ƒë·ªÉ tr√°nh b√°n nh·∫ßm
        env_symbols = parse_env_variable("SYMBOLS_TO_SCAN")
        env_assets = {s.replace("USDT", "") for s in env_symbols}
        
        assets_to_check = {asset: qty for asset, qty in balances.items() if asset in env_assets and asset not in ['USDT', 'BNB', 'BUSD', 'FDUSD']}

        if not assets_to_check:
            print("\n‚úÖ Kh√¥ng t√¨m th·∫•y coin l·∫ª n√†o (trong danh s√°ch .env) ƒë·ªÉ b√°n."); return

        # L·∫•y gi√° cho t·∫•t c·∫£ c√°c coin c·∫ßn ki·ªÉm tra
        all_prices_response = requests.get("https://api.binance.com/api/v3/ticker/price", timeout=10).json()
        prices = {p['symbol']: float(p['price']) for p in all_prices_response}

        print("\n--- DANH S√ÅCH COIN L·∫∫ C√ì TH·ªÇ B√ÅN ---")
        
        display_list = []
        options = []
        assets_with_info = []

        for asset, qty in assets_to_check.items():
            symbol = f"{asset}USDT"
            price = prices.get(symbol, 0)
            value_usdt = qty * price
            
            info_line = f"{asset} (SL: {qty:.8f}) - Tr·ªã gi√°: ~${value_usdt:,.2f}"
            can_sell = value_usdt >= GENERAL_CONFIG.get('MIN_ORDER_VALUE_USDT', 11.0)
            
            if not can_sell:
                info_line += " (Gi√° tr·ªã qu√° nh·ªè ƒë·ªÉ b√°n)"
            
            display_list.append(info_line)
            options.append(asset)
            assets_with_info.append({"asset": asset, "qty": qty, "value": value_usdt, "can_sell": can_sell, "symbol": symbol})

        choice_asset_name = select_from_list(options, "\nüëâ Ch·ªçn coin ƒë·ªÉ b√°n (Enter ƒë·ªÉ tho√°t): ", display_list)
        if not choice_asset_name:
            print("H·ªßy thao t√°c."); return

        # T√¨m th√¥ng tin c·ªßa coin ƒë√£ ch·ªçn
        chosen_asset_info = next((a for a in assets_with_info if a['asset'] == choice_asset_name), None)

        if not chosen_asset_info['can_sell']:
            print(f"‚ùå Kh√¥ng th·ªÉ b√°n {choice_asset_name} v√¨ gi√° tr·ªã c·ªßa n√≥ qu√° th·∫•p.")
            return

        if input(f"‚ö†Ô∏è B√°n {chosen_asset_info['qty']:.8f} {choice_asset_name}? (y/n): ").lower() != 'y':
            print("H·ªßy thao t√°c."); return

        try:
            print(f"\n‚ö°Ô∏è ƒêang b√°n {chosen_asset_info['qty']:.8f} {choice_asset_name}...")
            formatted_qty = bnc._format_quantity(chosen_asset_info['symbol'], chosen_asset_info['qty'])
            bnc.place_market_order(symbol=chosen_asset_info['symbol'], side="SELL", quantity=formatted_qty)
            print(f"‚úÖ G·ª≠i l·ªánh b√°n th√†nh c√¥ng.")
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ b√°n {choice_asset_name}: {e}")

    except Exception as e:
        print(f"\nüî•üî• L·ªói: {e}")
        traceback.print_exc()

def manual_report(bnc: BinanceConnector):
    print("\n" + "üìú" * 10 + " T·∫†O B√ÅO C√ÅO TH·ª¶ C√îNG " + "üìú" * 10)
    state = load_state()
    if not state:
        print("‚ùå Kh√¥ng th·ªÉ t·∫£i file tr·∫°ng th√°i.")
        return

    print("... ƒêang t√≠nh to√°n d·ªØ li·ªáu b√°o c√°o...")
    available_usdt, total_usdt = get_usdt_fund(bnc)
    active_trades = state.get('active_trades', [])
    active_symbols = list(set([t['symbol'] for t in active_trades]))
    realtime_prices = {sym: get_current_price(sym) for sym in active_symbols if sym}

    # L·ªçc ra nh·ªØng symbol kh√¥ng l·∫•y ƒë∆∞·ª£c gi√°
    failed_symbols = [sym for sym, price in realtime_prices.items() if price is None]
    if failed_symbols:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ l·∫•y gi√° c·ªßa {', '.join(failed_symbols)}. C√°c coin n√†y s·∫Ω kh√¥ng ƒë∆∞·ª£c t√≠nh v√†o PnL m·ªü.")
        realtime_prices = {sym: price for sym, price in realtime_prices.items() if price is not None}
    
    equity = calculate_total_equity(state, total_usdt, realtime_prices)
    if equity is None:
        print("‚ùå Kh√¥ng th·ªÉ t√≠nh t·ªïng t√†i s·∫£n do l·ªói API. Vui l√≤ng th·ª≠ l·∫°i.")
        return
    
    print("\nCh·ªçn lo·∫°i b√°o c√°o:")
    print("  1. B√°o c√°o ƒê·ªông (Dynamic - Ng·∫Øn g·ªçn)")
    print("  2. B√°o c√°o T·ªïng k·∫øt (Daily - Chi ti·∫øt)")
    report_choice = input("üëâ L·ª±a ch·ªçn c·ªßa b·∫°n (Enter ƒë·ªÉ h·ªßy): ")

    report_content = ""
    if report_choice == '1':
        report_content = build_dynamic_alert_text(state, total_usdt, available_usdt, realtime_prices, equity)
    elif report_choice == '2':
        # H√†m daily summary c·∫ßn m·ªôt s·ªë key t·∫°m th·ªùi, ta t·∫°o ch√∫ng r·ªóng
        state['temp_newly_opened_trades'] = []
        state['temp_newly_closed_trades'] = []
        report_content = build_daily_summary_text(state, total_usdt, available_usdt, realtime_prices, equity)
    else:
        print("H·ªßy."); return

    print("\n" + "="*80)
    print(report_content)
    print("="*80)

    if ALERT_CONFIG.get("DISCORD_WEBHOOK_URL") and input("\nüëâ G·ª≠i b√°o c√°o n√†y l√™n Discord? (y/n): ").lower() == 'y':
        print("... ƒêang g·ª≠i l√™n Discord...")
        send_discord_message_chunks(report_content, force=True)
        print("‚úÖ ƒê√£ g·ª≠i.")
    else:
        print("Kh√¥ng g·ª≠i ho·∫∑c ch∆∞a c·∫•u h√¨nh webhook Discord.")

def main_menu():
    try:
        with BinanceConnector(network=TRADING_MODE) as bnc:
            if not bnc.test_connection(): return
            while True:
                print("\n" + "="*12 + f" üìä B·∫¢NG ƒêI·ªÄU KHI·ªÇN (LIVE-{TRADING_MODE.upper()}) üìä " + "="*12)
                print("1. [Xem] L√†m m·ªõi Dashboard & L·ªánh m·ªü")
                print("2. [H√†nh ƒë·ªông] ƒê√≥ng m·ªôt l·ªánh c·ªßa Bot")
                print("3. [H√†nh ƒë·ªông] ƒê√≥ng T·∫§T C·∫¢ l·ªánh c·ªßa Bot")
                print("4. [H√†nh ƒë·ªông] Gia h·∫°n cho m·ªôt l·ªánh")
                print("5. [H√†nh ƒë·ªông] M·ªü l·ªánh m·ªõi cho Bot")
                print("6. [B·∫£o tr√¨] ƒê·ªìng b·ªô l·∫°i State (S·ª≠a 'l·ªánh ma')")
                print("7. [B√°o c√°o] Xem 20 giao d·ªãch cu·ªëi t·ª´ CSV")
                print("8. [D·ªçn d·∫πp] B√°n coin l·∫ª tr√™n s√†n (t·ª´ .env)")
                print("9. [B√°o c√°o] T·∫°o v√† g·ª≠i b√°o c√°o th·ªß c√¥ng")
                print("0. Tho√°t")
                print("="*61)
                choice = input("üëâ Vui l√≤ng ch·ªçn m·ªôt ch·ª©c nƒÉng: ")
                if choice == '1': show_full_dashboard(bnc)
                elif choice == '2': close_manual_trade(bnc)
                elif choice == '3': close_all_trades(bnc)
                elif choice == '4': extend_stale_check(bnc)
                elif choice == '5': open_manual_trade(bnc)
                elif choice == '6': reconcile_manually(bnc)
                elif choice == '7': view_csv_history()
                elif choice == '8': sell_manual_assets(bnc)
                elif choice == '9': manual_report(bnc)
                elif choice == '0': print("üëã T·∫°m bi·ªát!"); break
                else: print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        print(f"\nüî•üî•üî• L·ªói nghi√™m tr·ªçng: {e}"); traceback.print_exc()

if __name__ == "__main__":
    signal.signal(signal.SIGINT, handle_exit_signals)
    if sys.platform != "win32":
        try:
            signal.signal(signal.SIGTSTP, handle_exit_signals)
        except AttributeError:
            pass
    main_menu()
