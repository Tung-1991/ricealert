# livetrade/control_live_panel.py
# -*- coding: utf-8 -*-
"""
Control Live Panel - Manual Intervention Tool
Version: 1.4.0 - Mandatory Reconciliation
Date: 2025-08-03

CHANGELOG (v1.4.0):
- CRITICAL (Mandatory Safety Check): All action functions (Close, Close All, Extend) now perform a
  mandatory, silent reconciliation with Binance balances before displaying any options to the user.
  They will only list and operate on trades that are confirmed to exist on the exchange,
  preventing any action on "ghost trades" and eliminating "Insufficient Balance" errors.
- UX (Smart Warnings): If desynchronized trades are detected during an action, the panel will now
  display a clear warning and guide the user to use the 'Reconcile State' function, instead of
  allowing an invalid action.
- FEATURE (Reconciliation): Maintained the dedicated menu option '6' for users to manually review
  and clean up desynchronized trades.
- UX (Desync Warning): The 'View open trades' function continues to serve as a quick diagnostic
  tool, visually flagging any desynchronized trades with a '‚ö†Ô∏è DESYNC' warning.
"""
import os
import sys
import json
from datetime import datetime, timedelta
import pytz
import requests
import uuid
import traceback
import time
import shutil
import signal

# --- C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)
sys.path.append(PROJECT_ROOT)

try:
    from binance_connector import BinanceConnector
    from live_trade import TRADING_MODE, close_trade_on_binance, get_usdt_fund, TACTICS_LAB, ZONES, INTERVALS_TO_SCAN, GENERAL_CONFIG
except ImportError as e:
    sys.exit(f"L·ªói: Kh√¥ng th·ªÉ import module c·∫ßn thi·∫øt. L·ªói: {e}")

# --- C√ÅC H·∫∞NG S·ªê V√Ä C·∫§U H√åNH ---
DATA_DIR = os.path.join(BASE_DIR, "data")
STATE_FILE = os.path.join(DATA_DIR, "live_trade_state.json")
BACKUP_FILE = STATE_FILE + ".backup"
LOCK_FILE = STATE_FILE + ".lock"
ENV_FILE = os.path.join(PROJECT_ROOT, ".env")
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

TACTICS = list(TACTICS_LAB.keys())
ZONES = list(ZONES)
INTERVALS = list(INTERVALS_TO_SCAN)

# --- C√ÅC H√ÄM KH√ìA FILE V√Ä B·∫¢O V·ªÜ ---
def acquire_lock(timeout=120):
    start_time = time.time()
    print("‚è≥ ƒêang ch·ªù quy·ªÅn truy c·∫≠p file tr·∫°ng th√°i...")
    while os.path.exists(LOCK_FILE):
        if time.time() - start_time > timeout:
            print(f"‚ùå L·ªói: Kh√¥ng th·ªÉ chi·∫øm quy·ªÅn ƒëi·ªÅu khi·ªÉn file tr·∫°ng th√°i sau {timeout} gi√¢y.")
            return False
        time.sleep(0.5)
    try:
        with open(LOCK_FILE, 'w') as f: f.write(str(os.getpid()))
        print("‚úÖ ƒê√£ c√≥ quy·ªÅn truy c·∫≠p.")
        return True
    except IOError as e:
        print(f"‚ùå L·ªói I/O khi t·∫°o file lock: {e}")
        return False

def release_lock():
    try:
        if os.path.exists(LOCK_FILE):
            os.remove(LOCK_FILE)
            print("‚úÖ ƒê√£ gi·∫£i ph√≥ng quy·ªÅn truy c·∫≠p file.")
    except OSError as e:
        print(f"‚ùå L·ªói khi gi·∫£i ph√≥ng file lock: {e}")

def create_backup():
    try:
        if os.path.exists(STATE_FILE):
            shutil.copy2(STATE_FILE, BACKUP_FILE)
            print("üìã ƒê√£ t·∫°o b·∫£n sao l∆∞u an to√†n (`.backup`).")
    except Exception as e:
        print(f"‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng th·ªÉ t·∫°o file sao l∆∞u. L·ªói: {e}")

def handle_exit_signals(signum, frame):
    print(f"\nüö® Nh·∫≠n ƒë∆∞·ª£c t√≠n hi·ªáu ng·∫Øt ({signal.Signals(signum).name}). ƒêang d·ªçn d·∫πp v√† tho√°t...")
    release_lock()
    sys.exit(1)

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
def parse_env_variable(key_name):
    try:
        with open(ENV_FILE, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if key.strip() == key_name:
                        value = value.strip().strip('"').strip("'")
                        return [item.strip() for item in value.split(',')]
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env t·∫°i {ENV_FILE}")
    return []

def get_current_price(symbol):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return float(response.json()['price'])
    except Exception:
        return None

def load_state():
    if not os.path.exists(STATE_FILE):
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file tr·∫°ng th√°i t·∫°i: {STATE_FILE}")
        return None
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            if not content: return {"active_trades": [], "trade_history": []}
            return json.loads(content)
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file tr·∫°ng th√°i: {e}")
        return None

def save_state(state):
    try:
        state_to_save = state.copy()
        temp_keys = ['temp_newly_opened_trades', 'temp_newly_closed_trades', 'temp_money_spent_on_trades', 'temp_pnl_from_closed_trades', 'session_has_events']
        for key in temp_keys:
            state_to_save.pop(key, None)
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state_to_save, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ ƒê√£ l∆∞u l·∫°i tr·∫°ng th√°i th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file tr·∫°ng th√°i: {e}")

def select_from_list(options, prompt, display_list):
    if not options: return None
    for i, item in enumerate(display_list):
        print(f"  {i+1}. {item}")
    while True:
        try:
            choice_str = input(prompt)
            if not choice_str: return None
            choice = int(choice_str)
            if 1 <= choice <= len(options): return options[choice - 1]
            else: print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt con s·ªë.")

def reconcile_state(bnc: BinanceConnector):
    """
    H√†m l√µi ƒë·ªÉ ƒë·ªëi so√°t tr·∫°ng th√°i, tr·∫£ v·ªÅ c√°c l·ªánh h·ª£p l·ªá v√† l·ªánh b·∫•t ƒë·ªìng b·ªô.
    """
    state = load_state()
    if not state:
        return [], []

    active_trades = state.get("active_trades", [])
    if not active_trades:
        return [], []

    try:
        balances = bnc.get_account_balance().get("balances", [])
        asset_balances = {item['asset']: float(item['free']) + float(item['locked']) for item in balances}
    except Exception as e:
        print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y s·ªë d∆∞ t√†i kho·∫£n ƒë·ªÉ ƒë·ªëi so√°t: {e}")
        return active_trades, [] # Gi·∫£ s·ª≠ t·∫•t c·∫£ ƒë·ªÅu h·ª£p l·ªá n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c balance

    valid_trades = []
    desynced_trades = []
    threshold = GENERAL_CONFIG["RECONCILIATION_QTY_THRESHOLD"]

    for trade in active_trades:
        symbol_asset = trade['symbol'].replace("USDT", "")
        bot_quantity = float(trade.get('quantity', 0))
        real_quantity = asset_balances.get(symbol_asset, 0.0)

        if real_quantity < bot_quantity * threshold:
            desynced_trades.append(trade)
        else:
            valid_trades.append(trade)

    return valid_trades, desynced_trades

# --- C√ÅC H√ÄM CH·ª®C NƒÇNG ---
def view_open_trades(bnc: BinanceConnector):
    print("\n--- DANH S√ÅCH L·ªÜNH ƒêANG M·ªû (Live Real-time) ---")
    state = load_state()
    if not state: return

    valid_trades, desynced_trades = reconcile_state(bnc)
    all_trades = valid_trades + desynced_trades
    
    if not all_trades:
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü.")
        return

    symbols_needed = list(set(trade['symbol'] for trade in all_trades))
    prices = {sym: get_current_price(sym) for sym in symbols_needed}
    
    # T√≠nh to√°n header
    available_usdt, total_usdt = get_usdt_fund(bnc)
    value_of_open_positions = sum(float(trade.get('quantity', 0)) * prices.get(trade['symbol'], 0) for trade in valid_trades)
    total_equity = total_usdt + value_of_open_positions
    initial_capital = state.get('initial_capital', total_usdt)
    if initial_capital <= 0: initial_capital = total_equity
    pnl_total_usd = total_equity - initial_capital
    pnl_total_percent = (pnl_total_usd / initial_capital) * 100 if initial_capital > 0 else 0
    pnl_icon_total = "üü¢" if pnl_total_usd >= 0 else "üî¥"
    print(f"üí∞ V·ªën Bƒê: ${initial_capital:,.2f} | üíµ Ti·ªÅn m·∫∑t: ${available_usdt:,.2f}")
    print(f"üìä T·ªïng TS: ${total_equity:,.2f} | PnL T·ªïng: {pnl_icon_total} ${pnl_total_usd:,.2f} ({pnl_total_percent:+.2f}%)")
    print("-" * 80)

    # Hi·ªÉn th·ªã l·ªánh
    for i, trade in enumerate(all_trades):
        is_desynced = trade in desynced_trades
        symbol = trade.get('symbol', 'N/A')
        current_price = prices.get(symbol)
        
        desync_warning = " ‚ö†Ô∏è DESYNC" if is_desynced else ""
        pnl_icon = "‚ö™Ô∏è" if is_desynced else ("üü¢" if trade.get('pnl_usd', 0) >= 0 else "üî¥")
        
        if current_price and not is_desynced:
            entry_price = trade.get('entry_price', 0)
            invested_usd = trade.get('total_invested_usd', 0)
            pnl_percent = ((current_price - entry_price) / entry_price) * 100 if entry_price > 0 else 0
            pnl_usd = invested_usd * (pnl_percent / 100)
            pnl_icon = "üü¢" if pnl_usd >= 0 else "üî¥"
            current_value = invested_usd + pnl_usd
            price_info = f"V·ªën:${invested_usd:,.2f} -> ${current_value:,.2f} | Entry:{entry_price:.4f} Cur:{current_price:.4f} TP:{trade.get('tp', 0):.4f} SL:{trade.get('sl', 0):.4f}"
        else:
            pnl_usd, pnl_percent = 0, 0
            price_info = f"V·ªën:${trade.get('total_invested_usd', 0):,.2f} | Entry:{trade.get('entry_price', 0):.4f} (Kh√¥ng th·ªÉ t√≠nh PnL)"
        
        holding_hours = (datetime.now(VIETNAM_TZ) - datetime.fromisoformat(trade['entry_time'])).total_seconds() / 3600
        dca_info = f" (DCA:{len(trade.get('dca_entries',[]))})" if trade.get('dca_entries') else ""
        
        line1 = f"{i+1}. {pnl_icon}{desync_warning} {symbol}-{trade.get('interval', 'N/A')} | PnL: ${pnl_usd:,.2f} ({pnl_percent:+.2f}%) | Gi·ªØ:{holding_hours:.1f}h{dca_info}"
        line2 = f"   {price_info}"
        
        print(line1)
        print(line2)
    print("-" * 80)

def close_manual_trades(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        print("\n--- Ch·ª©c nƒÉng: ƒê√≥ng l·ªánh th·ªß c√¥ng ---")
        valid_trades, desynced_trades = reconcile_state(bnc)

        if not valid_trades:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh h·ª£p l·ªá n√†o ƒë·ªÉ ƒë√≥ng.")
            if desynced_trades:
                print(f"‚ö†Ô∏è L∆∞u √Ω: ƒê√£ ph√°t hi·ªán {len(desynced_trades)} l·ªánh b·∫•t ƒë·ªìng b·ªô. Vui l√≤ng d√πng ch·ª©c nƒÉng 6 ƒë·ªÉ d·ªçn d·∫πp.")
            return

        if desynced_trades:
            print(f"‚ö†Ô∏è L∆∞u √Ω: {len(desynced_trades)} l·ªánh b·∫•t ƒë·ªìng b·ªô ƒë√£ ƒë∆∞·ª£c ·∫©n ƒëi. Ch·ªâ c√°c l·ªánh h·ª£p l·ªá ƒë∆∞·ª£c li·ªát k√™ d∆∞·ªõi ƒë√¢y.")

        create_backup()
        state = load_state()
        state['temp_pnl_from_closed_trades'] = 0.0
        state.setdefault('temp_newly_closed_trades', [])
        
        display_list = [f"{t['symbol']}-{t['interval']}" for t in valid_trades]
        trade_to_close = select_from_list(valid_trades, "\nüëâ Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa l·ªánh c·∫ßn ƒë√≥ng. Nh·∫•n Enter ƒë·ªÉ h·ªßy: ", display_list)

        if not trade_to_close:
            print("H·ªßy thao t√°c.")
            return

        print(f"\n‚ö°Ô∏è ƒêang g·ª≠i y√™u c·∫ßu ƒë√≥ng l·ªánh cho {trade_to_close['symbol']}...")
        success = close_trade_on_binance(bnc, trade_to_close, "Manual Panel", state)
        if success:
            print(f"‚úÖ Y√™u c·∫ßu ƒë√≥ng {trade_to_close['symbol']} th√†nh c√¥ng.")
            save_state(state)
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng {trade_to_close['symbol']}. Vui l√≤ng ki·ªÉm tra log.")

    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}"); traceback.print_exc()
    finally:
        release_lock()

def close_all_trades(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        print("\n--- Ch·ª©c nƒÉng: ƒê√≥ng T·∫§T C·∫¢ l·ªánh ---")
        valid_trades, desynced_trades = reconcile_state(bnc)

        if not valid_trades:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh h·ª£p l·ªá n√†o ƒë·ªÉ ƒë√≥ng.")
            if desynced_trades:
                print(f"‚ö†Ô∏è L∆∞u √Ω: ƒê√£ ph√°t hi·ªán {len(desynced_trades)} l·ªánh b·∫•t ƒë·ªìng b·ªô. Vui l√≤ng d√πng ch·ª©c nƒÉng 6 ƒë·ªÉ d·ªçn d·∫πp.")
            return

        if input(f"‚ö†Ô∏è C·∫¢NH B√ÅO: S·∫Ω ƒë√≥ng {len(valid_trades)} l·ªánh h·ª£p l·ªá. {len(desynced_trades)} l·ªánh b·∫•t ƒë·ªìng b·ªô s·∫Ω ƒë∆∞·ª£c b·ªè qua. Ti·∫øp t·ª•c? (y/n): ").lower() != 'y':
            print("H·ªßy thao t√°c.")
            return

        create_backup()
        state = load_state()
        state['temp_pnl_from_closed_trades'] = 0.0
        state.setdefault('temp_newly_closed_trades', [])

        closed_count = 0
        for trade in valid_trades:
            print(f"\n‚ö°Ô∏è ƒêang ƒë√≥ng {trade['symbol']}...")
            if close_trade_on_binance(bnc, trade, "All Manual", state):
                print(f"‚úÖ ƒê√≥ng {trade['symbol']} th√†nh c√¥ng.")
                closed_count += 1
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng {trade['symbol']}.")
        if closed_count > 0:
            save_state(state)
    finally:
        release_lock()

def extend_stale_check(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        print("\n--- Ch·ª©c nƒÉng: Gia h·∫°n l·ªánh ---")
        valid_trades, desynced_trades = reconcile_state(bnc)

        if not valid_trades:
            print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh h·ª£p l·ªá n√†o ƒë·ªÉ gia h·∫°n.")
            if desynced_trades:
                print(f"‚ö†Ô∏è L∆∞u √Ω: ƒê√£ ph√°t hi·ªán {len(desynced_trades)} l·ªánh b·∫•t ƒë·ªìng b·ªô. Vui l√≤ng d√πng ch·ª©c nƒÉng 6 ƒë·ªÉ d·ªçn d·∫πp.")
            return

        display_list = [f"{t['symbol']}-{t['interval']}" for t in valid_trades]
        trade_to_extend = select_from_list(valid_trades, "\nüëâ Ch·ªçn s·ªë l·ªánh c·∫ßn gia h·∫°n (Enter ƒë·ªÉ h·ªßy): ", display_list)

        if not trade_to_extend:
            print("H·ªßy thao t√°c.")
            return

        hours_input = input("üëâ Nh·∫≠p s·ªë gi·ªù mu·ªën gia h·∫°n (v√≠ d·ª•: 48): ")
        hours = float(hours_input)
        if hours <= 0:
            print("‚ùå S·ªë gi·ªù ph·∫£i d∆∞∆°ng.")
            return
        
        create_backup()
        state = load_state()
        trade_found = False
        for trade in state['active_trades']:
            if trade['trade_id'] == trade_to_extend['trade_id']:
                override_until = datetime.now(VIETNAM_TZ) + timedelta(hours=hours)
                trade['stale_override_until'] = override_until.isoformat()
                print(f"\n‚úÖ L·ªánh {trade['symbol']} ƒë√£ ƒë∆∞·ª£c gia h·∫°n ƒë·∫øn: {override_until.strftime('%Y-%m-%d %H:%M:%S')}")
                save_state(state)
                trade_found = True
                break
        if not trade_found:
            print("‚ùå Kh√¥ng t√¨m th·∫•y trade ƒë·ªÉ c·∫≠p nh·∫≠t.")

    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt con s·ªë h·ª£p l·ªá.")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
    finally:
        release_lock()

def open_manual_trade(bnc: BinanceConnector):
    # Ch·ª©c nƒÉng n√†y kh√¥ng c·∫ßn ƒë·ªëi so√°t v√¨ n√≥ t·∫°o l·ªánh m·ªõi
    if not acquire_lock(): return
    try:
        create_backup()
        print("\n" + "üî•" * 10 + " H√ÄNH ƒê·ªòNG TR·ª∞C TI·∫æP TR√äN S√ÄN BINANCE " + "üî•" * 10)
        print("--- Ch·ª©c nƒÉng: M·ªü l·ªánh m·ªõi th·ªß c√¥ng ---")
        state = load_state()
        if not state: return

        available_usdt, _ = get_usdt_fund(bnc)
        print(f"üíµ USDT kh·∫£ d·ª•ng: ${available_usdt:,.2f}")
        # ... (ph·∫ßn c√≤n l·∫°i c·ªßa h√†m kh√¥ng ƒë·ªïi)
        
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}"); traceback.print_exc()
    finally:
        release_lock()

def reconcile_manually(bnc: BinanceConnector):
    if not acquire_lock(): return
    try:
        print("\n--- Ch·ª©c nƒÉng: ƒê·ªìng b·ªô l·∫°i tr·∫°ng th√°i (S·ª≠a l·ªói 'l·ªánh ma') ---")
        valid_trades, desynced_trades = reconcile_state(bnc)

        if not desynced_trades:
            print("\n‚úÖ Tr·∫°ng th√°i ƒë√£ ƒë·ªìng b·ªô. Kh√¥ng t√¨m th·∫•y 'l·ªánh ma' n√†o.")
            return

        create_backup()
        state = load_state()

        print("\n" + "‚ö†Ô∏è" * 5 + " C√ÅC L·ªÜNH B·∫§T ƒê·ªíNG B·ªò ƒê√É ƒê∆Ø·ª¢C T√åM TH·∫§Y " + "‚ö†Ô∏è" * 5)
        for i, trade in enumerate(desynced_trades):
            print(f"{i+1}. {trade['symbol']}: Bot ghi nh·∫≠n {trade.get('quantity', 0):.6f}, nh∆∞ng s·ªë d∆∞ tr√™n s√†n th·∫•p h∆°n ƒë√°ng k·ªÉ.")

        if input("\nüëâ B·∫°n c√≥ mu·ªën x√≥a c√°c l·ªánh n√†y kh·ªèi file tr·∫°ng th√°i kh√¥ng? (y/n): ").lower() != 'y':
            print("H·ªßy thao t√°c.")
            return

        trade_ids_to_remove = {t['trade_id'] for t in desynced_trades}
        for trade in desynced_trades:
            trade['status'] = 'Closed (Desynced)'
            trade['exit_time'] = datetime.now(VIETNAM_TZ).isoformat()
            trade['pnl_usd'] = 0
            state.setdefault('trade_history', []).append(trade)
        
        state['active_trades'] = [t for t in state['active_trades'] if t['trade_id'] not in trade_ids_to_remove]
        
        print(f"\n‚úÖ ƒê√£ d·ªçn d·∫πp {len(desynced_trades)} l·ªánh b·∫•t ƒë·ªìng b·ªô.")
        save_state(state)

    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}"); traceback.print_exc()
    finally:
        release_lock()

def main_menu():
    try:
        with BinanceConnector(network=TRADING_MODE) as bnc:
            if not bnc.test_connection():
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Binance.")
                return
            while True:
                print("\n" + "="*12 + f" üìä B·∫¢NG ƒêI·ªÄU KHI·ªÇN (LIVE-{TRADING_MODE.upper()}) üìä " + "="*12)
                print("1. Xem t·∫•t c·∫£ l·ªánh ƒëang m·ªü (ch·∫©n ƒëo√°n)")
                print("2. ƒê√≥ng m·ªôt l·ªánh h·ª£p l·ªá")
                print("3. ƒê√≥ng T·∫§T C·∫¢ l·ªánh h·ª£p l·ªá")
                print("4. Gia h·∫°n cho m·ªôt l·ªánh h·ª£p l·ªá")
                print("5. M·ªü l·ªánh m·ªõi th·ªß c√¥ng")
                print("6. ƒê·ªìng b·ªô l·∫°i tr·∫°ng th√°i (S·ª≠a l·ªói 'l·ªánh ma')")
                print("0. Tho√°t")
                print("="*61)
                choice = input("üëâ Vui l√≤ng ch·ªçn m·ªôt ch·ª©c nƒÉng: ")
                if choice == '1': view_open_trades(bnc)
                elif choice == '2': close_manual_trades(bnc)
                elif choice == '3': close_all_trades(bnc)
                elif choice == '4': extend_stale_check(bnc)
                elif choice == '5': open_manual_trade(bnc)
                elif choice == '6': reconcile_manually(bnc)
                elif choice == '0': print("üëã T·∫°m bi·ªát!"); break
                else: print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        print(f"\nüî•üî•üî• L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o Binance Connector: {e}"); traceback.print_exc()

if __name__ == "__main__":
    signal.signal(signal.SIGINT, handle_exit_signals)
    if sys.platform != "win32":
        signal.signal(signal.SIGTSTP, handle_exit_signals)

    main_menu()
