# livetrade/live_control_panel.py
import os
import sys
import json
from datetime import datetime, timedelta
import pytz
import requests
import uuid
import traceback

# --- C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)
sys.path.append(PROJECT_ROOT)

try:
    from binance_connector import BinanceConnector
    from live_trade import TRADING_MODE, close_trade_on_binance, get_usdt_fund, TACTICS_LAB, ZONES, INTERVALS_TO_SCAN
except ImportError as e:
    sys.exit(f"L·ªói: Kh√¥ng th·ªÉ import module c·∫ßn thi·∫øt. L·ªói: {e}")

# --- C√ÅC H·∫∞NG S·ªê V√Ä C·∫§U H√åNH ---
STATE_FILE = os.path.join(BASE_DIR, "data", "live_trade_state.json")
# ### <<< S·ª¨A L·ªñI & C·∫¢I TI·∫æN >>> ###
# ƒê·ªãnh nghƒ©a ƒë∆∞·ªùng d·∫´n file .env m·ªôt c√°ch ch√≠nh x√°c
ENV_FILE = os.path.join(PROJECT_ROOT, ".env")
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

TACTICS = list(TACTICS_LAB.keys())
ZONES = list(ZONES)
INTERVALS = list(INTERVALS_TO_SCAN)

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---

# ### <<< S·ª¨A L·ªñI & C·∫¢I TI·∫æN >>> ###
# Th√™m l·∫°i h√†m parse_env_variable ƒë√£ b·ªã x√≥a nh·∫ßm
def parse_env_variable(key_name):
    """ƒê·ªçc m·ªôt bi·∫øn t·ª´ file .env v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng danh s√°ch."""
    try:
        with open(ENV_FILE, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if key.strip() == key_name:
                        # X√≥a c√°c d·∫•u ngo·∫∑c k√©p n·∫øu c√≥
                        value = value.strip().strip('"')
                        return [item.strip() for item in value.split(',')]
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env t·∫°i {ENV_FILE}")
    return []

def get_current_price(symbol):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return float(response.json()['price'])
    except Exception as e:
        print(f"\n‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y gi√° cho {symbol}: {e}")
        return None

def load_state():
    # ... (Gi·ªØ nguy√™n)
    if not os.path.exists(STATE_FILE):
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file tr·∫°ng th√°i t·∫°i: {STATE_FILE}")
        return None
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            if not content:
                return {"active_trades": [], "trade_history": []}
            return json.loads(content)
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file tr·∫°ng th√°i: {e}")
        return None

def save_state(state):
    # ... (Gi·ªØ nguy√™n)
    try:
        state_to_save = state.copy()
        for key in ['temp_newly_opened_trades', 'temp_newly_closed_trades', 'temp_money_spent_on_trades', 'temp_pnl_from_closed_trades']:
            state_to_save.pop(key, None)
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state_to_save, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ ƒê√£ l∆∞u l·∫°i tr·∫°ng th√°i th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file tr·∫°ng th√°i: {e}")

def select_from_list(options, prompt):
    # ... (Gi·ªØ nguy√™n)
    if not options:
        return None
    for i, option in enumerate(options):
        print(f"  {i+1}. {option}")
    while True:
        try:
            choice = int(input(prompt))
            if 1 <= choice <= len(options):
                return options[choice - 1]
            else:
                print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt con s·ªë.")

# --- C√ÅC H√ÄM CH·ª®C NƒÇNG ---

def view_open_trades(bnc: BinanceConnector):
    # ... (Gi·ªØ nguy√™n)
    print("\n--- DANH S√ÅCH L·ªÜNH ƒêANG M·ªû (Live Real-time) ---")
    state = load_state()
    if not state: return None
    available_usdt, total_usdt = get_usdt_fund(bnc)
    active_trades = state.get("active_trades", [])
    if not active_trades:
        print(f"üíµ T·ªïng USDT tr√™n s√†n: ${total_usdt:,.2f} |  Kh·∫£ d·ª•ng: ${available_usdt:,.2f}")
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü.")
        return None
    symbols_needed = list(set(trade['symbol'] for trade in active_trades))
    prices = {sym: get_current_price(sym) for sym in symbols_needed}
    value_of_open_positions = 0
    for trade in active_trades:
        current_price = prices.get(trade['symbol'])
        if current_price:
            value_of_open_positions += trade.get('quantity', 0) * current_price
    total_equity = total_usdt + value_of_open_positions
    initial_capital = state.get('initial_capital', total_usdt)
    if initial_capital <= 0: initial_capital = total_equity
    pnl_total = total_equity - initial_capital
    pnl_icon_total = "üü¢" if pnl_total >= 0 else "üî¥"
    print(f"üí∞ V·ªën Bƒê: ${initial_capital:,.2f} | üíµ T·ªïng USDT: ${total_usdt:,.2f}")
    print(f"üìä T·ªïng t√†i s·∫£n ∆∞·ªõc t√≠nh: ${total_equity:,.2f} | PnL t·ªïng: {pnl_icon_total} ${pnl_total:,.2f}\n")
    for i, trade in enumerate(active_trades):
        symbol = trade.get('symbol', 'N/A')
        current_price = prices.get(symbol)
        if current_price is None:
            print(f"{i+1}. ‚ö†Ô∏è {symbol} - Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i.")
            continue
        entry_price = trade.get('entry_price', 0)
        invested_usd = trade.get('total_invested_usd', 0)
        pnl_multiplier = 1 if trade['trade_type'] == 'LONG' else -1
        pnl_percent = ((current_price - entry_price) / entry_price) * 100 * pnl_multiplier
        pnl_usd = invested_usd * (pnl_percent / 100)
        pnl_icon = "üü¢" if pnl_usd >= 0 else "üî¥"
        holding_hours = (datetime.now(VIETNAM_TZ) - datetime.fromisoformat(trade['entry_time'])).total_seconds() / 3600
        dca_info = f" (DCA:{len(trade.get('dca_entries',[]))})" if trade.get('dca_entries') else ""
        tsl_info = f" TSL:{trade['sl']:.4f}" if "Trailing_SL_Active" in trade.get('tactic_used', []) else ""
        tp1_info = " TP1‚úÖ" if trade.get('tp1_hit', False) else ""
        entry_score = trade.get('entry_score', 0.0)
        last_score = trade.get('last_score', entry_score)
        score_display = f"{entry_score:,.1f}‚Üí{last_score:,.1f}"
        if last_score < entry_score: score_display += "üìâ"
        elif last_score > entry_score: score_display += "üìà"
        entry_zone = trade.get('entry_zone', 'N/A')
        last_zone = trade.get('last_zone', entry_zone)
        zone_display = entry_zone
        if last_zone != entry_zone: zone_display = f"{entry_zone}‚Üí{last_zone}"
        tactic_info = f"({trade.get('opened_by_tactic')} | {score_display} | {zone_display})"
        line1 = (f"{i+1}. {pnl_icon} {symbol}-{trade['interval']} {tactic_info} PnL: ${pnl_usd:,.2f} ({pnl_percent:+.2f}%) | Gi·ªØ:{holding_hours:.1f}h{dca_info}{tp1_info}")
        current_value = invested_usd + pnl_usd
        line2 = (f"    V·ªën:${invested_usd:,.2f} -> ${current_value:,.2f} | Entry:{entry_price:.4f} Cur:{current_price:.4f} TP:{trade.get('tp', 0):.4f} SL:{trade.get('sl', 0):.4f}{tsl_info}")
        print(line1)
        print(line2)
    print("-" * 80)
    return active_trades

def close_manual_trades(bnc: BinanceConnector):
    # ... (Gi·ªØ nguy√™n)
    print("\n" + "üî•" * 10 + " H√ÄNH ƒê·ªòNG TR·ª∞C TI·∫æP TR√äN S√ÄN BINANCE " + "üî•" * 10)
    print("--- Ch·ª©c nƒÉng: ƒê√≥ng l·ªánh th·ªß c√¥ng ---")
    state = load_state()
    if not state: return
    active_trades = view_open_trades(bnc)
    if not active_trades: return
    try:
        choice = input("\nüëâ Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa c√°c l·ªánh c·∫ßn ƒë√≥ng (v√≠ d·ª•: 1,3). Nh·∫•n Enter ƒë·ªÉ h·ªßy: ")
        if not choice.strip():
            print("H·ªßy thao t√°c.")
            return
        indices_to_close = []
        parts = choice.split(',')
        for part in parts:
            if part.strip().isdigit():
                index = int(part.strip()) - 1
                if 0 <= index < len(active_trades):
                    indices_to_close.append(index)
                else:
                    print(f"‚ö†Ô∏è C·∫£nh b√°o: S·ªë '{part.strip()}' kh√¥ng h·ª£p l·ªá.")
        if not indices_to_close:
            print("‚ùå Kh√¥ng c√≥ l·ª±a ch·ªçn h·ª£p l·ªá. Thao t√°c b·ªã h·ªßy.")
            return
        trades_to_process = [active_trades[i] for i in indices_to_close]
        for trade in trades_to_process:
            print(f"\n‚ö°Ô∏è ƒêang g·ª≠i y√™u c·∫ßu ƒë√≥ng l·ªánh cho {trade['symbol']} l√™n Binance...")
            success = close_trade_on_binance(bnc, trade, "Manual", state)
            if success:
                print(f"‚úÖ Y√™u c·∫ßu ƒë√≥ng l·ªánh {trade['symbol']} ƒë√£ ƒë∆∞·ª£c g·ª≠i v√† x·ª≠ l√Ω th√†nh c√¥ng.")
            else:
                print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng l·ªánh {trade['symbol']}. Vui l√≤ng ki·ªÉm tra log ƒë·ªÉ bi·∫øt chi ti·∫øt.")
        save_state(state)
    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
        traceback.print_exc()

def close_all_trades(bnc: BinanceConnector):
    # ... (Gi·ªØ nguy√™n)
    print("\n" + "üî•" * 10 + " H√ÄNH ƒê·ªòNG TR·ª∞C TI·∫æP TR√äN S√ÄN BINANCE " + "üî•" * 10)
    print("--- Ch·ª©c nƒÉng: ƒê√≥ng T·∫§T C·∫¢ l·ªánh ---")
    state = load_state()
    if not state or not state.get("active_trades"):
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ƒë·ªÉ ƒë√≥ng.")
        return
    print("‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y s·∫Ω ƒë√≥ng t·∫•t c·∫£ c√°c v·ªã th·∫ø ƒëang m·ªü tr√™n Binance.")
    confirm = input("üëâ B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/n): ").lower()
    if confirm != 'y':
        print("H·ªßy thao t√°c.")
        return
    trades_to_close = list(state['active_trades'])
    closed_count = 0
    for trade in trades_to_close:
        print(f"\n‚ö°Ô∏è ƒêang g·ª≠i y√™u c·∫ßu ƒë√≥ng l·ªánh cho {trade['symbol']} l√™n Binance...")
        success = close_trade_on_binance(bnc, trade, "All Manual", state)
        if success:
            print(f"‚úÖ Y√™u c·∫ßu ƒë√≥ng l·ªánh {trade['symbol']} ƒë√£ ƒë∆∞·ª£c g·ª≠i v√† x·ª≠ l√Ω th√†nh c√¥ng.")
            closed_count += 1
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng l·ªánh {trade['symbol']}. Vui l√≤ng ki·ªÉm tra log.")
    if closed_count > 0:
        save_state(state)
    else:
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒë∆∞·ª£c ƒë√≥ng.")

# ### <<< S·ª¨A L·ªñI & C·∫¢I TI·∫æN >>> ###
# Th√™m l·∫°i ch·ª©c nƒÉng Gia h·∫°n l·ªánh
def extend_stale_check(bnc: BinanceConnector):
    print("\n--- Ch·ª©c nƒÉng: Gia h·∫°n l·ªánh ---")
    state = load_state()
    if not state: return
    
    active_trades = view_open_trades(bnc)
    if not active_trades: return

    try:
        choice = input("\nüëâ Ch·ªçn s·ªë th·ª© t·ª± c·ªßa l·ªánh c·∫ßn gia h·∫°n (nh·∫•n Enter ƒë·ªÉ h·ªßy): ")
        if not choice.strip() or not choice.strip().isdigit():
            print("H·ªßy thao t√°c.")
            return
            
        index = int(choice.strip()) - 1
        if not (0 <= index < len(active_trades)):
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
            return
            
        hours = float(input("üëâ Nh·∫≠p s·ªë gi·ªù mu·ªën gia h·∫°n (v√≠ d·ª•: 48): "))
        if hours <= 0:
            print("‚ùå S·ªë gi·ªù ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng.")
            return
            
        override_until = datetime.now(VIETNAM_TZ) + timedelta(hours=hours)
        trade_to_update = state['active_trades'][index]
        trade_to_update['stale_override_until'] = override_until.isoformat()
        
        print(f"\n‚úÖ L·ªánh {trade_to_update['symbol']} ƒë√£ ƒë∆∞·ª£c gia h·∫°n.")
        print(f"   H·ªá th·ªëng s·∫Ω b·ªè qua ki·ªÉm tra 'stale' cho l·ªánh n√†y cho ƒë·∫øn: {override_until.strftime('%Y-%m-%d %H:%M:%S')}")
        save_state(state)
        
    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt con s·ªë h·ª£p l·ªá cho s·ªë gi·ªù.")
    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")

# ### <<< S·ª¨A L·ªñI & C·∫¢I TI·∫æN >>> ###
# S·ª≠a l·∫°i ho√†n to√†n ch·ª©c nƒÉng M·ªü l·ªánh m·ªõi
def open_manual_trade(bnc: BinanceConnector):
    print("\n" + "üî•" * 10 + " H√ÄNH ƒê·ªòNG TR·ª∞C TI·∫æP TR√äN S√ÄN BINANCE " + "üî•" * 10)
    print("--- Ch·ª©c nƒÉng: M·ªü l·ªánh m·ªõi th·ªß c√¥ng ---")
    state = load_state()
    if not state: return

    try:
        available_usdt, _ = get_usdt_fund(bnc)
        print(f"üíµ S·ªë d∆∞ USDT kh·∫£ d·ª•ng: ${available_usdt:,.2f}")

        print("\n--- B∆∞·ªõc 1: Ch·ªçn th√¥ng tin c∆° b·∫£n ---")
        
        # ƒê·ªçc danh s√°ch symbol t·ª´ .env
        allowed_symbols = parse_env_variable("SYMBOLS_TO_SCAN")
        if not allowed_symbols:
            print("‚ùå Kh√¥ng th·ªÉ ƒë·ªçc danh s√°ch SYMBOLS_TO_SCAN t·ª´ file .env. Vui l√≤ng ki·ªÉm tra file.")
            return
            
        symbol = select_from_list(allowed_symbols, "üëâ Ch·ªçn Symbol: ")
        interval = select_from_list(INTERVALS, "üëâ Ch·ªçn Interval: ")
        tactic = select_from_list(TACTICS, "üëâ Ch·ªçn Tactic: ")
        zone = select_from_list(ZONES, "üëâ Ch·ªçn V√πng (Zone) v√†o l·ªánh: ")
        
        print("\n--- B∆∞·ªõc 2: Nh·∫≠p chi ti·∫øt l·ªánh ---")
        invested_usd = float(input(f"üëâ S·ªë v·ªën ƒë·∫ßu t∆∞ (USD) cho {symbol}: "))
        sl_percent = float(input("üëâ C·∫Øt l·ªó (SL) bao nhi√™u % (v√≠ d·ª•: 5 cho 5%): ")) / 100
        rr_ratio = float(input("üëâ T·ª∑ l·ªá R:R (v√≠ d·ª•: 2 cho 1:2): "))

        if not all(x > 0 for x in [invested_usd, sl_percent, rr_ratio]):
            print("‚ùå C√°c gi√° tr·ªã ph·∫£i l√† s·ªë d∆∞∆°ng.")
            return
        if invested_usd > available_usdt:
            print(f"‚ùå V·ªën ƒë·∫ßu t∆∞ (${invested_usd:,.2f}) l·ªõn h∆°n USDT kh·∫£ d·ª•ng (${available_usdt:,.2f}).")
            return
            
        print(f"\n‚ö°Ô∏è ƒêang g·ª≠i y√™u c·∫ßu mua {invested_usd:,.2f} USD c·ªßa {symbol} l√™n Binance...")
        market_order = bnc.place_market_order(symbol=symbol, side="BUY", quote_order_qty=round(invested_usd, 2))
        
        if not (market_order and float(market_order.get('executedQty', 0)) > 0):
            print("‚ùå L·ªánh Market kh√¥ng kh·ªõp ho·∫∑c c√≥ l·ªói. Vui l√≤ng ki·ªÉm tra tr√™n s√†n Binance.")
            print("   Response:", market_order)
            return

        filled_qty = float(market_order['executedQty'])
        filled_cost = float(market_order['cummulativeQuoteQty'])
        avg_price = filled_cost / filled_qty
        
        print("\n‚úÖ L·ªánh ƒë√£ kh·ªõp tr√™n Binance!")
        print(f"   - Order ID: {market_order['orderId']}")
        print(f"   - Gi√° kh·ªõp trung b√¨nh: {avg_price:.4f}")
        print(f"   - S·ªë l∆∞·ª£ng ƒë√£ mua: {filled_qty:.8f} {symbol.replace('USDT', '')}")
        print(f"   - T·ªïng chi ph√≠: ${filled_cost:,.2f}")
        
        sl_p = avg_price * (1 - sl_percent)
        tp_p = avg_price * (1 + (sl_percent * rr_ratio))
        
        new_trade = {
            "trade_id": str(uuid.uuid4()),
            "symbol": symbol, "interval": interval, "status": "ACTIVE",
            "opened_by_tactic": tactic, "trade_type": "LONG", "entry_price": avg_price,
            "quantity": filled_qty, "tp": tp_p, "sl": sl_p, "initial_sl": sl_p,
            "initial_entry": {"price": avg_price, "quantity": filled_qty, "invested_usd": filled_cost},
            "total_invested_usd": filled_cost,
            "entry_time": datetime.now(VIETNAM_TZ).isoformat(),
            "entry_score": 9.99, "entry_zone": zone, "last_zone": zone,
            "binance_market_order_id": market_order['orderId'],
            "dca_entries": [], "profit_taken": False, "realized_pnl_usd": 0.0, "last_score": 9.99,
            "peak_pnl_percent": 0.0, "tp1_hit": False, "is_in_warning_zone": False,
            "partial_closed_by_score": False, "tactic_used": [tactic, "Manual_Entry"]
        }

        state.setdefault('active_trades', []).append(new_trade)
        save_state(state)

    except ValueError:
        print("‚ùå Gi√° tr·ªã nh·∫≠p kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë.")
    except Exception as e:
        print(f"\n‚ùå ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën: {e}")
        traceback.print_exc()

def main_menu():
    try:
        with BinanceConnector(network=TRADING_MODE) as bnc:
            if not bnc.test_connection():
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Binance. Vui l√≤ng ki·ªÉm tra API keys v√† m·∫°ng.")
                return

            while True:
                print("\n" + "="*12 + f" üìä B·∫¢NG ƒêI·ªÄU KHI·ªÇN (LIVE-{TRADING_MODE.upper()}) üìä " + "="*12)
                print("1. Xem t·∫•t c·∫£ l·ªánh ƒëang m·ªü")
                print("2. ƒê√≥ng m·ªôt ho·∫∑c nhi·ªÅu l·ªánh th·ªß c√¥ng")
                print("3. ƒê√≥ng T·∫§T C·∫¢ l·ªánh ƒëang m·ªü")
                # ### <<< S·ª¨A L·ªñI & C·∫¢I TI·∫æN >>> ###
                # Th√™m l·∫°i ch·ª©c nƒÉng 4 v√†o menu
                print("4. Gia h·∫°n cho l·ªánh (b·ªè qua ki·ªÉm tra 'stale')")
                print("5. M·ªü l·ªánh m·ªõi th·ªß c√¥ng")
                print("0. Tho√°t")
                print("="*61)
                
                choice = input("üëâ Vui l√≤ng ch·ªçn m·ªôt ch·ª©c nƒÉng: ")
                
                if choice == '1': view_open_trades(bnc)
                elif choice == '2': close_manual_trades(bnc)
                elif choice == '3': close_all_trades(bnc)
                elif choice == '4': extend_stale_check(bnc)
                elif choice == '5': open_manual_trade(bnc)
                elif choice == '0':
                    print("üëã T·∫°m bi·ªát!")
                    break
                else:
                    print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.")
    except Exception as e:
        print(f"\nüî•üî•üî• L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o Binance Connector: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main_menu()
