# livetrade/control_live_panel.py
# -*- coding: utf-8 -*-
"""
Control Live Panel - Manual Intervention Tool
Version: 1.1.0 - Full Compatibility
Date: 2025-08-03

CHANGELOG (v1.1.0):
- COMPATIBILITY: Updated the manual trade creation function (`open_manual_trade`) to include all necessary keys
  (e.g., peak_pnl_percent, profit_taken) to ensure full compatibility with the v8.3.x live_trade bot.
- UI/UX: The open trades view (`view_open_trades`) now displays a shield icon (üõ°Ô∏è) for trades that have
  a manual stale check extension, providing better visibility.
- ROBUSTNESS: Minor improvements to error handling and user prompts.
"""
import os
import sys
import json
from datetime import datetime, timedelta
import pytz
import requests
import uuid
import traceback

# --- C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.dirname(BASE_DIR)
sys.path.append(PROJECT_ROOT)

try:
    from binance_connector import BinanceConnector
    from live_trade import TRADING_MODE, close_trade_on_binance, get_usdt_fund, TACTICS_LAB, ZONES, INTERVALS_TO_SCAN
except ImportError as e:
    sys.exit(f"L·ªói: Kh√¥ng th·ªÉ import module c·∫ßn thi·∫øt. L·ªói: {e}")

# --- C√ÅC H·∫∞NG S·ªê V√Ä C·∫§U H√åNH ---
STATE_FILE = os.path.join(BASE_DIR, "data", "live_trade_state.json")
ENV_FILE = os.path.join(PROJECT_ROOT, ".env")
VIETNAM_TZ = pytz.timezone('Asia/Ho_Chi_Minh')

TACTICS = list(TACTICS_LAB.keys())
ZONES = list(ZONES) # S·ª≠ d·ª•ng ZONES ƒë√£ import
INTERVALS = list(INTERVALS_TO_SCAN) # S·ª≠ d·ª•ng INTERVALS_TO_SCAN ƒë√£ import

# --- C√ÅC H√ÄM TI·ªÜN √çCH ---
def parse_env_variable(key_name):
    try:
        with open(ENV_FILE, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if key.strip() == key_name:
                        value = value.strip().strip('"').strip("'")
                        return [item.strip() for item in value.split(',')]
    except FileNotFoundError:
        print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file .env t·∫°i {ENV_FILE}")
    return []

def get_current_price(symbol):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        return float(response.json()['price'])
    except Exception as e:
        print(f"\n‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y gi√° cho {symbol}: {e}")
        return None

def load_state():
    if not os.path.exists(STATE_FILE):
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file tr·∫°ng th√°i t·∫°i: {STATE_FILE}")
        return None
    try:
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            if not content: return {"active_trades": [], "trade_history": []}
            return json.loads(content)
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file tr·∫°ng th√°i: {e}")
        return None

def save_state(state):
    try:
        state_to_save = state.copy()
        # X√≥a c√°c key t·∫°m th·ªùi tr∆∞·ªõc khi l∆∞u
        for key in ['temp_newly_opened_trades', 'temp_newly_closed_trades', 'temp_money_spent_on_trades', 'temp_pnl_from_closed_trades']:
            state_to_save.pop(key, None)
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state_to_save, f, indent=4, ensure_ascii=False)
        print("\n‚úÖ ƒê√£ l∆∞u l·∫°i tr·∫°ng th√°i th√†nh c√¥ng!")
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u file tr·∫°ng th√°i: {e}")

def select_from_list(options, prompt):
    if not options: return None
    for i, option in enumerate(options): print(f"  {i+1}. {option}")
    while True:
        try:
            choice = int(input(prompt))
            if 1 <= choice <= len(options): return options[choice - 1]
            else: print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        except ValueError:
            print("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m·ªôt con s·ªë.")

# --- C√ÅC H√ÄM CH·ª®C NƒÇNG ---
def view_open_trades(bnc: BinanceConnector):
    print("\n--- DANH S√ÅCH L·ªÜNH ƒêANG M·ªû (Live Real-time) ---")
    state = load_state()
    if not state: return None
    available_usdt, total_usdt = get_usdt_fund(bnc)
    active_trades = state.get("active_trades", [])
    if not active_trades:
        print(f"üíµ T·ªïng USDT tr√™n s√†n: ${total_usdt:,.2f} |  Kh·∫£ d·ª•ng: ${available_usdt:,.2f}")
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü.")
        return None

    symbols_needed = list(set(trade['symbol'] for trade in active_trades))
    prices = {sym: get_current_price(sym) for sym in symbols_needed}
    value_of_open_positions = sum(float(trade.get('quantity', 0)) * prices.get(trade['symbol'], 0) for trade in active_trades)

    total_equity = total_usdt + value_of_open_positions
    initial_capital = state.get('initial_capital', total_usdt)
    if initial_capital <= 0: initial_capital = total_equity

    pnl_total_usd = total_equity - initial_capital
    pnl_total_percent = (pnl_total_usd / initial_capital) * 100 if initial_capital > 0 else 0
    pnl_icon_total = "üü¢" if pnl_total_usd >= 0 else "üî¥"

    header_line1 = f"üí∞ V·ªën Bƒê: ${initial_capital:,.2f} | üíµ Ti·ªÅn m·∫∑t: ${available_usdt:,.2f}"
    header_line2 = f"üìä T·ªïng TS: ${total_equity:,.2f} | PnL T·ªïng: {pnl_icon_total} ${pnl_total_usd:,.2f} ({pnl_total_percent:+.2f}%)"
    print(header_line1)
    print(header_line2)
    print("-" * 80)

    for i, trade in enumerate(active_trades):
        symbol = trade.get('symbol', 'N/A')
        current_price = prices.get(symbol)
        if current_price is None:
            print(f"{i+1}. ‚ö†Ô∏è {symbol} - Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i.")
            continue

        entry_price = trade.get('entry_price', 0)
        invested_usd = trade.get('total_invested_usd', 0)
        pnl_percent = ((current_price - entry_price) / entry_price) * 100 if entry_price > 0 else 0
        pnl_usd = invested_usd * (pnl_percent / 100)
        pnl_icon = "üü¢" if pnl_usd >= 0 else "üî¥"

        holding_hours = (datetime.now(VIETNAM_TZ) - datetime.fromisoformat(trade['entry_time'])).total_seconds() / 3600
        dca_info = f" (DCA:{len(trade.get('dca_entries',[]))})" if trade.get('dca_entries') else ""
        tsl_info = f" TSL:{trade['sl']:.4f}" if "Trailing_SL_Active" in trade.get('tactic_used', []) else ""
        tp1_info = " TP1‚úÖ" if trade.get('tp1_hit', False) else ""
        
        stale_info = ""
        if 'stale_override_until' in trade:
            override_dt = datetime.fromisoformat(trade['stale_override_until'])
            if datetime.now(VIETNAM_TZ) < override_dt:
                stale_info = f" üõ°Ô∏èGia h·∫°n"

        entry_score, last_score = trade.get('entry_score', 0.0), trade.get('last_score', 0.0)
        score_display = f"{entry_score:,.1f}‚Üí{last_score:,.1f}" + ("üìâ" if last_score < entry_score else "üìà" if last_score > entry_score else "")
        zone_display = f"{trade.get('entry_zone', 'N/A')}‚Üí{trade.get('last_zone', 'N/A')}" if trade.get('last_zone') != trade.get('entry_zone') else trade.get('entry_zone', 'N/A')
        tactic_info = f"({trade.get('opened_by_tactic')} | {score_display} | {zone_display})"

        line1 = f"{i+1}. {pnl_icon} {symbol}-{trade.get('interval', 'N/A')} {tactic_info} PnL: ${pnl_usd:,.2f} ({pnl_percent:+.2f}%) | Gi·ªØ:{holding_hours:.1f}h{dca_info}{tp1_info}{stale_info}"
        current_value = invested_usd + pnl_usd
        line2 = f"    V·ªën:${invested_usd:,.2f} -> ${current_value:,.2f} | Entry:{entry_price:.4f} Cur:{current_price:.4f} TP:{trade.get('tp', 0):.4f} SL:{trade.get('sl', 0):.4f}{tsl_info}"

        print(line1)
        print(line2)
    print("-" * 80)
    return active_trades

def close_manual_trades(bnc: BinanceConnector):
    print("\n" + "üî•" * 10 + " H√ÄNH ƒê·ªòNG TR·ª∞C TI·∫æP TR√äN S√ÄN BINANCE " + "üî•" * 10)
    print("--- Ch·ª©c nƒÉng: ƒê√≥ng l·ªánh th·ªß c√¥ng ---")
    state = load_state()
    if not state: return
    active_trades = view_open_trades(bnc)
    if not active_trades: return
    try:
        choice = input("\nüëâ Nh·∫≠p s·ªë th·ª© t·ª± c·ªßa c√°c l·ªánh c·∫ßn ƒë√≥ng (v√≠ d·ª•: 1,3). Nh·∫•n Enter ƒë·ªÉ h·ªßy: ")
        if not choice.strip(): print("H·ªßy thao t√°c."); return

        indices_to_close = []
        for part in choice.split(','):
            if part.strip().isdigit():
                index = int(part.strip()) - 1
                if 0 <= index < len(active_trades): indices_to_close.append(index)
                else: print(f"‚ö†Ô∏è C·∫£nh b√°o: S·ªë '{part.strip()}' kh√¥ng h·ª£p l·ªá.")
        if not indices_to_close: print("‚ùå Kh√¥ng c√≥ l·ª±a ch·ªçn h·ª£p l·ªá."); return

        trades_to_process = [active_trades[i] for i in sorted(list(set(indices_to_close)), reverse=True)]
        for trade in trades_to_process:
            print(f"\n‚ö°Ô∏è ƒêang g·ª≠i y√™u c·∫ßu ƒë√≥ng l·ªánh cho {trade['symbol']}...")
            success = close_trade_on_binance(bnc, trade, "Manual Panel", state)
            if success: print(f"‚úÖ Y√™u c·∫ßu ƒë√≥ng {trade['symbol']} th√†nh c√¥ng.")
            else: print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng {trade['symbol']}. Vui l√≤ng ki·ªÉm tra log.")
        save_state(state)
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}"); traceback.print_exc()

def close_all_trades(bnc: BinanceConnector):
    print("\n" + "üî•" * 10 + " H√ÄNH ƒê·ªòNG TR·ª∞C TI·∫æP TR√äN S√ÄN BINANCE " + "üî•" * 10)
    print("--- Ch·ª©c nƒÉng: ƒê√≥ng T·∫§T C·∫¢ l·ªánh ---")
    state = load_state()
    if not state or not state.get("active_trades"):
        print("‚ÑπÔ∏è Kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ƒë·ªÉ ƒë√≥ng."); return
    if input("‚ö†Ô∏è C·∫¢NH B√ÅO: ƒê√≥ng t·∫•t c·∫£ v·ªã th·∫ø? (y/n): ").lower() != 'y':
        print("H·ªßy thao t√°c."); return

    trades_to_close, closed_count = list(state['active_trades']), 0
    for trade in trades_to_close:
        print(f"\n‚ö°Ô∏è ƒêang ƒë√≥ng {trade['symbol']}...")
        if close_trade_on_binance(bnc, trade, "All Manual", state):
            print(f"‚úÖ ƒê√≥ng {trade['symbol']} th√†nh c√¥ng."); closed_count += 1
        else: print(f"‚ùå Kh√¥ng th·ªÉ ƒë√≥ng {trade['symbol']}.")
    if closed_count > 0: save_state(state)

def extend_stale_check(bnc: BinanceConnector):
    print("\n--- Ch·ª©c nƒÉng: Gia h·∫°n l·ªánh ---")
    state = load_state()
    if not state: return
    active_trades = view_open_trades(bnc)
    if not active_trades: return
    try:
        choice = input("\nüëâ Ch·ªçn s·ªë l·ªánh c·∫ßn gia h·∫°n (Enter ƒë·ªÉ h·ªßy): ")
        if not choice.strip() or not choice.strip().isdigit(): print("H·ªßy thao t√°c."); return
        index = int(choice.strip()) - 1
        if not (0 <= index < len(active_trades)): print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."); return

        hours = float(input("üëâ Nh·∫≠p s·ªë gi·ªù mu·ªën gia h·∫°n (v√≠ d·ª•: 48): "))
        if hours <= 0: print("‚ùå S·ªë gi·ªù ph·∫£i d∆∞∆°ng."); return

        trade_id_to_update = active_trades[index]['trade_id']
        
        # T√¨m v√† c·∫≠p nh·∫≠t trade trong state g·ªëc b·∫±ng trade_id ƒë·ªÉ ƒë·∫£m b·∫£o ch√≠nh x√°c
        for trade in state['active_trades']:
            if trade['trade_id'] == trade_id_to_update:
                override_until = datetime.now(VIETNAM_TZ) + timedelta(hours=hours)
                trade['stale_override_until'] = override_until.isoformat()
                print(f"\n‚úÖ L·ªánh {trade['symbol']} ƒë√£ ƒë∆∞·ª£c gia h·∫°n ƒë·∫øn: {override_until.strftime('%Y-%m-%d %H:%M:%S')}")
                save_state(state)
                return
        print("‚ùå Kh√¥ng t√¨m th·∫•y trade ƒë·ªÉ c·∫≠p nh·∫≠t. C√≥ th·ªÉ state ƒë√£ thay ƒë·ªïi.")

    except ValueError:
        print("‚ùå Vui l√≤ng nh·∫≠p m·ªôt con s·ªë h·ª£p l·ªá.")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")

def open_manual_trade(bnc: BinanceConnector):
    print("\n" + "üî•" * 10 + " H√ÄNH ƒê·ªòNG TR·ª∞C TI·∫æP TR√äN S√ÄN BINANCE " + "üî•" * 10)
    print("--- Ch·ª©c nƒÉng: M·ªü l·ªánh m·ªõi th·ªß c√¥ng ---")
    state = load_state()
    if not state: return
    try:
        available_usdt, _ = get_usdt_fund(bnc)
        print(f"üíµ USDT kh·∫£ d·ª•ng: ${available_usdt:,.2f}")

        allowed_symbols = parse_env_variable("SYMBOLS_TO_SCAN")
        if not allowed_symbols:
            print("‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c SYMBOLS_TO_SCAN t·ª´ file .env."); return

        print("\n--- B∆∞·ªõc 1: Ch·ªçn th√¥ng tin ---")
        symbol = select_from_list(allowed_symbols, "üëâ Ch·ªçn Symbol: ")
        interval = select_from_list(INTERVALS, "üëâ Ch·ªçn Interval: ")
        tactic = select_from_list(TACTICS, "üëâ Ch·ªçn Tactic: ")
        zone = select_from_list(ZONES, "üëâ Ch·ªçn V√πng (Zone): ")

        print("\n--- B∆∞·ªõc 2: Nh·∫≠p chi ti·∫øt ---")
        invested_usd = float(input(f"üëâ V·ªën ƒë·∫ßu t∆∞ (USD): "))
        sl_percent = float(input("üëâ C·∫Øt l·ªó % (v√≠ d·ª•: 5): ")) / 100
        rr_ratio = float(input("üëâ T·ª∑ l·ªá R:R (v√≠ d·ª•: 2): "))

        if not all(x > 0 for x in [invested_usd, sl_percent, rr_ratio]):
            print("‚ùå C√°c gi√° tr·ªã ph·∫£i d∆∞∆°ng."); return
        if invested_usd > available_usdt:
            print(f"‚ùå V·ªën ƒë·∫ßu t∆∞ (${invested_usd:,.2f}) l·ªõn h∆°n USDT kh·∫£ d·ª•ng (${available_usdt:,.2f})."); return

        print(f"\n‚ö°Ô∏è ƒêang g·ª≠i y√™u c·∫ßu mua {invested_usd:,.2f} USD c·ªßa {symbol}...")
        market_order = bnc.place_market_order(symbol=symbol, side="BUY", quote_order_qty=round(invested_usd, 2))
        if not (market_order and float(market_order.get('executedQty', 0)) > 0):
            print("‚ùå L·ªánh Market kh√¥ng kh·ªõp. Response:", market_order); return

        filled_qty, filled_cost = float(market_order['executedQty']), float(market_order['cummulativeQuoteQty'])
        avg_price = filled_cost / filled_qty
        print(f"\n‚úÖ L·ªánh ƒë√£ kh·ªõp! Gi√° TB: {avg_price:.4f}, S·ªë l∆∞·ª£ng: {filled_qty:.8f}")

        sl_p, tp_p = avg_price * (1 - sl_percent), avg_price * (1 + (sl_percent * rr_ratio))

        new_trade = {
            "trade_id": str(uuid.uuid4()), "symbol": symbol, "interval": interval, "status": "ACTIVE",
            "opened_by_tactic": tactic, "trade_type": "LONG", "entry_price": avg_price,
            "quantity": filled_qty, "tp": tp_p, "sl": sl_p, "initial_sl": sl_p,
            "initial_entry": {"price": avg_price, "quantity": filled_qty, "invested_usd": filled_cost},
            "total_invested_usd": filled_cost, "entry_time": datetime.now(VIETNAM_TZ).isoformat(),
            "entry_score": 9.99, "entry_zone": zone, "last_zone": zone,
            "binance_market_order_id": market_order['orderId'], "dca_entries": [],
            "realized_pnl_usd": 0.0, "last_score": 9.99, "peak_pnl_percent": 0.0,
            "tp1_hit": False, "is_in_warning_zone": False, "partial_closed_by_score": False,
            "profit_taken": False, "tactic_used": [tactic, "Manual_Entry"],
            "close_retry_count": 0
        }

        state.setdefault('active_trades', []).append(new_trade)
        save_state(state)
    except ValueError:
        print("‚ùå Gi√° tr·ªã nh·∫≠p kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}"); traceback.print_exc()

def main_menu():
    try:
        with BinanceConnector(network=TRADING_MODE) as bnc:
            if not bnc.test_connection():
                print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi Binance."); return
            while True:
                print("\n" + "="*12 + f" üìä B·∫¢NG ƒêI·ªÄU KHI·ªÇN (LIVE-{TRADING_MODE.upper()}) üìä " + "="*12)
                print("1. Xem t·∫•t c·∫£ l·ªánh ƒëang m·ªü")
                print("2. ƒê√≥ng m·ªôt ho·∫∑c nhi·ªÅu l·ªánh th·ªß c√¥ng")
                print("3. ƒê√≥ng T·∫§T C·∫¢ l·ªánh ƒëang m·ªü")
                print("4. Gia h·∫°n cho l·ªánh (b·ªè qua 'stale')")
                print("5. M·ªü l·ªánh m·ªõi th·ªß c√¥ng")
                print("0. Tho√°t")
                print("="*61)
                choice = input("üëâ Vui l√≤ng ch·ªçn m·ªôt ch·ª©c nƒÉng: ")
                if choice == '1': view_open_trades(bnc)
                elif choice == '2': close_manual_trades(bnc)
                elif choice == '3': close_all_trades(bnc)
                elif choice == '4': extend_stale_check(bnc)
                elif choice == '5': open_manual_trade(bnc)
                elif choice == '0': print("üëã T·∫°m bi·ªát!"); break
                else: print("‚ö†Ô∏è L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
    except Exception as e:
        print(f"\nüî•üî•üî• L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o Binance Connector: {e}"); traceback.print_exc()

if __name__ == "__main__":
    main_menu()
