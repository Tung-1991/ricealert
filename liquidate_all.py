# liquidate_top.py ‚Äì B√°n coin top theo danh s√°ch ch·ªâ ƒë·ªãnh, in ra s·ªë d∆∞ USDT

from binance_connector import BinanceConnector

# C√°c coin top m√† Ng√†i cho ph√©p b√°n
SYMBOLS_TO_SCAN = "ETHUSDT,AVAXUSDT,INJUSDT,LINKUSDT,SUIUSDT,FETUSDT,TAOUSDT,BTCUSDT,ARBUSDT,ADAUSDT,SOLUSDT"
ALLOWED_SYMBOLS = SYMBOLS_TO_SCAN.split(",")

def extract_base_symbol(symbol: str) -> str:
    return symbol.replace("USDT", "")

if __name__ == "__main__":
    with BinanceConnector() as bnc:
        account = bnc.get_account_balance()
        balances = {b['asset']: float(b['free']) for b in account['balances'] if float(b['free']) > 0}

        for symbol in ALLOWED_SYMBOLS:
            coin = extract_base_symbol(symbol)
            if coin not in balances:
                continue

            qty = balances[coin]
            try:
                print(f"üîÅ B√°n {qty} {coin} => {symbol}")
                result = bnc.place_market_order(
                    symbol=symbol,
                    side="SELL",
                    quantity=qty
                )
                print(f"‚úÖ ƒê√£ b√°n {coin}: {result['status']}")
            except Exception as e:
                print(f"‚ùå Kh√¥ng th·ªÉ b√°n {coin}: {e}")

        # In s·ªë d∆∞ USDT sau khi b√°n
        final_account = bnc.get_account_balance()
        usdt_balance = next((b for b in final_account["balances"] if b["asset"] == "USDT"), None)
        print(f"\nüí∞ S·ªê D∆Ø USDT CU·ªêI: {usdt_balance['free'] if usdt_balance else '0'}")
