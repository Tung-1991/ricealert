# /root/ricealert/order_alerter.py (C·∫£i ti·∫øn - Phi√™n b·∫£n 3.2 - Tinh g·ªçn & Ph√¢n c·∫•p)

import os
import requests
from datetime import datetime
from dotenv import load_dotenv

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
WEBHOOK_URL = os.getenv("DISCORD_TRADE_WEBHOOK")

# --- H√†m ti·ªán √≠ch: Format gi√° linh ho·∫°t ---
def format_price(price):
    if not isinstance(price, (int, float)): return price
    return f"{price:.8f}" if price < 0.1 else f"{price:.4f}"

def send_opportunity_alert(decision_data: dict, timestamp_str: str):
    if not WEBHOOK_URL:
        print("L·ªñI: DISCORD_TRADE_WEBHOOK ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t.")
        return

    decision_type = decision_data.get('decision_type')
    final_score = decision_data.get('final_score', 0)
    ind = decision_data.get('full_indicators', {})
    symbol = ind.get('symbol', '???')
    interval = ind.get('interval', '???')
    price_str = format_price(ind.get('price', 0))
    id_str = f"ID: {timestamp_str} {symbol} {interval}"

    title = f"‚ÑπÔ∏è **TH√îNG B√ÅO: {symbol} ({interval})**"
    if decision_type == "OPPORTUNITY_BUY":
        if final_score >= 8.5:
            title = f"üíé **MUA KIM C∆Ø∆†NG (SS): {symbol} ({interval})**"
        elif final_score >= 7.5:
            title = f"üöÄ **MUA M·∫†NH (S): {symbol} ({interval})**"
        elif final_score >= 6.5:
            title = f"‚úÖ **MUA TI√äU CHU·∫®N (A): {symbol} ({interval})**"
        else:
            title = f"üü¢ **MUA XEM X√âT (B): {symbol} ({interval})**"

    elif decision_type == "OPPORTUNITY_SELL":
        if final_score <= 1.5:
            title = f"üö® **B√ÅN KH·∫®N C·∫§P (SS-): {symbol} ({interval})**"
        elif final_score <= 2.5:
            title = f"üÜò **B√ÅN R·ª¶I RO CAO (S-): {symbol} ({interval})**"
        elif final_score <= 3.5:
            title = f"üîª **B√ÅN C·∫¢NH B√ÅO (A-): {symbol} ({interval})**"
        else:
            title = f"üü† **B√ÅN XEM X√âT (B-): {symbol} ({interval})**"

    signal_details = decision_data.get('signal_details', {})
    tech_summary = f"PTKT `{signal_details.get('level', 'N/A').upper()}/{signal_details.get('tag', 'N/A')}`"

    market_trend = decision_data.get('market_trend', 'NEUTRAL')
    news_factor = decision_data.get('news_factor', 0)
    news_icon = " üóûÔ∏è+" if news_factor > 0.5 else " üóûÔ∏è-" if news_factor < -0.5 else ""
    context_summary = f"B·ªëi c·∫£nh `{market_trend}{news_icon}`"

    ai_pred = decision_data.get('ai_prediction', {})
    ai_predicted_pct = ai_pred.get('pct')
    if ai_predicted_pct is not None:
        ai_summary = f"AI `D·ª± ƒëo√°n {ai_predicted_pct:+.2f}%`"
    else:
        prob_buy = ai_pred.get('prob_buy', 50.0)
        prob_sell = ai_pred.get('prob_sell', 0.0)
        ai_skew = prob_buy - prob_sell
        ai_summary = f"AI `Skew {ai_skew:+.1f}`"

    summary_line = f"üìä T√≥m t·∫Øt: {tech_summary} | {context_summary} | {ai_summary}"

    plan = decision_data.get('combined_trade_plan', {})
    entry, tp, sl = plan.get('entry', 0), plan.get('tp', 0), plan.get('sl', 0)
    trade_plan_formatted = "N/A"
    if entry and tp and sl:
        trade_plan_formatted = (
            f"Entry `{format_price(entry)}` ‚Ä∫ TP `{format_price(tp)}` ‚Ä∫ SL `{format_price(sl)}` "
            f"| `{format_price(entry)}/{format_price(tp)}/{format_price(sl)}`"
        )

    full_message = (
        f"{title}\n"
        f"**{id_str}**\n"
        f"‚≠ê **T·ªïng ƒëi·ªÉm: {final_score:.1f}/10** (Gi√°: {price_str})\n"
        f"{summary_line}\n"
        f"üéØ **K·∫ø ho·∫°ch:** {trade_plan_formatted}"
    )

    try:
        response = requests.post(WEBHOOK_URL, json={"content": full_message}, timeout=10)
        response.raise_for_status()
        print(f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o Order '{title.split(':')[0]}' cho {symbol}.")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn Discord: {e}")

